[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar _ = Package.underscore._;\nvar JsonRoutes = Package['simple:json-routes'].JsonRoutes;\nvar RestMiddleware = Package['simple:json-routes'].RestMiddleware;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Accounts = Package['accounts-base'].Accounts;\n\n/* Package-scope variables */\nvar __coffeescriptShare, ironRouterSendErrorToResponse, msg, Restivus;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/nimble_restivus/lib/auth.coffee.js                                                                       //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar getUserQuerySelector, userValidator;                                                                             // 1\n                                                                                                                     //\nthis.Auth || (this.Auth = {});                                                                                       // 1\n                                                                                                                     //\n                                                                                                                     //\n/*                                                                                                                   // 3\n  A valid user will have exactly one of the following identification fields: id, username, or email                  //\n */                                                                                                                  //\n                                                                                                                     //\nuserValidator = Match.Where(function(user) {                                                                         // 6\n  check(user, {                                                                                                      //\n    id: Match.Optional(String),                                                                                      //\n    username: Match.Optional(String),                                                                                //\n    email: Match.Optional(String)                                                                                    //\n  });                                                                                                                //\n  if (_.keys(user).length === !1) {                                                                                  //\n    throw new Match.Error('User must have exactly one identifier field');                                            // 13\n  }                                                                                                                  //\n  return true;                                                                                                       // 15\n});                                                                                                                  // 6\n                                                                                                                     //\n                                                                                                                     //\n/*                                                                                                                   // 18\n  Return a MongoDB query selector for finding the given user                                                         //\n */                                                                                                                  //\n                                                                                                                     //\ngetUserQuerySelector = function(user) {                                                                              // 21\n  if (user.id) {                                                                                                     //\n    return {                                                                                                         // 23\n      '_id': user.id                                                                                                 //\n    };                                                                                                               //\n  } else if (user.username) {                                                                                        //\n    return {                                                                                                         // 25\n      'username': user.username                                                                                      //\n    };                                                                                                               //\n  } else if (user.email) {                                                                                           //\n    return {                                                                                                         // 27\n      'emails.address': user.email                                                                                   //\n    };                                                                                                               //\n  }                                                                                                                  //\n  throw new Error('Cannot create selector from invalid user');                                                       // 30\n};                                                                                                                   // 21\n                                                                                                                     //\n                                                                                                                     //\n/*                                                                                                                   // 33\n  Log a user in with their password                                                                                  //\n */                                                                                                                  //\n                                                                                                                     //\nthis.Auth.loginWithPassword = function(user, password) {                                                             // 36\n  var authToken, authenticatingUser, authenticatingUserSelector, hashedToken, passwordVerification, ref;             // 37\n  if (!user || !password) {                                                                                          //\n    throw new Meteor.Error(401, 'Unauthorized');                                                                     // 38\n  }                                                                                                                  //\n  check(user, userValidator);                                                                                        //\n  check(password, String);                                                                                           //\n  authenticatingUserSelector = getUserQuerySelector(user);                                                           //\n  authenticatingUser = Meteor.users.findOne(authenticatingUserSelector);                                             //\n  if (!authenticatingUser) {                                                                                         //\n    throw new Meteor.Error(401, 'Unauthorized');                                                                     // 49\n  }                                                                                                                  //\n  if (!((ref = authenticatingUser.services) != null ? ref.password : void 0)) {                                      //\n    throw new Meteor.Error(401, 'Unauthorized');                                                                     // 51\n  }                                                                                                                  //\n  passwordVerification = Accounts._checkPassword(authenticatingUser, password);                                      //\n  if (passwordVerification.error) {                                                                                  //\n    throw new Meteor.Error(401, 'Unauthorized');                                                                     // 56\n  }                                                                                                                  //\n  authToken = Accounts._generateStampedLoginToken();                                                                 //\n  hashedToken = Accounts._hashLoginToken(authToken.token);                                                           //\n  Accounts._insertHashedLoginToken(authenticatingUser._id, {                                                         //\n    hashedToken: hashedToken                                                                                         //\n  });                                                                                                                //\n  return {                                                                                                           // 63\n    authToken: authToken.token,                                                                                      //\n    userId: authenticatingUser._id                                                                                   //\n  };                                                                                                                 //\n};                                                                                                                   // 36\n                                                                                                                     //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/nimble_restivus/lib/iron-router-error-to-response.js                                                     //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n// We need a function that treats thrown errors exactly like Iron Router would.\n// This file is written in JavaScript to enable copy-pasting Iron Router code.\n\n// Taken from: https://github.com/iron-meteor/iron-router/blob/9c369499c98af9fd12ef9e68338dee3b1b1276aa/lib/router_server.js#L3\nvar env = process.env.NODE_ENV || 'development';\n\n// Taken from: https://github.com/iron-meteor/iron-router/blob/9c369499c98af9fd12ef9e68338dee3b1b1276aa/lib/router_server.js#L47\nironRouterSendErrorToResponse = function (err, req, res) {\n  if (res.statusCode < 400)\n    res.statusCode = 500;\n\n  if (err.status)\n    res.statusCode = err.status;\n\n  if (env === 'development')\n    msg = (err.stack || err.toString()) + '\\n';\n  else\n    //XXX get this from standard dict of error messages?\n    msg = 'Server error.';\n\n  console.error(err.stack || err.toString());\n\n  if (res.headersSent)\n    return req.socket.destroy();\n\n  res.setHeader('Content-Type', 'text/html');\n  res.setHeader('Content-Length', Buffer.byteLength(msg));\n  if (req.method === 'HEAD')\n    return res.end();\n  res.end(msg);\n  return;\n}\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/nimble_restivus/lib/route.coffee.js                                                                      //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nshare.Route = (function() {                                                                                          // 1\n  function Route(api, path, options, endpoints1) {                                                                   //\n    this.api = api;                                                                                                  //\n    this.path = path;                                                                                                //\n    this.options = options;                                                                                          //\n    this.endpoints = endpoints1;                                                                                     //\n    if (!this.endpoints) {                                                                                           //\n      this.endpoints = this.options;                                                                                 //\n      this.options = {};                                                                                             //\n    }                                                                                                                //\n  }                                                                                                                  //\n                                                                                                                     //\n  Route.prototype.addToApi = (function() {                                                                           //\n    var availableMethods;                                                                                            // 11\n    availableMethods = ['get', 'post', 'put', 'patch', 'delete', 'options'];                                         //\n    return function() {                                                                                              // 13\n      var allowedMethods, fullPath, rejectedMethods, self;                                                           // 14\n      self = this;                                                                                                   //\n      if (_.contains(this.api._config.paths, this.path)) {                                                           //\n        throw new Error(\"Cannot add a route at an existing path: \" + this.path);                                     // 19\n      }                                                                                                              //\n      this.endpoints = _.extend({                                                                                    //\n        options: this.api._config.defaultOptionsEndpoint                                                             //\n      }, this.endpoints);                                                                                            //\n      this._resolveEndpoints();                                                                                      //\n      this._configureEndpoints();                                                                                    //\n      this.api._config.paths.push(this.path);                                                                        //\n      allowedMethods = _.filter(availableMethods, function(method) {                                                 //\n        return _.contains(_.keys(self.endpoints), method);                                                           //\n      });                                                                                                            //\n      rejectedMethods = _.reject(availableMethods, function(method) {                                                //\n        return _.contains(_.keys(self.endpoints), method);                                                           //\n      });                                                                                                            //\n      fullPath = this.api._config.apiPath + this.path;                                                               //\n      _.each(allowedMethods, function(method) {                                                                      //\n        var endpoint;                                                                                                // 39\n        endpoint = self.endpoints[method];                                                                           //\n        return JsonRoutes.add(method, fullPath, function(req, res) {                                                 //\n          var doneFunc, endpointContext, error, error1, responseData, responseInitiated;                             // 42\n          responseInitiated = false;                                                                                 //\n          doneFunc = function() {                                                                                    //\n            return responseInitiated = true;                                                                         //\n          };                                                                                                         //\n          endpointContext = {                                                                                        //\n            urlParams: req.params,                                                                                   //\n            queryParams: req.query,                                                                                  //\n            bodyParams: req.body,                                                                                    //\n            request: req,                                                                                            //\n            response: res,                                                                                           //\n            done: doneFunc                                                                                           //\n          };                                                                                                         //\n          _.extend(endpointContext, endpoint);                                                                       //\n          responseData = null;                                                                                       //\n          try {                                                                                                      // 58\n            responseData = self._callEndpoint(endpointContext, endpoint);                                            //\n          } catch (error1) {                                                                                         //\n            error = error1;                                                                                          //\n            ironRouterSendErrorToResponse(error, req, res);                                                          //\n            return;                                                                                                  // 63\n          }                                                                                                          //\n          if (responseInitiated) {                                                                                   //\n            res.end();                                                                                               //\n            return;                                                                                                  // 68\n          } else {                                                                                                   //\n            if (res.headersSent) {                                                                                   //\n              throw new Error(\"Must call this.done() after handling endpoint response manually: \" + method + \" \" + fullPath);\n            } else if (responseData === null || responseData === void 0) {                                           //\n              throw new Error(\"Cannot return null or undefined from an endpoint: \" + method + \" \" + fullPath);       // 73\n            }                                                                                                        //\n          }                                                                                                          //\n          if (responseData.body && (responseData.statusCode || responseData.headers)) {                              //\n            return self._respond(res, responseData.body, responseData.statusCode, responseData.headers);             //\n          } else {                                                                                                   //\n            return self._respond(res, responseData);                                                                 //\n          }                                                                                                          //\n        });                                                                                                          //\n      });                                                                                                            //\n      return _.each(rejectedMethods, function(method) {                                                              //\n        return JsonRoutes.add(method, fullPath, function(req, res) {                                                 //\n          var headers, responseData;                                                                                 // 83\n          responseData = {                                                                                           //\n            status: 'error',                                                                                         //\n            message: 'API endpoint does not exist'                                                                   //\n          };                                                                                                         //\n          headers = {                                                                                                //\n            'Allow': allowedMethods.join(', ').toUpperCase()                                                         //\n          };                                                                                                         //\n          return self._respond(res, responseData, 405, headers);                                                     //\n        });                                                                                                          //\n      });                                                                                                            //\n    };                                                                                                               //\n  })();                                                                                                              //\n                                                                                                                     //\n                                                                                                                     //\n  /*                                                                                                                 // 88\n    Convert all endpoints on the given route into our expected endpoint object if it is a bare                       //\n    function                                                                                                         //\n                                                                                                                     //\n    @param {Route} route The route the endpoints belong to                                                           //\n   */                                                                                                                //\n                                                                                                                     //\n  Route.prototype._resolveEndpoints = function() {                                                                   //\n    _.each(this.endpoints, function(endpoint, method, endpoints) {                                                   //\n      if (_.isFunction(endpoint)) {                                                                                  //\n        return endpoints[method] = {                                                                                 //\n          action: endpoint                                                                                           //\n        };                                                                                                           //\n      }                                                                                                              //\n    });                                                                                                              //\n  };                                                                                                                 //\n                                                                                                                     //\n                                                                                                                     //\n  /*                                                                                                                 // 101\n    Configure the authentication and role requirement on all endpoints (except OPTIONS, which must                   //\n    be configured directly on the endpoint)                                                                          //\n                                                                                                                     //\n    Authentication can be required on an entire route or individual endpoints. If required on an                     //\n    entire route, that serves as the default. If required in any individual endpoints, that will                     //\n    override the default.                                                                                            //\n                                                                                                                     //\n    After the endpoint is configured, all authentication and role requirements of an endpoint can be                 //\n    accessed at <code>endpoint.authRequired</code> and <code>endpoint.roleRequired</code>,                           //\n    respectively.                                                                                                    //\n                                                                                                                     //\n    @param {Route} route The route the endpoints belong to                                                           //\n    @param {Endpoint} endpoint The endpoint to configure                                                             //\n   */                                                                                                                //\n                                                                                                                     //\n  Route.prototype._configureEndpoints = function() {                                                                 //\n    _.each(this.endpoints, function(endpoint, method) {                                                              //\n      var ref, ref1;                                                                                                 // 118\n      if (method !== 'options') {                                                                                    //\n        if (!((ref = this.options) != null ? ref.roleRequired : void 0)) {                                           //\n          this.options.roleRequired = [];                                                                            //\n        }                                                                                                            //\n        if (!endpoint.roleRequired) {                                                                                //\n          endpoint.roleRequired = [];                                                                                //\n        }                                                                                                            //\n        endpoint.roleRequired = _.union(endpoint.roleRequired, this.options.roleRequired);                           //\n        if (_.isEmpty(endpoint.roleRequired)) {                                                                      //\n          endpoint.roleRequired = false;                                                                             //\n        }                                                                                                            //\n        if (endpoint.authRequired === void 0) {                                                                      //\n          if (((ref1 = this.options) != null ? ref1.authRequired : void 0) || endpoint.roleRequired) {               //\n            endpoint.authRequired = true;                                                                            //\n          } else {                                                                                                   //\n            endpoint.authRequired = false;                                                                           //\n          }                                                                                                          //\n        }                                                                                                            //\n      }                                                                                                              //\n    }, this);                                                                                                        //\n  };                                                                                                                 //\n                                                                                                                     //\n                                                                                                                     //\n  /*                                                                                                                 // 140\n    Authenticate an endpoint if required, and return the result of calling it                                        //\n                                                                                                                     //\n    @returns The endpoint response or a 401 if authentication fails                                                  //\n   */                                                                                                                //\n                                                                                                                     //\n  Route.prototype._callEndpoint = function(endpointContext, endpoint) {                                              //\n    if (this._authAccepted(endpointContext, endpoint)) {                                                             //\n      if (this._roleAccepted(endpointContext, endpoint)) {                                                           //\n        return endpoint.action.call(endpointContext);                                                                //\n      } else {                                                                                                       //\n        return {                                                                                                     //\n          statusCode: 403,                                                                                           //\n          body: {                                                                                                    //\n            status: 'error',                                                                                         //\n            message: 'You do not have permission to do this.'                                                        //\n          }                                                                                                          //\n        };                                                                                                           //\n      }                                                                                                              //\n    } else {                                                                                                         //\n      return {                                                                                                       //\n        statusCode: 401,                                                                                             //\n        body: {                                                                                                      //\n          status: 'error',                                                                                           //\n          message: 'You must be logged in to do this.'                                                               //\n        }                                                                                                            //\n      };                                                                                                             //\n    }                                                                                                                //\n  };                                                                                                                 //\n                                                                                                                     //\n                                                                                                                     //\n  /*                                                                                                                 // 158\n    Authenticate the given endpoint if required                                                                      //\n                                                                                                                     //\n    Once it's globally configured in the API, authentication can be required on an entire route or                   //\n    individual endpoints. If required on an entire endpoint, that serves as the default. If required                 //\n    in any individual endpoints, that will override the default.                                                     //\n                                                                                                                     //\n    @returns False if authentication fails, and true otherwise                                                       //\n   */                                                                                                                //\n                                                                                                                     //\n  Route.prototype._authAccepted = function(endpointContext, endpoint) {                                              //\n    if (endpoint.authRequired) {                                                                                     //\n      return this._authenticate(endpointContext);                                                                    //\n    } else {                                                                                                         //\n      return true;                                                                                                   //\n    }                                                                                                                //\n  };                                                                                                                 //\n                                                                                                                     //\n                                                                                                                     //\n  /*                                                                                                                 // 173\n    Verify the request is being made by an actively logged in user                                                   //\n                                                                                                                     //\n    If verified, attach the authenticated user to the context.                                                       //\n                                                                                                                     //\n    @returns {Boolean} True if the authentication was successful                                                     //\n   */                                                                                                                //\n                                                                                                                     //\n  Route.prototype._authenticate = function(endpointContext) {                                                        //\n    var auth, userSelector;                                                                                          // 182\n    auth = this.api._config.auth.user.call(endpointContext);                                                         //\n    if ((auth != null ? auth.userId : void 0) && (auth != null ? auth.token : void 0) && !(auth != null ? auth.user : void 0)) {\n      userSelector = {};                                                                                             //\n      userSelector._id = auth.userId;                                                                                //\n      userSelector[this.api._config.auth.token] = auth.token;                                                        //\n      auth.user = Meteor.users.findOne(userSelector);                                                                //\n    }                                                                                                                //\n    if (auth != null ? auth.user : void 0) {                                                                         //\n      endpointContext.user = auth.user;                                                                              //\n      endpointContext.userId = auth.user._id;                                                                        //\n      return true;                                                                                                   //\n    } else {                                                                                                         //\n      return false;                                                                                                  //\n    }                                                                                                                //\n  };                                                                                                                 //\n                                                                                                                     //\n                                                                                                                     //\n  /*                                                                                                                 // 199\n    Authenticate the user role if required                                                                           //\n                                                                                                                     //\n    Must be called after _authAccepted().                                                                            //\n                                                                                                                     //\n    @returns True if the authenticated user belongs to <i>any</i> of the acceptable roles on the                     //\n             endpoint                                                                                                //\n   */                                                                                                                //\n                                                                                                                     //\n  Route.prototype._roleAccepted = function(endpointContext, endpoint) {                                              //\n    if (endpoint.roleRequired) {                                                                                     //\n      if (_.isEmpty(_.intersection(endpoint.roleRequired, endpointContext.user.roles))) {                            //\n        return false;                                                                                                // 210\n      }                                                                                                              //\n    }                                                                                                                //\n    return true;                                                                                                     //\n  };                                                                                                                 //\n                                                                                                                     //\n                                                                                                                     //\n  /*                                                                                                                 // 214\n    Respond to an HTTP request                                                                                       //\n   */                                                                                                                //\n                                                                                                                     //\n  Route.prototype._respond = function(response, body, statusCode, headers) {                                         //\n    var defaultHeaders, delayInMilliseconds, minimumDelayInMilliseconds, randomMultiplierBetweenOneAndTwo, sendResponse;\n    if (statusCode == null) {                                                                                        //\n      statusCode = 200;                                                                                              //\n    }                                                                                                                //\n    if (headers == null) {                                                                                           //\n      headers = {};                                                                                                  //\n    }                                                                                                                //\n    defaultHeaders = this._lowerCaseKeys(this.api._config.defaultHeaders);                                           //\n    headers = this._lowerCaseKeys(headers);                                                                          //\n    headers = _.extend(defaultHeaders, headers);                                                                     //\n    if (headers['content-type'].match(/json|javascript/) !== null) {                                                 //\n      if (this.api._config.prettyJson) {                                                                             //\n        body = JSON.stringify(body, void 0, 2);                                                                      //\n      } else {                                                                                                       //\n        body = JSON.stringify(body);                                                                                 //\n      }                                                                                                              //\n    }                                                                                                                //\n    sendResponse = function() {                                                                                      //\n      response.writeHead(statusCode, headers);                                                                       //\n      response.write(body);                                                                                          //\n      return response.end();                                                                                         //\n    };                                                                                                               //\n    if (statusCode === 401 || statusCode === 403) {                                                                  //\n      minimumDelayInMilliseconds = 500;                                                                              //\n      randomMultiplierBetweenOneAndTwo = 1 + Math.random();                                                          //\n      delayInMilliseconds = minimumDelayInMilliseconds * randomMultiplierBetweenOneAndTwo;                           //\n      return Meteor.setTimeout(sendResponse, delayInMilliseconds);                                                   //\n    } else {                                                                                                         //\n      return sendResponse();                                                                                         //\n    }                                                                                                                //\n  };                                                                                                                 //\n                                                                                                                     //\n                                                                                                                     //\n  /*                                                                                                                 // 250\n    Return the object with all of the keys converted to lowercase                                                    //\n   */                                                                                                                //\n                                                                                                                     //\n  Route.prototype._lowerCaseKeys = function(object) {                                                                //\n    return _.chain(object).pairs().map(function(attr) {                                                              //\n      return [attr[0].toLowerCase(), attr[1]];                                                                       //\n    }).object().value();                                                                                             //\n  };                                                                                                                 //\n                                                                                                                     //\n  return Route;                                                                                                      //\n                                                                                                                     //\n})();                                                                                                                //\n                                                                                                                     //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/nimble_restivus/lib/restivus.coffee.js                                                                   //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar                                                                                                                  //\n    indexOf = [].indexOf || function (item) {                                                                        //\n  for (var i = 0, l = this.length; i < l; i++) {                                                                     //\n    if (i in this && this[i] === item) return i;                                                                     //\n  }return -1;                                                                                                        //\n};                                                                                                                   //\n                                                                                                                     //\nthis.Restivus = function () {                                                                                        //\n  function Restivus(options) {                                                                                       //\n    var corsHeaders;                                                                                                 //\n    this._routes = [];                                                                                               //\n    this._config = {                                                                                                 //\n      paths: [],                                                                                                     //\n      useDefaultAuth: false,                                                                                         //\n      apiPath: 'api/',                                                                                               //\n      version: null,                                                                                                 //\n      prettyJson: false,                                                                                             //\n      auth: {                                                                                                        //\n        token: 'services.resume.loginTokens.hashedToken',                                                            //\n        user: function user() {                                                                                      //\n          var token;                                                                                                 //\n          if (this.request.headers['x-auth-token']) {                                                                //\n            token = Accounts._hashLoginToken(this.request.headers['x-auth-token']);                                  //\n          }                                                                                                          //\n          return {                                                                                                   //\n            userId: this.request.headers['x-user-id'],                                                               //\n            token: token                                                                                             //\n          };                                                                                                         //\n        }                                                                                                            //\n      },                                                                                                             //\n      defaultHeaders: {                                                                                              //\n        'Content-Type': 'application/json'                                                                           //\n      },                                                                                                             //\n      enableCors: true                                                                                               //\n    };                                                                                                               //\n    _.extend(this._config, options);                                                                                 //\n    if (this._config.enableCors) {                                                                                   //\n      corsHeaders = {                                                                                                //\n        'Access-Control-Allow-Origin': '*',                                                                          //\n        'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept'                             //\n      };                                                                                                             //\n      if (this._config.useDefaultAuth) {                                                                             //\n        corsHeaders['Access-Control-Allow-Headers'] += ', X-User-Id, X-Auth-Token';                                  //\n      }                                                                                                              //\n      _.extend(this._config.defaultHeaders, corsHeaders);                                                            //\n      if (!this._config.defaultOptionsEndpoint) {                                                                    //\n        this._config.defaultOptionsEndpoint = function () {                                                          //\n          this.response.writeHead(200, corsHeaders);                                                                 //\n          return this.done();                                                                                        //\n        };                                                                                                           //\n      }                                                                                                              //\n    }                                                                                                                //\n    if (this._config.apiPath[0] === '/') {                                                                           //\n      this._config.apiPath = this._config.apiPath.slice(1);                                                          //\n    }                                                                                                                //\n    if (_.last(this._config.apiPath) !== '/') {                                                                      //\n      this._config.apiPath = this._config.apiPath + '/';                                                             //\n    }                                                                                                                //\n    if (this._config.version) {                                                                                      //\n      this._config.apiPath += this._config.version + '/';                                                            //\n    }                                                                                                                //\n    if (this._config.useDefaultAuth) {                                                                               //\n      this._initAuth();                                                                                              //\n    } else if (this._config.useAuth) {                                                                               //\n      this._initAuth();                                                                                              //\n      console.warn('Warning: useAuth API config option will be removed in Restivus v1.0 ' + '\\n    Use the useDefaultAuth option instead');\n    }                                                                                                                //\n    return this;                                                                                                     //\n  }                                                                                                                  //\n                                                                                                                     //\n  /**                                                                                                                //\n    Add endpoints for the given HTTP methods at the given path                                                       //\n                                                                                                                     //\n    @param path {String} The extended URL path (will be appended to base path of the API)                            //\n    @param options {Object} Route configuration options                                                              //\n    @param options.authRequired {Boolean} The default auth requirement for each endpoint on the route                //\n    @param options.roleRequired {String or String[]} The default role required for each endpoint on the route        //\n    @param endpoints {Object} A set of endpoints available on the new route (get, post, put, patch, delete, options)\n    @param endpoints.<method> {Function or Object} If a function is provided, all default route                      //\n        configuration options will be applied to the endpoint. Otherwise an object with an `action`                  //\n        and all other route config options available. An `action` must be provided with the object.                  //\n   */                                                                                                                //\n                                                                                                                     //\n  Restivus.prototype.addRoute = function (path, options, endpoints) {                                                //\n    var route;                                                                                                       //\n    route = new share.Route(this, path, options, endpoints);                                                         //\n    this._routes.push(route);                                                                                        //\n    route.addToApi();                                                                                                //\n    return this;                                                                                                     //\n  };                                                                                                                 //\n                                                                                                                     //\n  /**                                                                                                                //\n    Generate routes for the Meteor Collection with the given name                                                    //\n   */                                                                                                                //\n                                                                                                                     //\n  Restivus.prototype.addCollection = function (collection, options) {                                                //\n    var collectionEndpoints, collectionRouteEndpoints, endpointsAwaitingConfiguration, entityRouteEndpoints, excludedEndpoints, methods, methodsOnCollection, path, routeOptions;\n    if (options == null) {                                                                                           //\n      options = {};                                                                                                  //\n    }                                                                                                                //\n    methods = ['get', 'post', 'put', 'delete', 'getAll'];                                                            //\n    methodsOnCollection = ['post', 'getAll'];                                                                        //\n    if (collection === Meteor.users) {                                                                               //\n      collectionEndpoints = this._userCollectionEndpoints;                                                           //\n    } else {                                                                                                         //\n      collectionEndpoints = this._collectionEndpoints;                                                               //\n    }                                                                                                                //\n    endpointsAwaitingConfiguration = options.endpoints || {};                                                        //\n    routeOptions = options.routeOptions || {};                                                                       //\n    excludedEndpoints = options.excludedEndpoints || [];                                                             //\n    path = options.path || collection._name;                                                                         //\n    collectionRouteEndpoints = {};                                                                                   //\n    entityRouteEndpoints = {};                                                                                       //\n    if (_.isEmpty(endpointsAwaitingConfiguration) && _.isEmpty(excludedEndpoints)) {                                 //\n      _.each(methods, function (method) {                                                                            //\n        if (indexOf.call(methodsOnCollection, method) >= 0) {                                                        //\n          _.extend(collectionRouteEndpoints, collectionEndpoints[method].call(this, collection));                    //\n        } else {                                                                                                     //\n          _.extend(entityRouteEndpoints, collectionEndpoints[method].call(this, collection));                        //\n        }                                                                                                            //\n      }, this);                                                                                                      //\n    } else {                                                                                                         //\n      _.each(methods, function (method) {                                                                            //\n        var configuredEndpoint, endpointOptions;                                                                     //\n        if (indexOf.call(excludedEndpoints, method) < 0 && endpointsAwaitingConfiguration[method] !== false) {       //\n          endpointOptions = endpointsAwaitingConfiguration[method];                                                  //\n          configuredEndpoint = {};                                                                                   //\n          _.each(collectionEndpoints[method].call(this, collection), function (action, methodType) {                 //\n            return configuredEndpoint[methodType] = _.chain(action).clone().extend(endpointOptions).value();         //\n          });                                                                                                        //\n          if (indexOf.call(methodsOnCollection, method) >= 0) {                                                      //\n            _.extend(collectionRouteEndpoints, configuredEndpoint);                                                  //\n          } else {                                                                                                   //\n            _.extend(entityRouteEndpoints, configuredEndpoint);                                                      //\n          }                                                                                                          //\n        }                                                                                                            //\n      }, this);                                                                                                      //\n    }                                                                                                                //\n    this.addRoute(path, routeOptions, collectionRouteEndpoints);                                                     //\n    this.addRoute(path + \"/:id\", routeOptions, entityRouteEndpoints);                                                //\n    return this;                                                                                                     //\n  };                                                                                                                 //\n                                                                                                                     //\n  /**                                                                                                                //\n    A set of endpoints that can be applied to a Collection Route                                                     //\n   */                                                                                                                //\n                                                                                                                     //\n  Restivus.prototype._collectionEndpoints = {                                                                        //\n    get: function get(collection) {                                                                                  //\n      return {                                                                                                       //\n        get: {                                                                                                       //\n          action: function action() {                                                                                //\n            var entity;                                                                                              //\n            entity = collection.findOne(this.urlParams.id);                                                          //\n            if (entity) {                                                                                            //\n              return {                                                                                               //\n                status: 'success',                                                                                   //\n                data: entity                                                                                         //\n              };                                                                                                     //\n            } else {                                                                                                 //\n              return {                                                                                               //\n                statusCode: 404,                                                                                     //\n                body: {                                                                                              //\n                  status: 'fail',                                                                                    //\n                  message: 'Item not found'                                                                          //\n                }                                                                                                    //\n              };                                                                                                     //\n            }                                                                                                        //\n          }                                                                                                          //\n        }                                                                                                            //\n      };                                                                                                             //\n    },                                                                                                               //\n    put: function put(collection) {                                                                                  //\n      return {                                                                                                       //\n        put: {                                                                                                       //\n          action: function action() {                                                                                //\n            var entity, entityIsUpdated;                                                                             //\n            entityIsUpdated = collection.update(this.urlParams.id, this.bodyParams);                                 //\n            if (entityIsUpdated) {                                                                                   //\n              entity = collection.findOne(this.urlParams.id);                                                        //\n              return {                                                                                               //\n                status: 'success',                                                                                   //\n                data: entity                                                                                         //\n              };                                                                                                     //\n            } else {                                                                                                 //\n              return {                                                                                               //\n                statusCode: 404,                                                                                     //\n                body: {                                                                                              //\n                  status: 'fail',                                                                                    //\n                  message: 'Item not found'                                                                          //\n                }                                                                                                    //\n              };                                                                                                     //\n            }                                                                                                        //\n          }                                                                                                          //\n        }                                                                                                            //\n      };                                                                                                             //\n    },                                                                                                               //\n    \"delete\": function _delete(collection) {                                                                         //\n      return {                                                                                                       //\n        \"delete\": {                                                                                                  //\n          action: function action() {                                                                                //\n            if (collection.remove(this.urlParams.id)) {                                                              //\n              return {                                                                                               //\n                status: 'success',                                                                                   //\n                data: {                                                                                              //\n                  message: 'Item removed'                                                                            //\n                }                                                                                                    //\n              };                                                                                                     //\n            } else {                                                                                                 //\n              return {                                                                                               //\n                statusCode: 404,                                                                                     //\n                body: {                                                                                              //\n                  status: 'fail',                                                                                    //\n                  message: 'Item not found'                                                                          //\n                }                                                                                                    //\n              };                                                                                                     //\n            }                                                                                                        //\n          }                                                                                                          //\n        }                                                                                                            //\n      };                                                                                                             //\n    },                                                                                                               //\n    post: function post(collection) {                                                                                //\n      return {                                                                                                       //\n        post: {                                                                                                      //\n          action: function action() {                                                                                //\n            var entity, entityId;                                                                                    //\n            entityId = collection.insert(this.bodyParams);                                                           //\n            entity = collection.findOne(entityId);                                                                   //\n            if (entity) {                                                                                            //\n              return {                                                                                               //\n                statusCode: 201,                                                                                     //\n                body: {                                                                                              //\n                  status: 'success',                                                                                 //\n                  data: entity                                                                                       //\n                }                                                                                                    //\n              };                                                                                                     //\n            } else {                                                                                                 //\n              return {                                                                                               //\n                statusCode: 400,                                                                                     //\n                body: {                                                                                              //\n                  status: 'fail',                                                                                    //\n                  message: 'No item added'                                                                           //\n                }                                                                                                    //\n              };                                                                                                     //\n            }                                                                                                        //\n          }                                                                                                          //\n        }                                                                                                            //\n      };                                                                                                             //\n    },                                                                                                               //\n    getAll: function getAll(collection) {                                                                            //\n      return {                                                                                                       //\n        get: {                                                                                                       //\n          action: function action() {                                                                                //\n            var entities;                                                                                            //\n            entities = collection.find().fetch();                                                                    //\n            if (entities) {                                                                                          //\n              return {                                                                                               //\n                status: 'success',                                                                                   //\n                data: entities                                                                                       //\n              };                                                                                                     //\n            } else {                                                                                                 //\n              return {                                                                                               //\n                statusCode: 404,                                                                                     //\n                body: {                                                                                              //\n                  status: 'fail',                                                                                    //\n                  message: 'Unable to retrieve items from collection'                                                //\n                }                                                                                                    //\n              };                                                                                                     //\n            }                                                                                                        //\n          }                                                                                                          //\n        }                                                                                                            //\n      };                                                                                                             //\n    }                                                                                                                //\n  };                                                                                                                 //\n                                                                                                                     //\n  /**                                                                                                                //\n    A set of endpoints that can be applied to a Meteor.users Collection Route                                        //\n   */                                                                                                                //\n                                                                                                                     //\n  Restivus.prototype._userCollectionEndpoints = {                                                                    //\n    get: function get(collection) {                                                                                  //\n      return {                                                                                                       //\n        get: {                                                                                                       //\n          action: function action() {                                                                                //\n            var entity;                                                                                              //\n            entity = collection.findOne(this.urlParams.id, {                                                         //\n              fields: {                                                                                              //\n                profile: 1                                                                                           //\n              }                                                                                                      //\n            });                                                                                                      //\n            if (entity) {                                                                                            //\n              return {                                                                                               //\n                status: 'success',                                                                                   //\n                data: entity                                                                                         //\n              };                                                                                                     //\n            } else {                                                                                                 //\n              return {                                                                                               //\n                statusCode: 404,                                                                                     //\n                body: {                                                                                              //\n                  status: 'fail',                                                                                    //\n                  message: 'User not found'                                                                          //\n                }                                                                                                    //\n              };                                                                                                     //\n            }                                                                                                        //\n          }                                                                                                          //\n        }                                                                                                            //\n      };                                                                                                             //\n    },                                                                                                               //\n    put: function put(collection) {                                                                                  //\n      return {                                                                                                       //\n        put: {                                                                                                       //\n          action: function action() {                                                                                //\n            var entity, entityIsUpdated;                                                                             //\n            entityIsUpdated = collection.update(this.urlParams.id, {                                                 //\n              $set: {                                                                                                //\n                profile: this.bodyParams                                                                             //\n              }                                                                                                      //\n            });                                                                                                      //\n            if (entityIsUpdated) {                                                                                   //\n              entity = collection.findOne(this.urlParams.id, {                                                       //\n                fields: {                                                                                            //\n                  profile: 1                                                                                         //\n                }                                                                                                    //\n              });                                                                                                    //\n              return {                                                                                               //\n                status: \"success\",                                                                                   //\n                data: entity                                                                                         //\n              };                                                                                                     //\n            } else {                                                                                                 //\n              return {                                                                                               //\n                statusCode: 404,                                                                                     //\n                body: {                                                                                              //\n                  status: 'fail',                                                                                    //\n                  message: 'User not found'                                                                          //\n                }                                                                                                    //\n              };                                                                                                     //\n            }                                                                                                        //\n          }                                                                                                          //\n        }                                                                                                            //\n      };                                                                                                             //\n    },                                                                                                               //\n    \"delete\": function _delete(collection) {                                                                         //\n      return {                                                                                                       //\n        \"delete\": {                                                                                                  //\n          action: function action() {                                                                                //\n            if (collection.remove(this.urlParams.id)) {                                                              //\n              return {                                                                                               //\n                status: 'success',                                                                                   //\n                data: {                                                                                              //\n                  message: 'User removed'                                                                            //\n                }                                                                                                    //\n              };                                                                                                     //\n            } else {                                                                                                 //\n              return {                                                                                               //\n                statusCode: 404,                                                                                     //\n                body: {                                                                                              //\n                  status: 'fail',                                                                                    //\n                  message: 'User not found'                                                                          //\n                }                                                                                                    //\n              };                                                                                                     //\n            }                                                                                                        //\n          }                                                                                                          //\n        }                                                                                                            //\n      };                                                                                                             //\n    },                                                                                                               //\n    post: function post(collection) {                                                                                //\n      return {                                                                                                       //\n        post: {                                                                                                      //\n          action: function action() {                                                                                //\n            var entity, entityId;                                                                                    //\n            entityId = Accounts.createUser(this.bodyParams);                                                         //\n            entity = collection.findOne(entityId, {                                                                  //\n              fields: {                                                                                              //\n                profile: 1                                                                                           //\n              }                                                                                                      //\n            });                                                                                                      //\n            if (entity) {                                                                                            //\n              return {                                                                                               //\n                statusCode: 201,                                                                                     //\n                body: {                                                                                              //\n                  status: 'success',                                                                                 //\n                  data: entity                                                                                       //\n                }                                                                                                    //\n              };                                                                                                     //\n            } else {                                                                                                 //\n              ({                                                                                                     //\n                statusCode: 400                                                                                      //\n              });                                                                                                    //\n              return {                                                                                               //\n                status: 'fail',                                                                                      //\n                message: 'No user added'                                                                             //\n              };                                                                                                     //\n            }                                                                                                        //\n          }                                                                                                          //\n        }                                                                                                            //\n      };                                                                                                             //\n    },                                                                                                               //\n    getAll: function getAll(collection) {                                                                            //\n      return {                                                                                                       //\n        get: {                                                                                                       //\n          action: function action() {                                                                                //\n            var entities;                                                                                            //\n            entities = collection.find({}, {                                                                         //\n              fields: {                                                                                              //\n                profile: 1                                                                                           //\n              }                                                                                                      //\n            }).fetch();                                                                                              //\n            if (entities) {                                                                                          //\n              return {                                                                                               //\n                status: 'success',                                                                                   //\n                data: entities                                                                                       //\n              };                                                                                                     //\n            } else {                                                                                                 //\n              return {                                                                                               //\n                statusCode: 404,                                                                                     //\n                body: {                                                                                              //\n                  status: 'fail',                                                                                    //\n                  message: 'Unable to retrieve users'                                                                //\n                }                                                                                                    //\n              };                                                                                                     //\n            }                                                                                                        //\n          }                                                                                                          //\n        }                                                                                                            //\n      };                                                                                                             //\n    }                                                                                                                //\n  };                                                                                                                 //\n                                                                                                                     //\n  /*                                                                                                                 //\n    Add /login and /logout endpoints to the API                                                                      //\n   */                                                                                                                //\n                                                                                                                     //\n  Restivus.prototype._initAuth = function () {                                                                       //\n    var logout, self;                                                                                                //\n    self = this;                                                                                                     //\n                                                                                                                     //\n    /*                                                                                                               //\n      Add a login endpoint to the API                                                                                //\n                                                                                                                     //\n      After the user is logged in, the onLoggedIn hook is called (see Restfully.configure() for                      //\n      adding hook).                                                                                                  //\n     */                                                                                                              //\n    this.addRoute('login', {                                                                                         //\n      authRequired: false                                                                                            //\n    }, {                                                                                                             //\n      post: function post() {                                                                                        //\n        var auth, e, error, extraData, ref, ref1, response, searchQuery, user;                                       //\n        user = {};                                                                                                   //\n        if (this.bodyParams.user) {                                                                                  //\n          if (this.bodyParams.user.indexOf('@') === -1) {                                                            //\n            user.username = this.bodyParams.user;                                                                    //\n          } else {                                                                                                   //\n            user.email = this.bodyParams.user;                                                                       //\n          }                                                                                                          //\n        } else if (this.bodyParams.username) {                                                                       //\n          user.username = this.bodyParams.username;                                                                  //\n        } else if (this.bodyParams.email) {                                                                          //\n          user.email = this.bodyParams.email;                                                                        //\n        }                                                                                                            //\n        try {                                                                                                        //\n          auth = Auth.loginWithPassword(user, this.bodyParams.password);                                             //\n        } catch (error) {                                                                                            //\n          e = error;                                                                                                 //\n          return {                                                                                                   //\n            statusCode: e.error,                                                                                     //\n            body: {                                                                                                  //\n              status: 'error',                                                                                       //\n              message: e.reason                                                                                      //\n            }                                                                                                        //\n          };                                                                                                         //\n        }                                                                                                            //\n        if (auth.userId && auth.authToken) {                                                                         //\n          searchQuery = {};                                                                                          //\n          searchQuery[self._config.auth.token] = Accounts._hashLoginToken(auth.authToken);                           //\n          this.user = Meteor.users.findOne({                                                                         //\n            '_id': auth.userId                                                                                       //\n          }, searchQuery);                                                                                           //\n          this.userId = (ref = this.user) != null ? ref._id : void 0;                                                //\n        }                                                                                                            //\n        response = {                                                                                                 //\n          status: 'success',                                                                                         //\n          data: auth                                                                                                 //\n        };                                                                                                           //\n        extraData = (ref1 = self._config.onLoggedIn) != null ? ref1.call(this) : void 0;                             //\n        if (extraData != null) {                                                                                     //\n          _.extend(response.data, {                                                                                  //\n            extra: extraData                                                                                         //\n          });                                                                                                        //\n        }                                                                                                            //\n        return response;                                                                                             //\n      }                                                                                                              //\n    });                                                                                                              //\n    logout = function logout() {                                                                                     //\n      var authToken, extraData, hashedToken, index, ref, response, tokenFieldName, tokenLocation, tokenPath, tokenRemovalQuery, tokenToRemove;\n      authToken = this.request.headers['x-auth-token'];                                                              //\n      hashedToken = Accounts._hashLoginToken(authToken);                                                             //\n      tokenLocation = self._config.auth.token;                                                                       //\n      index = tokenLocation.lastIndexOf('.');                                                                        //\n      tokenPath = tokenLocation.substring(0, index);                                                                 //\n      tokenFieldName = tokenLocation.substring(index + 1);                                                           //\n      tokenToRemove = {};                                                                                            //\n      tokenToRemove[tokenFieldName] = hashedToken;                                                                   //\n      tokenRemovalQuery = {};                                                                                        //\n      tokenRemovalQuery[tokenPath] = tokenToRemove;                                                                  //\n      Meteor.users.update(this.user._id, {                                                                           //\n        $pull: tokenRemovalQuery                                                                                     //\n      });                                                                                                            //\n      response = {                                                                                                   //\n        status: 'success',                                                                                           //\n        data: {                                                                                                      //\n          message: 'You\\'ve been logged out!'                                                                        //\n        }                                                                                                            //\n      };                                                                                                             //\n      extraData = (ref = self._config.onLoggedOut) != null ? ref.call(this) : void 0;                                //\n      if (extraData != null) {                                                                                       //\n        _.extend(response.data, {                                                                                    //\n          extra: extraData                                                                                           //\n        });                                                                                                          //\n      }                                                                                                              //\n      return response;                                                                                               //\n    };                                                                                                               //\n                                                                                                                     //\n    /*                                                                                                               //\n      Add a logout endpoint to the API                                                                               //\n                                                                                                                     //\n      After the user is logged out, the onLoggedOut hook is called (see Restfully.configure() for                    //\n      adding hook).                                                                                                  //\n     */                                                                                                              //\n    return this.addRoute('logout', {                                                                                 //\n      authRequired: true                                                                                             //\n    }, {                                                                                                             //\n      get: function get() {                                                                                          //\n        console.warn(\"Warning: Default logout via GET will be removed in Restivus v1.0. Use POST instead.\");         //\n        console.warn(\"    See https://github.com/kahmali/meteor-restivus/issues/100\");                               //\n        return logout.call(this);                                                                                    //\n      },                                                                                                             //\n      post: logout                                                                                                   //\n    });                                                                                                              //\n  };                                                                                                                 //\n                                                                                                                     //\n  return Restivus;                                                                                                   //\n}();                                                                                                                 //\n                                                                                                                     //\nRestivus = this.Restivus;                                                                                            //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['nimble:restivus'] = {}, {\n  Restivus: Restivus\n});\n\n})();\n","servePath":"/packages/nimble_restivus.js","sourceMap":{"version":3,"sources":["/packages/nimble_restivus/lib/auth.coffee","/packages/nimble_restivus/lib/iron-router-error-to-response.js","/packages/nimble_restivus/lib/route.coffee"],"names":[],"mappings":"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","file":"/packages/nimble_restivus.js","sourcesContent":["@Auth or= {}\n\n###\n  A valid user will have exactly one of the following identification fields: id, username, or email\n###\nuserValidator = Match.Where (user) ->\n  check user,\n    id: Match.Optional String\n    username: Match.Optional String\n    email: Match.Optional String\n\n  if _.keys(user).length is not 1\n    throw new Match.Error 'User must have exactly one identifier field'\n\n  return true\n\n\n###\n  Return a MongoDB query selector for finding the given user\n###\ngetUserQuerySelector = (user) ->\n  if user.id\n    return {'_id': user.id}\n  else if user.username\n    return {'username': user.username}\n  else if user.email\n    return {'emails.address': user.email}\n\n  # We shouldn't be here if the user object was properly validated\n  throw new Error 'Cannot create selector from invalid user'\n\n\n###\n  Log a user in with their password\n###\n@Auth.loginWithPassword = (user, password) ->\n  if not user or not password\n    throw new Meteor.Error 401, 'Unauthorized'\n\n  # Validate the login input types\n  check user, userValidator\n  check password, String\n\n  # Retrieve the user from the database\n  authenticatingUserSelector = getUserQuerySelector(user)\n  authenticatingUser = Meteor.users.findOne(authenticatingUserSelector)\n\n  if not authenticatingUser\n    throw new Meteor.Error 401, 'Unauthorized'\n  if not authenticatingUser.services?.password\n    throw new Meteor.Error 401, 'Unauthorized'\n\n  # Authenticate the user's password\n  passwordVerification = Accounts._checkPassword authenticatingUser, password\n  if passwordVerification.error\n    throw new Meteor.Error 401, 'Unauthorized'\n\n  # Add a new auth token to the user's account\n  authToken = Accounts._generateStampedLoginToken()\n  hashedToken = Accounts._hashLoginToken authToken.token\n  Accounts._insertHashedLoginToken authenticatingUser._id, {hashedToken}\n\n  return {authToken: authToken.token, userId: authenticatingUser._id}\n","// We need a function that treats thrown errors exactly like Iron Router would.\n// This file is written in JavaScript to enable copy-pasting Iron Router code.\n\n// Taken from: https://github.com/iron-meteor/iron-router/blob/9c369499c98af9fd12ef9e68338dee3b1b1276aa/lib/router_server.js#L3\nvar env = process.env.NODE_ENV || 'development';\n\n// Taken from: https://github.com/iron-meteor/iron-router/blob/9c369499c98af9fd12ef9e68338dee3b1b1276aa/lib/router_server.js#L47\nironRouterSendErrorToResponse = function (err, req, res) {\n  if (res.statusCode < 400)\n    res.statusCode = 500;\n\n  if (err.status)\n    res.statusCode = err.status;\n\n  if (env === 'development')\n    msg = (err.stack || err.toString()) + '\\n';\n  else\n    //XXX get this from standard dict of error messages?\n    msg = 'Server error.';\n\n  console.error(err.stack || err.toString());\n\n  if (res.headersSent)\n    return req.socket.destroy();\n\n  res.setHeader('Content-Type', 'text/html');\n  res.setHeader('Content-Length', Buffer.byteLength(msg));\n  if (req.method === 'HEAD')\n    return res.end();\n  res.end(msg);\n  return;\n}\n","class share.Route\n\n  constructor: (@api, @path, @options, @endpoints) ->\n    # Check if options were provided\n    if not @endpoints\n      @endpoints = @options\n      @options = {}\n\n\n  addToApi: do ->\n    availableMethods = ['get', 'post', 'put', 'patch', 'delete', 'options']\n\n    return ->\n      self = this\n\n      # Throw an error if a route has already been added at this path\n      # TODO: Check for collisions with paths that follow same pattern with different parameter names\n      if _.contains @api._config.paths, @path\n        throw new Error \"Cannot add a route at an existing path: #{@path}\"\n\n      # Override the default OPTIONS endpoint with our own\n      @endpoints = _.extend options: @api._config.defaultOptionsEndpoint, @endpoints\n\n      # Configure each endpoint on this route\n      @_resolveEndpoints()\n      @_configureEndpoints()\n\n      # Add to our list of existing paths\n      @api._config.paths.push @path\n\n      allowedMethods = _.filter availableMethods, (method) ->\n        _.contains(_.keys(self.endpoints), method)\n      rejectedMethods = _.reject availableMethods, (method) ->\n        _.contains(_.keys(self.endpoints), method)\n\n      # Setup endpoints on route\n      fullPath = @api._config.apiPath + @path\n      _.each allowedMethods, (method) ->\n        endpoint = self.endpoints[method]\n        JsonRoutes.add method, fullPath, (req, res) ->\n          # Add function to endpoint context for indicating a response has been initiated manually\n          responseInitiated = false\n          doneFunc = ->\n            responseInitiated = true\n\n          endpointContext =\n            urlParams: req.params\n            queryParams: req.query\n            bodyParams: req.body\n            request: req\n            response: res\n            done: doneFunc\n          # Add endpoint config options to context\n          _.extend endpointContext, endpoint\n\n          # Run the requested endpoint\n          responseData = null\n          try\n            responseData = self._callEndpoint endpointContext, endpoint\n          catch error\n            # Do exactly what Iron Router would have done, to avoid changing the API\n            ironRouterSendErrorToResponse(error, req, res);\n            return\n\n          if responseInitiated\n            # Ensure the response is properly completed\n            res.end()\n            return\n          else\n            if res.headersSent\n              throw new Error \"Must call this.done() after handling endpoint response manually: #{method} #{fullPath}\"\n            else if responseData is null or responseData is undefined\n              throw new Error \"Cannot return null or undefined from an endpoint: #{method} #{fullPath}\"\n\n          # Generate and return the http response, handling the different endpoint response types\n          if responseData.body and (responseData.statusCode or responseData.headers)\n            self._respond res, responseData.body, responseData.statusCode, responseData.headers\n          else\n            self._respond res, responseData\n\n      _.each rejectedMethods, (method) ->\n        JsonRoutes.add method, fullPath, (req, res) ->\n          responseData = status: 'error', message: 'API endpoint does not exist'\n          headers = 'Allow': allowedMethods.join(', ').toUpperCase()\n          self._respond res, responseData, 405, headers\n\n\n  ###\n    Convert all endpoints on the given route into our expected endpoint object if it is a bare\n    function\n\n    @param {Route} route The route the endpoints belong to\n  ###\n  _resolveEndpoints: ->\n    _.each @endpoints, (endpoint, method, endpoints) ->\n      if _.isFunction(endpoint)\n        endpoints[method] = {action: endpoint}\n    return\n\n\n  ###\n    Configure the authentication and role requirement on all endpoints (except OPTIONS, which must\n    be configured directly on the endpoint)\n\n    Authentication can be required on an entire route or individual endpoints. If required on an\n    entire route, that serves as the default. If required in any individual endpoints, that will\n    override the default.\n\n    After the endpoint is configured, all authentication and role requirements of an endpoint can be\n    accessed at <code>endpoint.authRequired</code> and <code>endpoint.roleRequired</code>,\n    respectively.\n\n    @param {Route} route The route the endpoints belong to\n    @param {Endpoint} endpoint The endpoint to configure\n  ###\n  _configureEndpoints: ->\n    _.each @endpoints, (endpoint, method) ->\n      if method isnt 'options'\n        # Configure acceptable roles\n        if not @options?.roleRequired\n          @options.roleRequired = []\n        if not endpoint.roleRequired\n          endpoint.roleRequired = []\n        endpoint.roleRequired = _.union endpoint.roleRequired, @options.roleRequired\n        # Make it easier to check if no roles are required\n        if _.isEmpty endpoint.roleRequired\n          endpoint.roleRequired = false\n\n        # Configure auth requirement\n        if endpoint.authRequired is undefined\n          if @options?.authRequired or endpoint.roleRequired\n            endpoint.authRequired = true\n          else\n            endpoint.authRequired = false\n        return\n    , this\n    return\n\n\n  ###\n    Authenticate an endpoint if required, and return the result of calling it\n\n    @returns The endpoint response or a 401 if authentication fails\n  ###\n  _callEndpoint: (endpointContext, endpoint) ->\n    # Call the endpoint if authentication doesn't fail\n    if @_authAccepted endpointContext, endpoint\n      if @_roleAccepted endpointContext, endpoint\n        endpoint.action.call endpointContext\n      else\n        statusCode: 403\n        body: {status: 'error', message: 'You do not have permission to do this.'}\n    else\n      statusCode: 401\n      body: {status: 'error', message: 'You must be logged in to do this.'}\n\n\n  ###\n    Authenticate the given endpoint if required\n\n    Once it's globally configured in the API, authentication can be required on an entire route or\n    individual endpoints. If required on an entire endpoint, that serves as the default. If required\n    in any individual endpoints, that will override the default.\n\n    @returns False if authentication fails, and true otherwise\n  ###\n  _authAccepted: (endpointContext, endpoint) ->\n    if endpoint.authRequired\n      @_authenticate endpointContext\n    else true\n\n\n  ###\n    Verify the request is being made by an actively logged in user\n\n    If verified, attach the authenticated user to the context.\n\n    @returns {Boolean} True if the authentication was successful\n  ###\n  _authenticate: (endpointContext) ->\n    # Get auth info\n    auth = @api._config.auth.user.call(endpointContext)\n\n    # Get the user from the database\n    if auth?.userId and auth?.token and not auth?.user\n      userSelector = {}\n      userSelector._id = auth.userId\n      userSelector[@api._config.auth.token] = auth.token\n      auth.user = Meteor.users.findOne userSelector\n\n    # Attach the user and their ID to the context if the authentication was successful\n    if auth?.user\n      endpointContext.user = auth.user\n      endpointContext.userId = auth.user._id\n      true\n    else false\n\n\n  ###\n    Authenticate the user role if required\n\n    Must be called after _authAccepted().\n\n    @returns True if the authenticated user belongs to <i>any</i> of the acceptable roles on the\n             endpoint\n  ###\n  _roleAccepted: (endpointContext, endpoint) ->\n    if endpoint.roleRequired\n      if _.isEmpty _.intersection(endpoint.roleRequired, endpointContext.user.roles)\n        return false\n    true\n\n\n  ###\n    Respond to an HTTP request\n  ###\n  _respond: (response, body, statusCode=200, headers={}) ->\n    # Override any default headers that have been provided (keys are normalized to be case insensitive)\n    # TODO: Consider only lowercasing the header keys we need normalized, like Content-Type\n    defaultHeaders = @_lowerCaseKeys @api._config.defaultHeaders\n    headers = @_lowerCaseKeys headers\n    headers = _.extend defaultHeaders, headers\n\n    # Prepare JSON body for response when Content-Type indicates JSON type\n    if headers['content-type'].match(/json|javascript/) isnt null\n      if @api._config.prettyJson\n        body = JSON.stringify body, undefined, 2\n      else\n        body = JSON.stringify body\n\n    # Send response\n    sendResponse = ->\n      response.writeHead statusCode, headers\n      response.write body\n      response.end()\n    if statusCode in [401, 403]\n      # Hackers can measure the response time to determine things like whether the 401 response was \n      # caused by bad user id vs bad password.\n      # In doing so, they can first scan for valid user ids regardless of valid passwords.\n      # Delay by a random amount to reduce the ability for a hacker to determine the response time.\n      # See https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks#Finding_Other_Countermeasures\n      # See https://en.wikipedia.org/wiki/Timing_attack\n      minimumDelayInMilliseconds = 500\n      randomMultiplierBetweenOneAndTwo = 1 + Math.random()\n      delayInMilliseconds = minimumDelayInMilliseconds * randomMultiplierBetweenOneAndTwo\n      Meteor.setTimeout sendResponse, delayInMilliseconds\n    else\n      sendResponse()\n\n  ###\n    Return the object with all of the keys converted to lowercase\n  ###\n  _lowerCaseKeys: (object) ->\n    _.chain object\n    .pairs()\n    .map (attr) ->\n      [attr[0].toLowerCase(), attr[1]]\n    .object()\n    .value()\n"]}}]