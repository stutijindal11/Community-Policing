[{"type":"js","data":"/* Imports for global scope */\n\nQueue = Package['artwells:queue'].Queue;\nMongo = Package.mongo.Mongo;\nSession = Package.session.Session;\n$ = Package.jquery.$;\njQuery = Package.jquery.jQuery;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nLog = Package.logging.Log;\nReload = Package.reload.Reload;\nRandom = Package.random.Random;\nEJSON = Package.ejson.EJSON;\nSpacebars = Package.spacebars.Spacebars;\ncheck = Package.check.check;\nMatch = Package.check.Match;\nsAlert = Package['juliancwirko:s-alert'].sAlert;\nPersistentSession = Package['u2622:persistent-session'].PersistentSession;\nmoment = Package['momentjs:moment'].moment;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nReactiveTable = Package['aslagle:reactive-table'].ReactiveTable;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nTemplate = Package['templating-runtime'].Template;\nAccounts = Package['accounts-base'].Accounts;\nIron = Package['iron:core'].Iron;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"(function(){\nTemplate.__checkName(\"CrimeMap\");\nTemplate[\"CrimeMap\"] = new Template(\"Template.CrimeMap\", (function() {\n  var view = this;\n  return [ HTML.DIV({\n    class: \"row\"\n  }, \"\\n      \", HTML.DIV({\n    class: \"col-md-12\"\n  }, \"\\n          \", HTML.DIV({\n    class: \"row\"\n  }, \"\\n              \", HTML.DIV({\n    class: \"col-md-4\"\n  }, \"\\n                  \", HTML.Raw('<!--<div class=\"row\">\\n                      <div class=\"col-md-12\">\\n                          <a id=\"modal-391902\" href=\"#modal-container-391902\" role=\"button\" class=\"btn\" data-toggle=\"modal\">Instructions</a>\\n\\n                          <div class=\"modal fade\" id=\"modal-container-391902\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\\n                              <div class=\"modal-dialog\">\\n                                  <div class=\"modal-content\">\\n                                      <div class=\"modal-header\">\\n\\n                                          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">\\n                      Ã—\\n                    </button>\\n                                          <h4 class=\"modal-title\" id=\"myModalLabel\">\\n                      Modal title\\n                    </h4>\\n                                      </div>\\n                                      <div class=\"modal-body\">\\n                                          ...\\n                                      </div>\\n                                      <div class=\"modal-footer\">\\n\\n                                          <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">\\n                      Close\\n                    </button>\\n                                          <button type=\"button\" class=\"btn btn-primary\">\\n                      Save changes\\n                    </button>\\n                                      </div>\\n                                  </div>\\n\\n                              </div>\\n\\n                          </div>\\n\\n                      </div>\\n                  </div>-->'), \"\\n                \", Spacebars.include(view.lookupTemplate(\"form\")), \"\\n              \"), \"\\n              \", HTML.DIV({\n    class: \"col-md-8\"\n  }, \"\\n    \", Spacebars.include(view.lookupTemplate(\"map\")), \"\\n              \"), \"\\n          \"), \"\\n      \"), \"\\n  \"), \"\\n  \", HTML.DIV({\n    class: \"row\"\n  }, \"\\n      \", HTML.DIV({\n    class: \"col-md-12\"\n  }, \"\\n        \", Spacebars.include(view.lookupTemplate(\"eventtable\")), \"\\n      \"), \"\\n  \") ];\n}));\n\nTemplate.__checkName(\"eventtable\");\nTemplate[\"eventtable\"] = new Template(\"Template.eventtable\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.templateInstance().subscriptionsReady());\n  }, function() {\n    return [ \"\\n            \", Blaze._TemplateWith(function() {\n      return {\n        class: Spacebars.call(\"table\"),\n        collection: Spacebars.call(view.lookup(\"getData\")),\n        settings: Spacebars.call(view.lookup(\"settings\")),\n        rowClass: Spacebars.call(view.lookup(\"getRowClass\"))\n      };\n    }, function() {\n      return Spacebars.include(view.lookupTemplate(\"reactiveTable\"));\n    }), \"\\n            \" ];\n  });\n}));\n\nTemplate.__checkName(\"map\");\nTemplate[\"map\"] = new Template(\"Template.map\", (function() {\n  var view = this;\n  return HTML.Raw('<div id=\"container\">\\n      <div id=\"map\" class=\"map\" style=\"height: 500px\"></div>\\n    </div>');\n}));\n\nTemplate.__checkName(\"form\");\nTemplate[\"form\"] = new Template(\"Template.form\", (function() {\n  var view = this;\n  return [ HTML.FORM({\n    id: \"filter-form\",\n    style: \"height: 35%\"\n  }, \"\\n      \", HTML.DIV({\n    class: \"form-group\"\n  }, \"\\n       \", HTML.DIV({\n    class: \"row\"\n  }, \"\\n    \", HTML.DIV({\n    class: \"col-md-12\"\n  }, \"\\n      \", HTML.DIV({\n    style: \"padding-bottom: 5px;\"\n  }, \"\\n        \", HTML.Raw('<!--<select id=\"isCity\" class=\"btn btn-default dropdown-toggle\">\\n                  <option value=\"0\" {{campusSelected}}>Campus Crime</option>\\n                <option value=\"1\" {{citySelected}}>City Crime</option>\\n              </select>-->'), \"\\n              \", Spacebars.include(view.lookupTemplate(\"toggle_button\")), \"\\n       \"), \"\\n    \"), \"\\n       \"), \"\\n       \", HTML.DIV({\n    class: \"row\"\n  }, \"\\n    \", HTML.DIV({\n    class: \"col-xs-8\"\n  }, \"\\n      \", HTML.DIV({\n    style: \"padding-bottom: 5px;\"\n  }, \"\\n          \", HTML.Raw('<label class=\"CrimeMapLabel\" for=\"myInput\"><br></label>'), HTML.Raw(\"<br>\"), \"\\n            \", HTML.SELECT({\n    id: \"university\",\n    class: \"btn btn-default dropdown-toggle CrimeMapSelect\"\n  }, \"\\n                 \", HTML.Raw('<!--<option value=\"0\" {{syracuseSelected}}>{{syracuseName}}</option>\\n                 <option value=\"1\" {{emorySelected}}>{{emoryName}}</option>\\n                 <option value=\"2\" {{riceSelected}}>{{riceName}}</option>\\n                 <option value=\"3\" {{georgiatechSelected}}>{{georgiatechName}}</option>\\n                 <option value=\"4\" {{ubuffaloSelected}}>{{ubuffaloName}}</option>\\n                 <option value=\"5\" {{uhunterSelected}}>{{uhunterName}}</option>-->'), \"\\n                 \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"getPlaces\"));\n  }, function() {\n    return [ \"\\n                    \", HTML.OPTION(HTML.Attrs({\n      value: function() {\n        return Spacebars.mustache(view.lookup(\"placeIndex\"));\n      },\n      \"data-id\": function() {\n        return Spacebars.mustache(view.lookup(\"_id\"));\n      }\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"placeSelected\"));\n    }), Blaze.View(\"lookup:placeCategory\", function() {\n      return Spacebars.mustache(view.lookup(\"placeCategory\"));\n    })), \"\\n                 \" ];\n  }), \"\\n            \"), \"\\n     \"), \"\\n    \"), \"\\n\\n    \", HTML.DIV({\n    class: \"col-xs-4\"\n  }, \"\\n      \", HTML.DIV({\n    style: \"padding-bottom: 5px;\"\n  }, \"\\n              \", HTML.Raw('<label class=\"CrimeMapLabel\" for=\"myInput\">Severity&nbsp; &nbsp;</label>'), HTML.Raw(\"<br>\"), \"\\n              \", HTML.SELECT({\n    id: \"severity\",\n    class: \"btn btn-default dropdown-toggle CrimeMapSelect\"\n  }, \"\\n                   \", HTML.OPTION(HTML.Attrs({\n    value: \"10\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"anySelected\"));\n  }), \"Any\"), \"\\n                   \", HTML.OPTION(HTML.Attrs({\n    value: \"0\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"lowSelected\"));\n  }), \"Low\"), \"\\n                   \", HTML.OPTION(HTML.Attrs({\n    value: \"1\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"mediumSelected\"));\n  }), \"Medium\"), \"\\n                   \", HTML.OPTION(HTML.Attrs({\n    value: \"2\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"highSelected\"));\n  }), \"High\"), \"\\n              \"), \"\\n            \"), \"\\n    \"), \"\\n       \"), \"\\n      \", HTML.DIV({\n    class: \"row\"\n  }, \"\\n          \", HTML.DIV({\n    class: \"col-md-12\"\n  }, \"\\n            \", HTML.DIV({\n    style: \"padding-bottom: 7px;\"\n  }, \"\\n              \", HTML.Raw('<label class=\"CrimeMapLabel\" for=\"myInput\">Crime&nbsp;&nbsp; &nbsp; &nbsp;</label>'), HTML.Raw(\"<br>\"), \"\\n              \", HTML.SELECT({\n    id: \"crimeCategory\",\n    class: \"btn btn-default dropdown-toggle CrimeMapSelect\"\n  }, \"\\n                  \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"getoptions\"));\n  }, function() {\n    return [ \"\\n                    \", HTML.OPTION(HTML.Attrs({\n      value: function() {\n        return Spacebars.mustache(view.lookup(\"crimeCategory\"));\n      }\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"animateselected\"));\n    }), Blaze.View(\"lookup:crimeCategory\", function() {\n      return Spacebars.mustache(view.lookup(\"crimeCategory\"));\n    })), \"\\n                  \" ];\n  }), \"\\n              \"), \"\\n            \"), \"\\n          \"), \"\\n      \"), \"\\n     \", HTML.Raw('<div class=\"row\" style=\"margin-left: -5px; padding-left: 0px; padding-bottom: 5px;\">\\n         <div class=\"col-md-6\">\\n           <label style=\"font-size: 15px margin-left: 10px; padding-bottom: 3px;\" for=\"myInput\">Select Date Range</label><br>\\n           <input style=\"margin-left: 10px; font-size: 15px;\" id=\"daterange\">\\n         </div>\\n    </div>'), \"\\n\\n\\n      \"), \"\\n        \", HTML.Raw('<button style=\"margin-left: 10px\" type=\"submit\" class=\"btn btn-primary reset\">Reset</button>'), \"\\n\\n    \"), \"\\n    \", HTML.DIV({\n    class: \"row\"\n  }, \"\\n    \", HTML.DIV({\n    id: \"tipsTable\"\n  }, \"\\n    \", HTML.TABLE({\n    class: \"table\",\n    style: \"margin-left: 17px;\"\n  }, \"\\n      \", HTML.THEAD(\"\\n        \", HTML.TR(\"\\n          \", HTML.TH(\"\\n            Category\\n          \"), \"\\n          \", HTML.TH(\"\\n            Tips\\n          \"), \"\\n        \"), \"\\n      \"), \"\\n      \", HTML.TBODY(\"\\n      \", Blaze.If(function() {\n    return Spacebars.call(view.templateInstance().subscriptionsReady());\n  }, function() {\n    return [ \"\\n      \", Blaze.Each(function() {\n      return Spacebars.call(view.lookup(\"getTips\"));\n    }, function() {\n      return [ \"\\n            \", Spacebars.include(view.lookupTemplate(\"tipsRow\")), \"\\n          \" ];\n    }), \"\\n      \" ];\n  }), \"\\n\\n      \"), \"\\n    \"), \"\\n  \"), \"\\n\") ];\n}));\n\nTemplate.__checkName(\"tipsRow\");\nTemplate[\"tipsRow\"] = new Template(\"Template.tipsRow\", (function() {\n  var view = this;\n  return HTML.TR(\"\\n    \", HTML.TD(\"\\n      \", Blaze.View(\"lookup:DescriptionCategory\", function() {\n    return Spacebars.mustache(view.lookup(\"DescriptionCategory\"));\n  }), \"\\n    \"), \"\\n    \", HTML.TD(\"\\n      \", Blaze.View(\"lookup:tips\", function() {\n    return Spacebars.mustache(view.lookup(\"tips\"));\n  }), \"\\n    \"), \"\\n  \");\n}));\n\nTemplate.__checkName(\"eventRow\");\nTemplate[\"eventRow\"] = new Template(\"Template.eventRow\", (function() {\n  var view = this;\n  return HTML.TR({\n    class: function() {\n      return Spacebars.mustache(view.lookup(\"getRowClass\"), view.lookup(\"Severity\"));\n    },\n    style: \"cursor:pointer\"\n  }, HTML.Raw(\"\\n        <!-- <td>\\n            {{Case_Number}}\\n        </td>\\n        <td>\\n                             {{Date_Time_Reported}}\\n                        </td>\\n                        <td>\\n                           {{General_Location}}\\n                        </td>\\n                        <td>\\n                           {{Nature_Classification}}\\n                        </td> -->\\n                    \"));\n}));\n\nTemplate.__checkName(\"eventComments\");\nTemplate[\"eventComments\"] = new Template(\"Template.eventComments\", (function() {\n  var view = this;\n  return [ HTML.UL(\"\\n    \", HTML.Raw(\"<b>Event Type:</b>\"), \" \", Blaze.View(\"lookup:Nature_Classification\", function() {\n    return Spacebars.mustache(view.lookup(\"Nature_Classification\"));\n  }), HTML.Raw(\"<br>\"), \"\\n    \", HTML.Raw(\"<b>Occured at: </b>\"), \" \", Blaze.View(\"lookup:Date_Time_Occurred\", function() {\n    return Spacebars.mustache(view.lookup(\"Date_Time_Occurred\"));\n  }), \"\\n    \"), \"\\n    \", HTML.UL(\"\\n        \", HTML.Raw(\"<b>Comments:</b>\"), \"\\n        \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"comment\"));\n  }, function() {\n    return [ \"\\n           \", HTML.LI(Blaze.View(\"lookup:content\", function() {\n      return Spacebars.mustache(view.lookup(\"content\"));\n    })), \"\\n        \" ];\n  }), \"\\n        \", Spacebars.include(view.lookupTemplate(\"commentSubmit\")), \"\\n    \") ];\n}));\n\nTemplate.__checkName(\"commentSubmit\");\nTemplate[\"commentSubmit\"] = new Template(\"Template.commentSubmit\", (function() {\n  var view = this;\n  return HTML.FORM({\n    id: \"comment\",\n    class: \"comment-form\"\n  }, \"\\n    \", HTML.DIV({\n    class: \"control-group\"\n  }, \"\\n        \", HTML.DIV({\n    class: \"controls\"\n  }, \"\\n            \", HTML.Raw('<label for=\"body\">Comment on this event</label>'), \"\\n\\n            \", HTML.TEXTAREA({\n    name: \"commentText\"\n  }), \"\\n             \", HTML.TEXTAREA({\n    name: \"event_id\",\n    style: \"display:none\",\n    value: function() {\n      return Spacebars.mustache(view.lookup(\"event_id\"));\n    }\n  }), \"\\n        \"), \"\\n    \"), HTML.Raw('\\n    <div class=\"control-group\">\\n        <div class=\"controls\">\\n            <button class=\"commentbtn\">Add Comment</button>\\n        </div>\\n    </div>\\n\\n  '));\n}));\n\nTemplate.__checkName(\"toggle_button\");\nTemplate[\"toggle_button\"] = new Template(\"Template.toggle_button\", (function() {\n  var view = this;\n  return [ HTML.Raw('<!--<div id=\"toggle_switch\" class=\"switch-toggle switch-candy\" style=\"width:250px\">\\n    <input id=\"city\" name=\"view\" type=\"radio\" value=\"1\" {{CityChecked}}>\\n    <label for=\"city\" onclick=\"\">City</label>\\n\\n    <input id=\"campus\" name=\"view\" type=\"radio\" value=\"0\" {{CampusChecked}}>\\n    <label for=\"campus\" onclick=\"\">Campus</label>\\n\\n    <a></a>\\n  </div>-->\\n  '), HTML.DIV({\n    id: \"toggle_switch\",\n    class: \"switch switch-blue\"\n  }, \"\\n    \", HTML.INPUT(HTML.Attrs({\n    type: \"radio\",\n    class: \"switch-input\",\n    name: \"view2\",\n    value: \"1\",\n    id: \"city\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"CityChecked\"));\n  })), \"\\n    \", HTML.Raw('<label for=\"city\" class=\"switch-label switch-label-off\">City</label>'), \"\\n    \", HTML.INPUT(HTML.Attrs({\n    type: \"radio\",\n    class: \"switch-input\",\n    name: \"view2\",\n    value: \"0\",\n    id: \"campus\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"CampusChecked\"));\n  })), \"\\n    \", HTML.Raw('<label for=\"campus\" class=\"switch-label switch-label-on\">Campus</label>'), \"\\n    \", HTML.Raw('<span class=\"switch-selection\"></span>'), \"\\n  \") ];\n}));\n\n}).call(this);\n","servePath":"/client/template.CrimeMap.js","sourceMap":null},{"type":"js","data":"(function(){\nTemplate.__checkName(\"SocialMedia\");\nTemplate[\"SocialMedia\"] = new Template(\"Template.SocialMedia\", (function() {\n  var view = this;\n  return [ HTML.DIV({\n    class: \"row\"\n  }, \"\\n      \", HTML.DIV({\n    class: \"col-md-12\"\n  }, \"\\n          \", HTML.DIV({\n    class: \"row\"\n  }, \"\\n            \", HTML.DIV({\n    class: \"col-md-4\"\n  }, \"\\n              \", Spacebars.include(view.lookupTemplate(\"SocialMediaForm\")), \"\\n            \"), \"\\n            \", HTML.DIV({\n    class: \"col-md-4\"\n  }, \"\\n              \", HTML.SVG({\n    id: \"polygon1\"\n  }), \"\\n            \"), \"\\n            \", HTML.Raw('<div class=\"col-md-4\">\\n              <div id=\"label\" class=\"sendercount\">\\n                <p id=\"p1\" class=\"counter text-primary\"></p>\\n              </div>\\n            </div>'), \"\\n          \"), \"\\n    \"), \"\\n  \"), \"\\n  \", HTML.DIV({\n    class: \"row\"\n  }, \"\\n    \", HTML.DIV({\n    class: \"bar text-primary\",\n    style: \"position:absolute; z-index:50; visibility:visible; color:#5DADE2\"\n  }, Blaze.View(\"lookup:getTitleText\", function() {\n    return Spacebars.mustache(view.lookup(\"getTitleText\"));\n  })), \"\\n  \"), \"\\n  \", HTML.DIV({\n    class: \"row\"\n  }, \"\\n    \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"showTheMainTable\"));\n  }, function() {\n    return [ \"\\n      \", Blaze.If(function() {\n      return Spacebars.call(view.templateInstance().subscriptionsReady());\n    }, function() {\n      return [ \"\\n      \", Blaze._TemplateWith(function() {\n        return {\n          class: Spacebars.call(\"table table-hover table-striped SocialMediaMainTable\"),\n          collection: Spacebars.call(view.lookup(\"getMediaData\")),\n          settings: Spacebars.call(view.lookup(\"settings\"))\n        };\n      }, function() {\n        return Spacebars.include(view.lookupTemplate(\"reactiveTable\"));\n      }), \"\\n      \" ];\n    }), \"\\n    \" ];\n  }), \"\\n  \") ];\n}));\n\nTemplate.__checkName(\"SocialMediaForm\");\nTemplate[\"SocialMediaForm\"] = new Template(\"Template.SocialMediaForm\", (function() {\n  var view = this;\n  return HTML.DIV(\"\\n  \", HTML.DIV({\n    class: \"dropdown form-group\"\n  }, \"\\n    \", HTML.Raw('<label style=\"padding-bottom: 3px\" for=\"sel1\">Set Filter for Police Department</label>'), \"\\n    \", HTML.SELECT({\n    class: \"form-control\",\n    id: \"MediaSelect\"\n  }, \"\\n      \", HTML.Raw('<option value=\"Choose a value\">All</option>'), \"\\n      \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"getPDLoptions\"));\n  }, function() {\n    return [ \"\\n        \", HTML.OPTION({\n      value: function() {\n        return Spacebars.mustache(view.lookup(\"PDLocation\"));\n      }\n    }, Blaze.View(\"lookup:PDLocation\", function() {\n      return Spacebars.mustache(view.lookup(\"PDLocation\"));\n    })), \"\\n      \" ];\n  }), \"\\n    \"), \"\\n    \", HTML.Raw(\"<br>\"), \"\\n  \", HTML.Raw('<button type=\"button\" id=\"ResetButton\" class=\"btn btn-primary\">Reset</button>'), \"\\n  \", HTML.Raw(\"<br>\"), HTML.Raw(\"<br>\"), \"\\n  \", HTML.TABLE({\n    id: \"stat\",\n    class: \"table stat table-striped\"\n  }, \"\\n  \", HTML.THEAD(\"\\n  \", HTML.TR(\"\\n      \", HTML.TH(\"UserRole\"), \"\\n      \", HTML.TH(\"Number\"), \"\\n      \", HTML.TH(\"Percent\"), \"\\n    \"), \"\\n  \"), \"\\n    \", HTML.TBODY(\"\\n      \", Blaze.If(function() {\n    return Spacebars.call(view.templateInstance().subscriptionsReady());\n  }, function() {\n    return [ \"\\n        \", Blaze.Each(function() {\n      return Spacebars.call(view.lookup(\"getStateData\"));\n    }, function() {\n      return [ \"\\n          \", Spacebars.include(view.lookupTemplate(\"StateDataRows\")), \"\\n        \" ];\n    }), \"\\n      \" ];\n  }), \"\\n    \"), \"\\n  \"), \"\\n  \"), \"\\n\");\n}));\n\nTemplate.__checkName(\"SocialMediaMainTable\");\nTemplate[\"SocialMediaMainTable\"] = new Template(\"Template.SocialMediaMainTable\", (function() {\n  var view = this;\n  return HTML.DIV({\n    id: \"SocialMediaMainTable\"\n  }, \"\\n    \", HTML.TABLE({\n    class: \"table table-hover table-striped SocialMediaMainTable\"\n  }, \"\\n      \", HTML.THEAD(\"\\n        \", HTML.TR(\"\\n          \", HTML.TH(\"PoliceDepartment\"), \"\\n          \", HTML.TH(\"UserID\"), \"\\n          \", HTML.TH(\"UserName\"), \"\\n          \", HTML.TH(\"PDLocation\"), \"\\n          \", HTML.TH(\"UserLocation\"), \"\\n          \", HTML.TH(\"UserRole\"), \"\\n        \"), \"\\n      \"), \"\\n      \", HTML.TBODY(\"\\n        \", Blaze.If(function() {\n    return Spacebars.call(view.templateInstance().subscriptionsReady());\n  }, function() {\n    return [ \"\\n  \\t\\t\\t\", Blaze.Each(function() {\n      return Spacebars.call(view.lookup(\"getMediaData\"));\n    }, function() {\n      return [ \"\\n  \\t\\t\\t\\t\\t\\t\", Spacebars.include(view.lookupTemplate(\"MediaDataRows\")), \"\\n  \\t\\t\\t\\t\\t\" ];\n    }), \"\\n        \" ];\n  }), \"\\n    \"), \"\\n    \"), \"\\n  \");\n}));\n\nTemplate.__checkName(\"MediaDataRows\");\nTemplate[\"MediaDataRows\"] = new Template(\"Template.MediaDataRows\", (function() {\n  var view = this;\n  return HTML.TR(\"\\n    \", HTML.TD(Blaze.View(\"lookup:PoliceDepartment\", function() {\n    return Spacebars.mustache(view.lookup(\"PoliceDepartment\"));\n  })), \"\\n    \", HTML.TD(Blaze.View(\"lookup:UserID\", function() {\n    return Spacebars.mustache(view.lookup(\"UserID\"));\n  })), \"\\n    \", HTML.TD(Blaze.View(\"lookup:UserName\", function() {\n    return Spacebars.mustache(view.lookup(\"UserName\"));\n  })), \"\\n    \", HTML.TD(Blaze.View(\"lookup:PDLocation\", function() {\n    return Spacebars.mustache(view.lookup(\"PDLocation\"));\n  })), \"\\n    \", HTML.TD(Blaze.View(\"lookup:UserLocation\", function() {\n    return Spacebars.mustache(view.lookup(\"UserLocation\"));\n  })), \"\\n    \", HTML.TD(Blaze.View(\"lookup:UserRole\", function() {\n    return Spacebars.mustache(view.lookup(\"UserRole\"));\n  })), \"\\n  \");\n}));\n\nTemplate.__checkName(\"StateDataRows\");\nTemplate[\"StateDataRows\"] = new Template(\"Template.StateDataRows\", (function() {\n  var view = this;\n  return HTML.TR(\"\\n    \", HTML.TD(Blaze.View(\"lookup:UserRole\", function() {\n    return Spacebars.mustache(view.lookup(\"UserRole\"));\n  })), \"\\n    \", HTML.TD(Blaze.View(\"lookup:Number\", function() {\n    return Spacebars.mustache(view.lookup(\"Number\"));\n  })), \"\\n    \", HTML.TD(Blaze.View(\"lookup:Percent\", function() {\n    return Spacebars.mustache(view.lookup(\"Percent\"));\n  })), \"\\n  \");\n}));\n\n}).call(this);\n","servePath":"/client/template.SocialMedia.js","sourceMap":null},{"type":"js","data":"(function(){\nTemplate.__checkName(\"layout\");\nTemplate[\"layout\"] = new Template(\"Template.layout\", (function() {\n  var view = this;\n  return [ HTML.NAV({\n    class: \"navbar navbar-default\",\n    role: \"navigation\"\n  }, \"\\n    \", HTML.Raw('<!--<div class=\"navbar-header\">\\n      <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navigation\">\\n        <span class=\"sr-only\">Toggle navigation</span>\\n        <span class=\"icon-bar\"></span>\\n        <span class=\"icon-bar\"></span>\\n        <span class=\"icon-bar\"></span>\\n      </button>\\n      <a class=\"navbar-brand\" href=\"#\"></a>\\n    </div>-->'), \"\\n    \", HTML.DIV({\n    class: \"collapse navbar-collapse\",\n    id: \"navigation\"\n  }, \"\\n      \", HTML.UL({\n    class: \"nav navbar-nav navbar-left\"\n  }, \"\\n            \", HTML.LI(HTML.A({\n    href: function() {\n      return Spacebars.mustache(view.lookup(\"pathFor\"), \"CrimeMap\");\n    },\n    onmouseover: \"this.style.color='blue';\",\n    onmouseout: \"this.style.color='grey'; \",\n    isactive: \"this.style.color='grey'; \"\n  }, \"Crime Map\")), \"\\n            \", HTML.LI(HTML.A({\n    href: function() {\n      return Spacebars.mustache(view.lookup(\"pathFor\"), \"SocialMedia\");\n    },\n    onmouseover: \"this.style.color='blue';\",\n    onmouseout: \"this.style.color='grey';\"\n  }, \"Social Media\")), \"\\n      \"), \"\\n      \", HTML.Raw('<ul class=\"nav navbar-nav navbar-right\">\\n       <!-- <li>{{> loginButtons}}</li>\\n        <li style=\"visibility:hidden\">emptyemptyempty</li>-->\\n      </ul>'), \"\\n    \"), \"\\n  \"), \"\\n\\n  \", HTML.DIV({\n    class: \"container-fluid\"\n  }, \"\\n    \", Spacebars.include(view.lookupTemplate(\"yield\")), \"\\n  \") ];\n}));\n\n}).call(this);\n","servePath":"/client/template.layout.js","sourceMap":null},{"type":"js","data":"(function(){Comments = new Mongo.Collection(\"eventcomments\");\n\n}).call(this);\n","servePath":"/lib/collections/Comments.js","sourceMap":null},{"type":"js","data":"(function(){EventToComment = new Mongo.Collection(\"eventtocomment\");\n\n}).call(this);\n","servePath":"/lib/collections/EventToComment.js","sourceMap":null},{"type":"js","data":"(function(){Markers = new Mongo.Collection('markers');\n\n\n/*Markers.allow({\n  insert: function(userId,doc){\n    return !! userId;\n  }\n});*/\n\n}).call(this);\n","servePath":"/lib/collections/Markers.js","sourceMap":null},{"type":"js","data":"(function(){SafetyEvents = new Mongo.Collection('safetyevents');\n\n}).call(this);\n","servePath":"/lib/collections/SafetyEvents.js","sourceMap":null},{"type":"js","data":"(function(){SafetyTips = new Mongo.Collection('safetytips');\n\n}).call(this);\n","servePath":"/lib/collections/SafetyTips.js","sourceMap":null},{"type":"js","data":"(function(){Aonly = new Mongo.Collection(\"Aonly\");\nPonly = new Mongo.Collection(\"Ponly\");\nConly = new Mongo.Collection(\"Conly\");\nAp = new Mongo.Collection(\"AP\");\nAc = new Mongo.Collection(\"AC\");\nPc = new Mongo.Collection(\"PC\");\nApc = new Mongo.Collection(\"APC\");\n\n}).call(this);\n","servePath":"/lib/collections/SocialMediaCollections.js","sourceMap":null},{"type":"js","data":"(function(){Router.configure({\n  layoutTemplate: 'layout'\n});\n\nRouter.route('/', {name: 'CrimeMap'});\nRouter.route('/SocialMedia',{\n  name: 'SocialMedia',\n  waitOn(){\n    return Meteor.subscribe(\"Aonly\");\n  }\n});\n\n}).call(this);\n","servePath":"/lib/router.js","sourceMap":null},{"type":"js","data":"(function(){Accounts.ui.config({\n  passwordSignupFields: 'USERNAME_ONLY'\n});\n\n}).call(this);\n","servePath":"/client/helpers/config.js","sourceMap":null},{"type":"js","data":"(function(){if (Meteor.isClient) {\n    //The universities information for select\n    PlaceInfo = [\n      {\"_id\": 0, \"placeIndex\": 0,\"placeCategory\": 'Syracuse University'},\n      {\"_id\": 1, \"placeIndex\": 1,\"placeCategory\": 'Emory University'},\n      {\"_id\": 2, \"placeIndex\": 2,\"placeCategory\": 'Rice University'},\n      {\"_id\": 3, \"placeIndex\": 3,\"placeCategory\": 'Georgia Institute of Technology'},\n      {\"_id\": 4, \"placeIndex\": 4,\"placeCategory\": 'University at Buffalo'},\n      {\"_id\": 5, \"placeIndex\": 5,\"placeCategory\": 'Hunter College'}\n    ];\n\n    if(Session.get(\"isCity\") == 1){\n    \tPlaceInfo = [\n      {\"_id\": 0, \"placeIndex\": 0,\"placeCategory\": 'Syracuse University'},\n      {\"_id\": 1, \"placeIndex\": 1,\"placeCategory\": 'Emory University'},\n      {\"_id\": 2, \"placeIndex\": 2,\"placeCategory\": 'Rice University'},\n      {\"_id\": 4, \"placeIndex\": 4,\"placeCategory\": 'University at Buffalo'},\n      {\"_id\": 5, \"placeIndex\": 5,\"placeCategory\": 'Hunter College'}\n    ];\n\n    }\n    $.each(PlaceInfo,function(i,item){\n      switch(i){\n        case 0:\n          item[\"placeCategory\"] = (Session.get(\"isCity\") == 1)?'Syracuse':'Syracuse University';\n          break;\n        case 1:\n          item[\"placeCategory\"] = (Session.get(\"isCity\") == 1)?'Atlanta':'Emory University';\n          break;\n        case 2:\n          item[\"placeCategory\"] = (Session.get(\"isCity\") == 1)?'Houston':'Rice University';\n          break;\n        // case 3:\n        //   item[\"placeCategory\"] = (Session.get(\"isCity\") == 1)?'':'Georgia Institute of Technology';\n        //   break;\n        case 4:\n          item[\"placeCategory\"] = (Session.get(\"isCity\") == 1)?'Buffalo':'University at Buffalo';\n          break;\n        case 5:\n          item[\"placeCategory\"] = (Session.get(\"isCity\") == 1)?'New York':'Hunter College';\n          break;\n\n      }\n    });\n    PlaceInfoDep = new Tracker.Dependency;\n    getPlaceInfo = function () {\n      PlaceInfoDep.depend();\n      return PlaceInfo;\n    };\n    setPlaceInfo = function (flag) {\n        $.each(PlaceInfo,function(i,item){\n          switch(i){\n            case 0:\n              item[\"placeCategory\"] = (flag == 1)?'Syracuse':'Syracuse University';\n              break;\n            case 1:\n              item[\"placeCategory\"] = (flag == 1)?'Atlanta':'Emory University';\n              break;\n            case 2:\n              item[\"placeCategory\"] = (flag == 1)?'Houston':'Rice University';\n              break;\n            case 3:\n              item[\"placeCategory\"] = (flag == 1)?'Atlanta':'Georgia Institute of Technology';\n              break;\n            case 4:\n              item[\"placeCategory\"] = (flag == 1)?'Buffalo':'University at Buffalo';\n              break;\n            case 5:\n              item[\"placeCategory\"] = (flag == 1)?'New York':'Hunter College';\n              break;\n          }\n\n        // console.log(item[\"placeCategory\"])\n        });\n        PlaceInfoDep.changed();\n    };\n    /*Kan*/\n    CrimeOptions = [];\n    CrimeOptionsDep = new Tracker.Dependency();\n    getDataforCrimeOptions = function(){\n      CrimeOptionsDep.depend();\n      return CrimeOptions;\n    };\n    setDataforCrimeOptions = function(tips){\n      CrimeOptions = [];\n      var any = new Object();\n      any.crimeCategory=\"Any\";\n      CrimeOptions.push(any);\n      for(var i in tips){\n        var option = new Object();\n        option.crimeCategory = tips[i].DescriptionCategory;\n        CrimeOptions.push(option);\n      }\n      CrimeOptionsDep.changed();\n    };\n\n\n\n    /*Kan*/\n    Meteor.subscribe('markers', {\n        onReady: function(){\n          console.log(Markers);\n        }\n    });\n    Meteor.subscribe('eventcomments', {\n        onReady: function(){\n        }\n    });\n     Meteor.subscribe('eventtocomment', {\n        onReady: function(){\n        }\n    });\n    Meteor.subscribe('safetytips',{\n        onReady:function(){\n          triggeredTips = []\n          triggeredTipsDep = new Tracker.Dependency();\n        }\n    });\n    Meteor.subscribe('safetyevents', {\n        onReady: function() {\n            //console.log(\"demo.js\");\n            //console.log(map._layers);\n            var data_array = [0, 0, 0];\n            Session.set('fromDate', \"'\"+moment().subtract(6, \"months\").format(\"L\")+\"'\");\n            Session.set('toDate', \"'\"+moment().format(\"L\")+\"'\");\n            console.log(\"ready\");\n            triggeredEvents= [];\n            triggeredEventsDep = new Tracker.Dependency();\n            /*SafetyEvents.find({\n                    \"Date_Time_Reported\": {\n                        $gte: new Date(Session.get('fromDate')),\n                        $lte: new Date(Session.get('toDate'))\n                    }\n                }).forEach(function(obj) {//assuming that safetyevents takes longer to load than markers. When the number of users becomes larger than number of events, this will have to be changed. Currently meteor has no way to trigger event when all data subsciptions are loaded\n            var results = Markers.find({\"userid\": Meteor.userId()});\n            results.forEach(function(doc) {\n            if (doc.layerType =='circle'){\n                if (getDistanceFromLatLonInKm(obj.Lat,obj.Lon,doc.latlng.lat,doc.latlng.lng) < doc.radius/1000) //check if the point is within each of the markers\n                    triggeredEvents.push(obj);\n            }\n            else\n            {\n                if(isInPolygon(obj.Lat,obj.Lon,doc.latlngs))\n                     triggeredEvents.push(obj);\n            }\n          })\n        })*/\n        dataLoading = false; //to prevent tracker.autorun being called when data is loading to client collection\n        }\n    });\n\n  /*  Handlebars.registerHelper('getRowClass', function(Severity) {\n    switch (Severity) {\n        case 0 : {\n            return 'active';\n        }\n        break;\n        case 1 : {\n            return 'warning';\n        }\n        break;\n        default : {\n            return 'danger';\n        }\n    }});*/\n\n\n $(function() {\n      $(document).ready(function() {\n          $('#map').css({\n              height: $(window).height() * .65 + 'px'\n        });\n      });\n        $(window).resize(function() {\n            $('#map').css({\n                height: $(window).height() * .65 + 'px'\n            });\n\n        });\n        \n      \tSession.setPersistent('university', 0);\n        Session.setPersistent('severity', 10);\n        Session.setPersistent('crimeCategory',\"Any\");\n      \t\n    });\n\n}\n\nTemplate.eventtable.onCreated(function(){\n  this.subscribe(\"safetyevents\");\n  this.subscribe(\"markers\");\n});\n\nTemplate.eventtable.helpers({\n    getData: function() {\n       triggeredEventsDep.depend();\n       return triggeredEvents;\n    },\n    getRowClass: function(item){\n      return function (item) {\n          var Severity = item.Severity;\n          switch (Severity) {\n              case 0 : {\n                  return 'active';\n              }\n              break;\n              case 1 : {\n                  return 'warning';\n              }\n              break;\n              default : {\n                  return 'danger';\n              }\n            }\n      };\n  },\n    settings: function(){\n      return {\n        showFilter:false,\n        showNavigation:'auto',\n        fields:[\n          {key:'Date_Time_Reported',label:'Date'},\n          {key:'General_Location', label:'Location'},\n          {key:'Nature_Classification', label:'Description'}]\n      };\n    }\n});\n\nTemplate.eventtable.events({\n  'click .reactive-table tbody tr':function(e){\n    if (typeof eventMarker == 'undefined') {\n            eventMarker=[];\n        }\n    for(i=0;i<eventMarker.length;i++)\n            map.removeLayer(eventMarker[i]);\n    eventMarker[0] =  L.marker([this.Lat, this.Lon], {icon: highIcon})\n                      .addTo(map)\n                      .bindPopup(\"<b>Type:</b> \"+this.Nature_Classification+\"<br>\"+\"<b>Location:</b>\"+this.General_Location+\"<br>\")\n                      .openPopup();\n\n    var keyword = this.Nature_Classification.split(\" \");\n    if(keyword[0].indexOf(',') > 0){\n        keyword = this.Nature_Classification.split(\",\");\n    }\n    var tableRows = $(\"#tipsTable\").find(\"td\").filter(function(){\n      return $(this).text().trim().indexOf(keyword[0].trim())== -1;\n    }).closest(\"tr\");\n    tableRows.css({\"font-weight\": \"normal\"});\n    var tableRow = $(\"#tipsTable\").find(\"td\").filter(function(){\n      return $(this).text().trim().indexOf(keyword[0].trim())!= -1;\n    }).closest(\"tr\");\n    var baseRow = $(\"#tipsTable\").find(\"th\").filter(function(){\n      return $(this).text().trim() == \"Category\";\n    }).closest(\"tr\");\n    console.log(tableRow);\n    tableRow.css({\"font-weight\": \"bold\"});\n    var rowpos = tableRow.position().top-baseRow.position().top;\n\n    console.log(rowpos);\n    $(\"#tipsTable\").animate({scrollTop:rowpos},1000);\n\n  }\n\n});\n/*\nTemplate.eventRow.events({\n  'click': function(e) {\n    if (typeof eventMarker == 'undefined') {\n            eventMarker=[];\n        }\n    for(i=0;i<eventMarker.length;i++)\n            map.removeLayer(eventMarker[i]);\n    eventMarker[0] =  L.marker([this.Lat, this.Lon], {icon: highIcon})\n                      .addTo(map)\n                      .bindPopup(\"<b>Type:</b> \"+this.Nature_Classification+\"<br>\"+\"<b>Location:</b>\"+this.General_Location+\"<br>\")\n                      .openPopup();\n\n    var keyword = this.Nature_Classification.split(\" \");\n    if(keyword[0].indexOf(',') > 0){\n        keyword = this.Nature_Classification.split(\",\");\n    }\n    var tableRows = $(\"#tipsTable\").find(\"td\").filter(function(){\n      return $(this).text().trim().indexOf(keyword[0].trim())== -1;\n    }).closest(\"tr\");\n    tableRows.css({\"font-weight\": \"normal\"});\n    var tableRow = $(\"#tipsTable\").find(\"td\").filter(function(){\n      return $(this).text().trim().indexOf(keyword[0].trim())!= -1;\n    }).closest(\"tr\");\n    var baseRow = $(\"#tipsTable\").find(\"th\").filter(function(){\n      return $(this).text().trim() == \"Category\";\n    }).closest(\"tr\");\n    console.log(tableRow);\n    tableRow.css({\"font-weight\": \"bold\"});\n    var rowpos = tableRow.position().top-baseRow.position().top;\n\n    console.log(rowpos);\n    $(\"#tipsTable\").animate({scrollTop:rowpos},1000);\n  }\n});*/\n\nTemplate.toggle_button.events({\n  'click #toggle_switch input': function(e){\n    var newValue = $(e.target).val();\n    console.log(newValue);\n    var oldValue = Session.get(\"isCity\");\n    if(newValue != oldValue){\n      Session.setPersistent('isCity', newValue);\n      setPlaceInfo(newValue);\n    }\n  }\n});\n\nTemplate.toggle_button.helpers({\n  CityChecked: function() {\n    return (Session.get('isCity') == 1) ? 'checked' : '';\n  },\n  CampusChecked: function() {\n    return (Session.get('isCity') == 0) ? 'checked' : '';\n  },\n});\n\nTemplate.form.onCreated(function(){\n  this.subscribe(\"safetyevents\");\n  this.subscribe(\"markers\");\n});\n\n\nTemplate.form.events({ //filter map data on form submit\n    \"change #university\": function(evt) {\n      var newValue = $(evt.target).val();\n      // console.log(newValue);\n      var oldValue = Session.get(\"university\");\n      if (newValue != oldValue) {\n        // value changed\n       Session.setPersistent('university', newValue);\n       //location.reload();\n      }\n    },\n     /*\"change #isCity\": function(evt) {\n      var newValue = $(evt.target).val();\n      var oldValue = Session.get(\"isCity\");\n      if (newValue != oldValue) {\n        // value changed\n       Session.setPersistent('isCity', newValue);\n       //location.reload();\n       //console.log(newValue);\n       setPlaceInfo(newValue);\n      }\n    },*/\n    \"change #severity\": function(evt) {\n         var newValue = $(evt.target).val();\n         var oldValue = Session.get(\"severity\");\n         if (newValue != oldValue) {\n             // value changed, let's do something\n             //Session.setPersistent('severity', newValue);\n\n             Session.setPersistent('severity', newValue);\n             //location.reload();\n         }\n     },\n     \"change #crimeCategory\": function(evt) {\n       var newValue = $(evt.target).val();\n       var oldValue = Session.get(\"crimeCategory\");\n       if(newValue != oldValue) {\n         Session.setPersistent('crimeCategory',newValue);\n         //location.reload();\n       }\n     },\n    'click .reset': function (e) {\n            Markers.find().forEach(function(doc){\n            Markers.remove({_id:doc._id });\n\n        });\n\n      \tSession.setPersistent('university', 0);\n        Session.setPersistent('severity', 10);\n        Session.setPersistent('crimeCategory',\"Any\");\n      \t\n        //location.reload();\n}\n\n});\n\n Template.form.rendered=function(){\n    markerClusters = L.markerClusterGroup();\n    $(\"#daterange\").ionRangeSlider({\n    type: \"double\",\n    min: +moment().subtract(3, \"years\").format(\"X\"),\n    max: +moment().format(\"X\"),\n    from: +moment().subtract(6, \"months\").format(\"X\"),\n    to:+moment().format(\"X\"),\n    onFinish: function (data) {//fired when the date range slider is moved to a new position\n    var fromDate=\"'\"+moment.unix(data.from).format(\"MM/DD/YYYY\")+\"'\";\n     var toDate=\"'\"+moment.unix(data.to).format(\"MM/DD/YYYY\")+\"'\";\n     Session.set('fromDate', fromDate);\n     Session.set('toDate', toDate);\n     //console.log(Session.get(\"isCity\"));\n     var severity=Session.get('severity');\n     var crimeCategory=Session.get('crimeCategory');\n     if(crimeCategory != \"Any\"){\n            if (severity== 10){\n              var results = SafetyEvents.find({\n                  \"Date_Time_Reported\": {\n                      $gte: new Date(fromDate),\n                      $lte: new Date(toDate)\n                    },\n                    \"Is_City\":+(Session.get('isCity')),\n                    \"Nature_Classification\": {\n                      $regex: crimeCategory\n                    }\n                  });\n                }\n              else{\n                  var results = SafetyEvents.find({\n                    \"Date_Time_Reported\": {\n                      $gte: new Date(fromDate),\n                      $lte: new Date(toDate)\n                    },\n                    \"Is_City\":+(Session.get('isCity')),\n                    \"Severity\": +severity,\n                    \"Nature_Classification\": {\n                      $regex: crimeCategory\n                    }\n                  });\n                }\n      }else{\n        if (severity== 10){\n          var results = SafetyEvents.find({\n              \"Date_Time_Reported\": {\n                  $gte: new Date(fromDate),\n                  $lte: new Date(toDate)\n                },\n                \"Is_City\":+(Session.get('isCity'))\n              });\n            }\n          else{\n              var results = SafetyEvents.find({\n                \"Date_Time_Reported\": {\n                  $gte: new Date(fromDate),\n                  $lte: new Date(toDate)\n                },\n                \"Is_City\":+(Session.get('isCity')),\n                \"Severity\": +severity\n              });\n            }\n      }\n        if (typeof eventMarker == 'undefined') {\n            eventMarker=[];\n            triggeredEvents=[];\n        }\n\n\n        /*for(i=0;i<eventMarker.length;i++){\n            map.removeLayer(eventMarker[i]);\n        }*/\n        if(map.hasLayer(markerClusters)){\n          map.removeLayer(markerClusters);\n        }\n        triggeredEvents=[];\n        triggeredTips=[];\n        var tipsset = [];\n        i=0;\n        results.forEach(function(obj) { //add markers to map for each result\n            //break if events not within marker area\n            var withinSubscription=0;\n            var eventmarkers = Markers.find();\n            //console.log(obj.Nature_Classification);\n            eventmarkers.forEach(function(doc) {\n            if (doc.layerType =='circle'){\n                if (getDistanceFromLatLonInKm(obj.Lat,obj.Lon,doc.latlng.lat,doc.latlng.lng) < doc.radius/1000) //check if the point is within each of the markers\n                   withinSubscription=1;\n            }\n            else\n            {\n                if(isInPolygon(obj.Lat,obj.Lon,doc.latlngs))\n                    withinSubscription =1;\n            }\n            })\n            if(withinSubscription==1)\n            {\n                triggeredEvents.push(obj);\n                var tipsCategory = obj.Nature_Classification.split(\" \");\n                if(tipsCategory[0].indexOf(',') > 0){\n                  tipsCategory = obj.Nature_Classification.split(\",\");\n                }\n                var tips = SafetyTips.find({\n                  \"DescriptionCategory\": {\n                    $regex: tipsCategory[0]\n                  }\n                });\n                tips.forEach(function(tipItem){\n                  if($.inArray(tipItem.DescriptionCategory,tipsset) == -1){\n                    triggeredTips.push(tipItem);\n                    tipsset.push(tipItem.DescriptionCategory);\n                  }\n                  /*console.log($.inArray(tipItem,triggeredTips));\n                  if($.inArray(tipItem,triggeredTips) == -1){\n                    triggeredTips.push(tipItem);\n                  }\n                  console.log(triggeredTips);*/\n                })\n                if(obj.Severity==2)\n                        eventMarker[i] =  L.marker([obj.Lat, obj.Lon], {icon: highIcon,riseOnHover:true,opacity:0.8});\n                else if(obj.Severity==1)\n                        eventMarker[i] =  L.marker([obj.Lat, obj.Lon], {icon: mediumIcon,riseOnHover:true,opacity:0.8});\n                else if(obj.Severity==0)\n                        eventMarker[i] =  L.marker([obj.Lat, obj.Lon], {icon: lowIcon,riseOnHover:true,opacity:0.8});\n\n                eventMarker[i].eventId = obj.ReportID;//pass the event id\n                markerClusters.addLayer(eventMarker[i]);\n                map.addLayer(markerClusters);\n                //map.addLayer(eventMarker[i]);\n\n                markerClusters.on('clustermouseover', function (a) {\n                                // a.layer is actually a cluster\n                               // console.log('cluster ' + a.layer.getAllChildMarkers());\n                              //  markers = a.layer.getAllChildMarkers();\n                              //  console.log(markers.length);\n                                  var popup = L.popup()\n                                      .setLatLng(a.layer.getLatLng())\n                                      .setContent(a.layer._childCount +' Locations(click to Zoom)')\n                                      .openOn(map);\n\n\n                            });\n\n\n\n\n\n                    i++;\n                }\n        })\n        triggeredEventsDep.changed();\n        triggeredTipsDep.changed();\n    },\n    prettify: function (num) {\n          return moment(num, \"X\").format(\"MMM Do YYYY\");\n    }\n\n});\n\n};\n\nTemplate.form.helpers({\n   citySelected: function () {\n     return (Session.get('isCity') == 1) ? 'selected' : '';\n   },\n   campusSelected: function () {\n     return (Session.get('isCity') == 0) ? 'selected' : '';\n   },\n   anySelected: function () {\n     return (Session.get('severity') == 10) ? 'selected' : '';\n   },\n   lowSelected: function () {\n     return (Session.get('severity') == 0) ? 'selected' : '';\n   },\n   mediumSelected: function () {\n     return (Session.get('severity') == 1) ? 'selected' : '';\n   },\n   highSelected: function () {\n     return (Session.get('severity') == 2) ? 'selected' : '';\n   },\n   getTips: function () {\n     //return SafetyTips.find();\n     triggeredTipsDep.depend();\n     return triggeredTips;\n   },\n   getoptions: function () {\n     var options = [];\n     var tips = SafetyTips.find().fetch();\n     var anyoption = new Array();\n     anyoption[\"crimeCategory\"] = \"Any\";\n     options.push(anyoption);\n     for(var i in tips){\n       var option = new Array();\n       option[\"crimeCategory\"] = tips[i].DescriptionCategory;\n       options.push(option);\n     }\n     return options;\n   },\n   animateselected:function (){\n     return (Session.get('crimeCategory') == this.crimeCategory)? 'selected' : '';\n   },\n   getPlaces: function () {\n     return getPlaceInfo();\n   },\n   placeSelected: function () {\n     return (Session.get('university') == this.placeIndex)? 'selected' : '';\n   },\n\n\n});\n\nTemplate.map.rendered = function() {\n    $('.datetimepicker').each(function() {\n        $(this).datetimepicker();\n    });\n    var universityMessage = Session.get('university');\n     //Session.set('severity',10);\n    L.Icon.Default.imagePath = '/public';\n    var LeafIcon = L.Icon.extend({\n        options: {\n         //   shadowUrl: 'marker_shadow.png',\n            iconSize:     [15, 15],\n            shadowSize:   [50, 64],\n            iconAnchor:   [10, 10],\n            shadowAnchor: [4, 62],\n            popupAnchor:  [0, 0]\n        }\n    });\n    highIcon = new LeafIcon({iconUrl: 'high.png'});\n    mediumIcon = new LeafIcon({iconUrl: 'medium.png'});\n    lowIcon = new LeafIcon({iconUrl: 'low.png'});\n     if(universityMessage==0)\n    {\n            map = L.map('map', {\n                doubleClickZoom: false\n            }).setView([43.0391534, -76.1351158], 14);\n    }\n    else if(universityMessage==1)\n    {\n         console.log(\"hello\");\n         map = L.map('map', {\n                doubleClickZoom: false\n            }).setView([33.7925195,-84.3239989], 14);\n\n    }\n    else if(universityMessage==2)\n    {\n         map = L.map('map', {\n                doubleClickZoom: false\n            }).setView([29.7173941,-95.4018312], 14);\n\n    }\n     else if(universityMessage==3)\n    {\n            map = L.map('map', {\n                doubleClickZoom: false\n            }).setView([33.7756178,-84.396285], 14);\n    }\n     else if(universityMessage==4)\n    {\n            map = L.map('map', {\n                doubleClickZoom: false\n            }).setView([43.0008093,-78.7889697], 14);\n    }\n      else if(universityMessage==5)\n    {\n            map = L.map('map', {\n                doubleClickZoom: false\n            }).setView([40.7686793,-73.9647192], 14);\n    }\n\n    var tiles = L.tileLayer.provider('OpenStreetMap.Mapnik').addTo(map);\n\n    var drawnItems = L.featureGroup().addTo(map);\n\n    map.addControl(new L.Control.Draw({\n        draw: {\n            polyline: false,\n            polygon: true,\n            rectangle: false,\n            marker:false\n        },\n        edit: {\n            featureGroup: drawnItems,\n            edit: false,\n            remove: false\n        }\n    }));\n\n    map.on('draw:created', function(event) {\n        var layer = event.layer;\n        //console.log(event.layer);\n        //console.log(event.layerType);\n        var feature = {\n            //userid: Meteor.userId(),\n            options: event.layer.options,\n            layerType: event.layerType\n        };\n        switch (event.layerType) {\n            case 'marker':\n                feature.latlng = event.layer._latlng;\n                break;\n            case 'circle':\n                feature.latlng = event.layer._latlng;\n                feature.radius = event.layer._mRadius;\n                break;\n            case 'polygon':\n                feature.latlngs = event.layer._latlngs;\n                break;\n        }\n        //console.log(feature);\n        //map.addLayer(layer);\n        //console.log(Meteor.userId());\n        //console.log(hello());\n        containerNode = document.createElement('div');\n      //  Blaze.render(Template.circlesavemenu, containerNode); //pass the data into the eventComments template\n      //  layer.bindPopup(containerNode).openPopup();\n        Session.set(\"circle_latlng\",layer._latlng);\n        Session.set(\"circle_radius\",layer._radius);\n        Markers.insert(feature);\n    });\n\n    map.on('draw:deleted', function(event) {\n        //console.log(event);\n        //console.log(event.layers._layers);\n        for (var l in event.layers._layers) {\n            //console.log(l);\n            Markers.remove({\n                _id: l\n            });\n        }\n    });\n\n    var query = Markers.find({});\n    query.observe({\n        added: function(doc) {\n            //console.log(doc);\n            switch (doc.layerType) {\n                case 'marker':\n                    var marker = L.marker(doc.latlng);\n                    marker._leaflet_id = doc._id;\n                    marker.addTo(drawnItems);\n                    break;\n                case 'circle':\n                    var circle = L.circle(doc.latlng, doc.radius);\n                    circle._leaflet_id = doc._id;\n                    circle.addTo(drawnItems);\n                    break;\n                case 'polygon':\n                    var polygon = L.polygon(doc.latlngs);\n                    polygon._leaflet_id = doc._id;\n                    polygon.addTo(drawnItems);\n                    break;\n            }\n        },\n        removed: function(oldDocument) {\n            layers = map._layers;\n            var key, val;\n            for (key in layers) {\n                val = layers[key];\n                if (val._latlng) {\n                    if (val._latlng.lat === oldDocument.latlng.lat && val._latlng.lng === oldDocument.latlng.lng) {\n                        map.removeLayer(val);\n                    }\n                }\n            }\n        }\n    });\n\n    Deps.autorun(function(){\n      universityMessage = Session.get('university');\n      if(universityMessage == 0){\n        map.panTo(new L.LatLng(43.0391534,-76.1351158));\n      }\n      else if(universityMessage == 1){\n        map.panTo(new L.LatLng(33.7925195,-84.3239989));\n      }\n      else if(universityMessage == 2){\n        map.panTo(new L.LatLng(29.7173941,-95.4018312));\n      }\n      else if(universityMessage == 3){\n        map.panTo(new L.LatLng(33.7756178,-84.396285));\n      }\n      else if(universityMessage == 4){\n        map.panTo(new L.LatLng(43.0008093,-78.7889697));\n      }\n      else if(universityMessage == 5){\n        map.panTo(new L.LatLng(40.7686793,-73.9647192));\n      }\n    });\n};\n\nTracker.autorun(function(){\n  var test = Session.get(\"circle_latlng\");\n  var radius = Session.get(\"circle_radius\");\n  //console.log(test);\n});\n\n\n\nfunction getDistanceFromLatLonInKm(lat1,lon1,lat2,lon2) {\n      var R = 6371; // Radius of the earth in km\n      var dLat = (lat2-lat1)*(Math.PI/180)  // deg2rad\n      var dLon = (lon2-lon1)*(Math.PI/180)\n      var a =\n        Math.sin(dLat/2) * Math.sin(dLat/2) +\n        Math.cos(lat1*(Math.PI/180)) * Math.cos(lat2*Math.PI/180) *\n        Math.sin(dLon/2) * Math.sin(dLon/2)\n        ;\n      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n      var d = R * c; // Distance in km\n      return d;\n    }\n\n\nfunction isInPolygon(lat,lon, vs) {\n    // ray-casting algorithm based on\n    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n\n\n    var x = lat, y = lon;\n\n    var inside = false;\n    for (var i = 1, j = vs.length -1; i < vs.length; j = i++) {\n\n        var xi = vs[i].lat, yi = vs[i].lng;\n        var xj = vs[j].lat, yj = vs[j].lng;\n\n        var intersect = ((yi > y) != (yj > y))\n            && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n        if (intersect) inside = !inside;\n    }\n\n    return inside;\n}\n\n}).call(this);\n","servePath":"/client/CrimeMap.js","sourceMap":null},{"type":"js","data":"(function(){  Meteor.subscribe('Aonly', {\n      onReady: function(){\n      }\n  });\n\n  Meteor.subscribe('Ponly',{\n    onReady: function(){\n    }\n  });\n\n  Meteor.subscribe('Conly',{\n    onReady: function(){\n    }\n  });\n\n  Meteor.subscribe('AP',{\n    onReady: function(){\n    }\n  });\n\n  Meteor.subscribe('AC',{\n    onReady: function(){\n    }\n  });\n\n  Meteor.subscribe('PC',{\n    onReady: function(){\n    }\n  });\n\n  Meteor.subscribe('APC',{\n    onReady: function(){\n    }\n  });\n\n//reactive data\nDataforMainTable = [];\nDataforMainTableDep = new Tracker.Dependency();\ngetDataforMainTable = function(){\n  DataforMainTableDep.depend();\n  return DataforMainTable;\n};\nsetDataforMainTable = function(data){\n  DataforMainTable = data;\n  DataforMainTableDep.changed();\n};\nmodDataforMainTable = function(data){\n  for(var i = 0; i < DataforMainTable.length;i++){\n    if(data != DataforMainTable[i].PDLocation){\n      DataforMainTable.splice(i,1);\n      i--;\n    }\n  }\n  DataforMainTableDep.changed();\n};\n\nDataforSelect = [];\nDataforSelectDep = new Tracker.Dependency();\ngetDataforSelect = function(){\n  DataforSelectDep.depend();\n  return DataforSelect;\n};\nsetDataforSelect = function(data){\n  DataforSelect = [];\n  $.each(data,function(i,item){\n    var nitem = new Object();\n    nitem.PDLocation = item;\n    DataforSelect.push(nitem);\n  });\n  DataforSelectDep.changed();\n};\nrmDataforSelect = function(){\n  DataforSelect = [];\n  DataforSelectDep.changed();\n};\n\nDataforStateTable = [];\nDataforStateTableDep = new Tracker.Dependency();\ngetDataforStateTable = function(){\n  DataforStateTableDep.depend();\n  return DataforStateTable;\n};\nsetDataforStateTable = function(dataFromTable){\n  DataforStateTable = [];\n  var field1 = [];\n  var field2 = [];\n  var total = 0;\n  $.each(dataFromTable,function(i,item){\n    var flag = 1;\n    $.each(field1,function(i,item2){\n      if(item2 == item['UserRole']){\n        flag = 0;\n        field2[i]=field2[i]+1;\n      }\n    });\n    if(flag == 1){\n      field1.push(item['UserRole']);\n      field2.push(1);\n    }\n  });\n  $.each(field2,function(i,item){\n    total+=item;\n  });\n  field1.push('ALL');\n  field2.push(total);\n  $.each(field1,function(i,item){\n    var row = new Object();\n    row.UserRole = item;\n    row.Number = field2[i];\n    row.Percent = ((field2[i]/total)*100).toFixed(2) + \"%\";\n    DataforStateTable.push(row);\n  });\n  DataforStateTableDep.changed();\n};\n\nr = 120;\nCircleColors = {\n  a: \"#b9f6df\",\n  b: \"#ffb6c1\",\n  c: \"#5DADE2\",\n  ab: \"#e6b09b\",\n  bc: \"#BB8FCE\",\n  ca: \"#2980B9\",\n  abc: \"#993399\"\n};\n\nfunction dots(x_0, y_0, r, n) {\n    var a = [],\n        d_alpha = 2 * Math.PI / n;\n    for (var alpha = 0; alpha < 2 * Math.PI; alpha += d_alpha) {\n        a.push([\n            x_0 + r * Math.cos(alpha),\n            y_0 + r * Math.sin(alpha)\n        ]);\n    }\n    return (a);\n}\n\nshape_a = d3.geom.polygon(dots(r, r, r, 80));\nshape_b = d3.geom.polygon(dots(2 * r, r, r, 80));\nshape_c = d3.geom.polygon(dots(1.5 * r, 2 * r, r, 80));\n\nshape_a_x_b = shape_a.slice();\nshape_b.reverse().clip(shape_a_x_b);\n\nshape_b_x_c = shape_c.slice();\nshape_b.clip(shape_b_x_c);\n\nshape_c_x_a = shape_c.slice();\nshape_a.reverse().clip(shape_c_x_a);\n\nshape_abc = shape_c_x_a.slice();\nd3.geom.polygon(shape_b_x_c.reverse()).clip(shape_abc);\n\ntooltipA = d3.select(\"body\")\n    .append(\"div\")\n    .attr(\"class\",\"tips\")\n    .attr(\"data-toggle\", \"tooltip\")\n    .style(\"position\", \"absolute\")\n    .style(\"z-index\", \"50\")\n    .style(\"text-align\", \"center\")\n    .style(\"visibility\", \"hidden\")\n    .text(\"Public Only\");\n\ntooltipB = d3.select(\"body\")\n    .append(\"div\")\n    .attr(\"class\",\"tips\")\n    .style(\"position\", \"absolute\")\n    .style(\"z-index\", \"10\")\n    .style(\"visibility\", \"hidden\")\n    .text(\"Co-mentioned only\");\n\ntooltipC = d3.select(\"body\")\n    .append(\"div\")\n    .attr(\"class\",\"tips\")\n    .style(\"position\", \"absolute\")\n    .style(\"z-index\", \"10\")\n    .style(\"visibility\", \"hidden\")\n    .text(\"Agency Only\");\n\ntooltipAB = d3.select(\"body\")\n    .append(\"div\")\n    .attr(\"class\",\"tips\")\n    .style(\"position\", \"absolute\")\n    .style(\"z-index\", \"10\")\n    .style(\"visibility\", \"hidden\")\n    .text(\"Public + Co-mentioned\");\n\ntooltipBC = d3.select(\"body\")\n    .append(\"div\")\n    .attr(\"class\",\"tips\")\n    .style(\"position\", \"absolute\")\n    .style(\"z-index\", \"10\")\n    .style(\"visibility\", \"hidden\")\n    .text(\"Agency + Co-mentioned\");\n\ntooltipCA = d3.select(\"body\")\n    .append(\"div\")\n    .attr(\"class\",\"tips\")\n    .style(\"position\", \"absolute\")\n    .style(\"z-index\", \"10\")\n    .style(\"visibility\", \"hidden\")\n    .text(\"Agency + Public\");\n\ntooltipABC = d3.select(\"body\")\n    .append(\"div\")\n    .attr(\"class\",\"tips\")\n    .style(\"position\", \"absolute\")\n    .style(\"z-index\", \"10\")\n    .style(\"visibility\", \"hidden\")\n    .text(\"Agency + Public + Co-mentioned\");\n\n\nTemplate.SocialMedia.onCreated(function(){\n});\n\nTemplate.SocialMedia.onRendered(function(){\n  var w = 3 * r;\n  var h = 3 * r;\n\n\n  var svg = d3.select(\"#polygon1\")\n              .attr(\"width\",w)\n              .attr(\"height\",h);\n\n  var circleA = svg.append(\"polygon\")\n                   .attr({\n                     id: \"polygonA\",\n                     points: shape_a,\n                     fill:CircleColors.a\n                    });\n  var circleB = svg.append(\"polygon\")\n                   .attr({\n                     id:\"polygonB\",\n                     points: shape_b,\n                     fill:CircleColors.b\n                   });\n\n  var circleC = svg.append(\"polygon\")\n                   .attr({\n                     id:\"polygonC\",\n                     points: shape_c,\n                     fill:CircleColors.c\n                   });\n\n  var injectionAB = svg.append(\"polygon\")\n                       .attr({\n                         id:\"polygonAB\",\n                         points: shape_a_x_b,\n                         fill: CircleColors.ab\n                       });\n\n  var injectionBC = svg.append(\"polygon\")\n                       .attr({\n                         id:\"polygonBC\",\n                         points: shape_b_x_c,\n                         fill: CircleColors.bc\n                       })\n\n  var injectionCA = svg.append(\"polygon\")\n                       .attr({\n                         id:\"polygonCA\",\n                         points: shape_c_x_a,\n                         fill: CircleColors.ca\n                       })\n\n  var injectionABC = svg.append(\"polygon\")\n                        .attr({\n                          id:\"polygonABC\",\n                          points: shape_abc,\n                          fill: CircleColors.abc\n                        })\n\n\n  Deps.autorun(function(){\n\n\n  });\n\n});\n\nTemplate.SocialMedia.helpers({\n  showTheMainTable:function(){\n    return Session.get('showTheMainTable');\n  },\n  getTitleText:function(){\n    return Session.get('resetFLag');\n  },\n  getMediaData: function(){\n    return getDataforMainTable();\n  },\n  settings: function(){\n    return {\n      showFilter:false,\n      showNavigation:'auto',\n      fields:[\n        {key:'PoliceDepartment',label:'PoliceDepartment'},\n        {key:'UserID', label:'UserName'},\n        {key:'PDLocation', label:'PDLocation'},\n        {key:'UserLocation',label:'UserLocation'},\n        {key:'UserRole',label:'UserRole'}]\n    };\n  }\n});\n\nTemplate.SocialMedia.events({\n  'mouseover #polygonA': function(e){\n    var counter = 0;\n    counter = Ponly.find().count();\n    $(\"#p1\").html(counter);\n    /*d3.csv(\"data/Ponly.csv\", function(csv) {\n        csv.map(function(d) {\n            counter++;\n        })\n        $(\"#p1\").html(counter);\n    })*/\n    return tooltipA.style(\"visibility\", \"visible\").style(\"color\", \"yellow\");\n  },\n\n  'mousemove #polygonA': function(e){\n    return tooltipA.style(\"top\", (e.pageY - 10) + \"px\").style(\"left\", (e.pageX + 10) + \"px\");\n  },\n\n  'mouseout #polygonA': function(e){\n    $(\"#p1\").html(\"\");\n    return tooltipA.style(\"visibility\",\"hidden\");\n  },\n\n  'click #polygonA': function(e){\n    rmDataforSelect();\n    Session.set('resetFLag','Public Only');\n    Session.set('showTheMainTable',true);\n    DataforMainTable = Ponly.find().fetch();\n    DataforMainTableDep.changed();\n    var field1 = [];\n    $.each(DataforMainTable,function(i,item){\n      var flag = 1;\n      for(var j = 0; j <= field1.length;j++){\n        if(field1[j] == item.PDLocation){\n          flag = 0;\n        }\n      }\n      if(flag == 1){\n        field1.push(item.PDLocation);\n      }\n    });\n    setDataforSelect(field1);\n    setDataforStateTable(DataforMainTable);\n\n\n  },\n\n  'mouseover #polygonB': function(e){\n    var counter = 0;\n    counter = Conly.find().count();\n    $(\"#p1\").html(counter);\n    /*d3.csv(\"data/Conly.csv\", function(csv) {\n        csv.map(function(d) {\n            counter++;\n        })\n        $(\"#p1\").html(counter);\n    })*/\n    return tooltipB.style(\"visibility\", \"visible\").style(\"color\", \"yellow\");\n  },\n\n  'mousemove #polygonB': function(e){\n    return tooltipB.style(\"top\", (e.pageY - 10) + \"px\").style(\"left\", (e.pageX + 10) + \"px\");\n  },\n\n  'mouseout #polygonB': function(e){\n    $(\"#p1\").html(\"\");\n    return tooltipB.style(\"visibility\",\"hidden\");\n  },\n\n  'click #polygonB': function(e){\n    rmDataforSelect();\n    Session.set('resetFLag','Co-mentioned Only');\n    Session.set('showTheMainTable',true);\n    DataforMainTable = Conly.find().fetch();\n    DataforMainTableDep.changed();\n    var field1 = [];\n    $.each(DataforMainTable,function(i,item){\n      var flag = 1;\n      for(var j = 0; j <= field1.length;j++){\n        if(field1[j] == item.PDLocation){\n          flag = 0;\n        }\n      }\n      if(flag == 1){\n        field1.push(item.PDLocation);\n      }\n    });\n    setDataforSelect(field1);\n    setDataforStateTable(DataforMainTable);\n  },\n\n  'mouseover #polygonC': function(e){\n    var counter = 0;\n    counter = Aonly.find().count();\n    $(\"#p1\").html(counter);\n    /*d3.csv(\"data/Aonly.csv\", function(csv) {\n        csv.map(function(d) {\n            counter++;\n        })\n        $(\"#p1\").html(counter);\n    })*/\n    return tooltipC.style(\"visibility\", \"visible\").style(\"color\", \"yellow\");\n  },\n\n  'mousemove #polygonC': function(e){\n    return tooltipC.style(\"top\", (e.pageY - 10) + \"px\").style(\"left\", (e.pageX + 10) + \"px\");\n  },\n\n  'mouseout #polygonC': function(e){\n    $(\"#p1\").html(\"\");\n    return tooltipC.style(\"visibility\",\"hidden\");\n  },\n\n  'click #polygonC': function(e){\n    rmDataforSelect();\n    Session.set('resetFLag','Agency Only');\n    Session.set('showTheMainTable',true);\n    DataforMainTable = Aonly.find().fetch();\n    DataforMainTableDep.changed();\n    var field1 = [];\n    $.each(DataforMainTable,function(i,item){\n      var flag = 1;\n      for(var j = 0; j <= field1.length;j++){\n        if(field1[j] == item.PDLocation){\n          flag = 0;\n        }\n      }\n      if(flag == 1){\n        field1.push(item.PDLocation);\n      }\n    });\n    setDataforSelect(field1);\n    setDataforStateTable(DataforMainTable);\n  },\n\n  'mouseover #polygonAB': function(e){\n    var counter = 0;\n    counter = Pc.find().count();\n    $(\"#p1\").html(counter);\n    /*d3.csv(\"data/PC.csv\", function(csv) {\n        csv.map(function(d) {\n            counter++;\n        })\n        $(\"#p1\").html(counter);\n    })*/\n    return tooltipAB.style(\"visibility\", \"visible\").style(\"color\", \"yellow\");\n  },\n\n  'mousemove #polygonAB': function(e){\n    return tooltipAB.style(\"top\", (e.pageY - 10) + \"px\").style(\"left\", (e.pageX + 10) + \"px\");\n  },\n\n  'mouseout #polygonAB': function(e){\n    $(\"#p1\").html(\"\");\n    return tooltipAB.style(\"visibility\",\"hidden\");\n  },\n\n  'click #polygonAB': function(e){\n    rmDataforSelect();\n    Session.set('resetFLag','Public + Co-mentioned');\n    Session.set('showTheMainTable',true);\n    DataforMainTable = Pc.find().fetch();\n    DataforMainTableDep.changed();\n    var field1 = [];\n    $.each(DataforMainTable,function(i,item){\n      var flag = 1;\n      for(var j = 0; j <= field1.length;j++){\n        if(field1[j] == item.PDLocation){\n          flag = 0;\n        }\n      }\n      if(flag == 1){\n        field1.push(item.PDLocation);\n      }\n    });\n    setDataforSelect(field1);\n    setDataforStateTable(DataforMainTable);\n  },\n\n  'mouseover #polygonBC': function(e){\n    var counter = 0;\n    counter = Ac.find().count();\n    $(\"#p1\").html(counter);\n    /*d3.csv(\"data/AC.csv\", function(csv) {\n        csv.map(function(d) {\n            counter++;\n        })\n        $(\"#p1\").html(counter);\n    })*/\n    return tooltipBC.style(\"visibility\", \"visible\").style(\"color\", \"yellow\");\n  },\n\n  'mousemove #polygonBC': function(e){\n    return tooltipBC.style(\"top\", (e.pageY - 10) + \"px\").style(\"left\", (e.pageX + 10) + \"px\");\n  },\n\n  'mouseout #polygonBC': function(e){\n    $(\"#p1\").html(\"\");\n    return tooltipBC.style(\"visibility\",\"hidden\");\n  },\n\n  'click #polygonBC': function(e){\n    rmDataforSelect();\n    Session.set('resetFLag','Agency + Co-mentioned');\n    Session.set('showTheMainTable',true);\n    DataforMainTable = Ac.find().fetch();\n    DataforMainTableDep.changed();\n    var field1 = [];\n    $.each(DataforMainTable,function(i,item){\n      var flag = 1;\n      for(var j = 0; j <= field1.length;j++){\n        if(field1[j] == item.PDLocation){\n          flag = 0;\n        }\n      }\n      if(flag == 1){\n        field1.push(item.PDLocation);\n      }\n    });\n    setDataforSelect(field1);\n    setDataforStateTable(DataforMainTable);\n  },\n\n  'mouseover #polygonCA': function(e){\n    var counter = 0;\n    counter = Ap.find().count();\n    $(\"#p1\").html(counter);\n    /*d3.csv(\"data/AP.csv\", function(csv) {\n        csv.map(function(d) {\n            counter++;\n        })\n        $(\"#p1\").html(counter);\n    })*/\n    return tooltipCA.style(\"visibility\", \"visible\").style(\"color\", \"yellow\");\n  },\n\n  'mousemove #polygonCA': function(e){\n    return tooltipCA.style(\"top\", (e.pageY - 10) + \"px\").style(\"left\", (e.pageX + 10) + \"px\");\n  },\n\n  'mouseout #polygonCA': function(e){\n    $(\"#p1\").html(\"\");\n    return tooltipCA.style(\"visibility\",\"hidden\");\n  },\n\n  'click #polygonCA': function(e){\n    rmDataforSelect();\n    Session.set('resetFLag','Agency + Public');\n    Session.set('showTheMainTable',true);\n    DataforMainTable = Pc.find().fetch();\n    DataforMainTableDep.changed();\n    var field1 = [];\n    $.each(DataforMainTable,function(i,item){\n      var flag = 1;\n      for(var j = 0; j <= field1.length;j++){\n        if(field1[j] == item.PDLocation){\n          flag = 0;\n        }\n      }\n      if(flag == 1){\n        field1.push(item.PDLocation);\n      }\n    });\n    setDataforSelect(field1);\n    setDataforStateTable(DataforMainTable);\n  },\n\n  'mouseover #polygonABC': function(e){\n    var counter = 0;\n    counter = Apc.find().count();\n    $(\"#p1\").html(counter);\n    /*d3.csv(\"data/APC.csv\", function(csv) {\n        csv.map(function(d) {\n            counter++;\n        })\n        $(\"#p1\").html(counter);\n    })*/\n    return tooltipABC.style(\"visibility\", \"visible\").style(\"color\", \"yellow\");\n  },\n\n  'mousemove #polygonABC': function(e){\n    return tooltipABC.style(\"top\", (e.pageY - 10) + \"px\").style(\"left\", (e.pageX + 10) + \"px\");\n  },\n\n  'mouseout #polygonABC': function(e){\n    $(\"#p1\").html(\"\");\n    return tooltipABC.style(\"visibility\",\"hidden\");\n  },\n\n  'click #polygonABC': function(e){\n    rmDataforSelect();\n    Session.set('resetFLag','Agency + Public + Co-mentioned');\n    Session.set('showTheMainTable',true);\n    DataforMainTable = Apc.find().fetch();\n    DataforMainTableDep.changed();\n    var field1 = [];\n    $.each(DataforMainTable,function(i,item){\n      var flag = 1;\n      for(var j = 0; j <= field1.length;j++){\n        if(field1[j] == item.PDLocation){\n          flag = 0;\n        }\n      }\n      if(flag == 1){\n        field1.push(item.PDLocation);\n      }\n    });\n    setDataforSelect(field1);\n    setDataforStateTable(DataforMainTable);\n  },\n\n\n});\n\nTemplate.SocialMediaForm.events({\n  'change #MediaSelect': function(e){\n    modDataforMainTable($(e.target).val());\n  },\n  'click #ResetButton': function(e){\n    rmDataforSelect();\n    switch(Session.get('resetFLag')){\n      case 'Public Only':\n        DataforMainTable = Ponly.find().fetch();\n        DataforMainTableDep.changed();\n        break;\n      case 'Co-mentioned Only':\n        DataforMainTable = Conly.find().fetch();\n        DataforMainTableDep.changed();\n        break;\n      case 'Agency Only':\n        DataforMainTable = Aonly.find().fetch();\n        DataforMainTableDep.changed();\n        break;\n      case 'Public + Co-mentioned':\n        DataforMainTable = Pc.find().fetch();\n        DataforMainTableDep.changed();\n        break;\n      case 'Agency + Co-mentioned':\n        DataforMainTable = Ac.find().fetch();\n        DataforMainTableDep.changed();\n        break;\n      case 'Agency + Public':\n        DataforMainTable = Pc.find().fetch();\n        DataforMainTableDep.changed();\n        break;\n      case 'Agency + Public + Co-mentioned':\n        DataforMainTable = Apc.find().fetch();\n        DataforMainTableDep.changed();\n        break;\n      default:\n        break;\n    }\n  }\n});\n\nTemplate.SocialMediaForm.helpers({\n  getPDLoptions:function(){\n    return getDataforSelect();\n  },\n  getStateData:function(){\n    return getDataforStateTable();\n  }\n});\n\nTemplate.SocialMediaMainTable.helpers({\n});\n\nTemplate.MediaDataRows.events({\n  'click':function(e){\n    console.log(this.UserID);\n    window.open(\"https://twitter.com/intent/user?user_id=\" + this.UserID);\n  }\n});\n\n}).call(this);\n","servePath":"/client/SocialMedia.js","sourceMap":null},{"type":"js","data":"(function(){LocalMarkers = new Mongo.Collection(null);\n\n}).call(this);\n","servePath":"/client/localcollections.js","sourceMap":null}]