[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/d3js_d3/packages/d3js_d3.js                              //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/d3js:d3/d3.js                                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n!function() {                                                                                                          // 1\n  var d3 = {                                                                                                           // 2\n    version: \"3.5.8\"                                                                                                   // 3\n  };                                                                                                                   // 4\n  var d3_arraySlice = [].slice, d3_array = function(list) {                                                            // 5\n    return d3_arraySlice.call(list);                                                                                   // 6\n  };                                                                                                                   // 7\n  var d3_document = this.document;                                                                                     // 8\n  function d3_documentElement(node) {                                                                                  // 9\n    return node && (node.ownerDocument || node.document || node).documentElement;                                      // 10\n  }                                                                                                                    // 11\n  function d3_window(node) {                                                                                           // 12\n    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);\n  }                                                                                                                    // 14\n  if (d3_document) {                                                                                                   // 15\n    try {                                                                                                              // 16\n      d3_array(d3_document.documentElement.childNodes)[0].nodeType;                                                    // 17\n    } catch (e) {                                                                                                      // 18\n      d3_array = function(list) {                                                                                      // 19\n        var i = list.length, array = new Array(i);                                                                     // 20\n        while (i--) array[i] = list[i];                                                                                // 21\n        return array;                                                                                                  // 22\n      };                                                                                                               // 23\n    }                                                                                                                  // 24\n  }                                                                                                                    // 25\n  if (!Date.now) Date.now = function() {                                                                               // 26\n    return +new Date();                                                                                                // 27\n  };                                                                                                                   // 28\n  if (d3_document) {                                                                                                   // 29\n    try {                                                                                                              // 30\n      d3_document.createElement(\"DIV\").style.setProperty(\"opacity\", 0, \"\");                                            // 31\n    } catch (error) {                                                                                                  // 32\n      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;\n      d3_element_prototype.setAttribute = function(name, value) {                                                      // 34\n        d3_element_setAttribute.call(this, name, value + \"\");                                                          // 35\n      };                                                                                                               // 36\n      d3_element_prototype.setAttributeNS = function(space, local, value) {                                            // 37\n        d3_element_setAttributeNS.call(this, space, local, value + \"\");                                                // 38\n      };                                                                                                               // 39\n      d3_style_prototype.setProperty = function(name, value, priority) {                                               // 40\n        d3_style_setProperty.call(this, name, value + \"\", priority);                                                   // 41\n      };                                                                                                               // 42\n    }                                                                                                                  // 43\n  }                                                                                                                    // 44\n  d3.ascending = d3_ascending;                                                                                         // 45\n  function d3_ascending(a, b) {                                                                                        // 46\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;                                                                  // 47\n  }                                                                                                                    // 48\n  d3.descending = function(a, b) {                                                                                     // 49\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;                                                                  // 50\n  };                                                                                                                   // 51\n  d3.min = function(array, f) {                                                                                        // 52\n    var i = -1, n = array.length, a, b;                                                                                // 53\n    if (arguments.length === 1) {                                                                                      // 54\n      while (++i < n) if ((b = array[i]) != null && b >= b) {                                                          // 55\n        a = b;                                                                                                         // 56\n        break;                                                                                                         // 57\n      }                                                                                                                // 58\n      while (++i < n) if ((b = array[i]) != null && a > b) a = b;                                                      // 59\n    } else {                                                                                                           // 60\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {                                        // 61\n        a = b;                                                                                                         // 62\n        break;                                                                                                         // 63\n      }                                                                                                                // 64\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;                                    // 65\n    }                                                                                                                  // 66\n    return a;                                                                                                          // 67\n  };                                                                                                                   // 68\n  d3.max = function(array, f) {                                                                                        // 69\n    var i = -1, n = array.length, a, b;                                                                                // 70\n    if (arguments.length === 1) {                                                                                      // 71\n      while (++i < n) if ((b = array[i]) != null && b >= b) {                                                          // 72\n        a = b;                                                                                                         // 73\n        break;                                                                                                         // 74\n      }                                                                                                                // 75\n      while (++i < n) if ((b = array[i]) != null && b > a) a = b;                                                      // 76\n    } else {                                                                                                           // 77\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {                                        // 78\n        a = b;                                                                                                         // 79\n        break;                                                                                                         // 80\n      }                                                                                                                // 81\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;                                    // 82\n    }                                                                                                                  // 83\n    return a;                                                                                                          // 84\n  };                                                                                                                   // 85\n  d3.extent = function(array, f) {                                                                                     // 86\n    var i = -1, n = array.length, a, b, c;                                                                             // 87\n    if (arguments.length === 1) {                                                                                      // 88\n      while (++i < n) if ((b = array[i]) != null && b >= b) {                                                          // 89\n        a = c = b;                                                                                                     // 90\n        break;                                                                                                         // 91\n      }                                                                                                                // 92\n      while (++i < n) if ((b = array[i]) != null) {                                                                    // 93\n        if (a > b) a = b;                                                                                              // 94\n        if (c < b) c = b;                                                                                              // 95\n      }                                                                                                                // 96\n    } else {                                                                                                           // 97\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {                                        // 98\n        a = c = b;                                                                                                     // 99\n        break;                                                                                                         // 100\n      }                                                                                                                // 101\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {                                                  // 102\n        if (a > b) a = b;                                                                                              // 103\n        if (c < b) c = b;                                                                                              // 104\n      }                                                                                                                // 105\n    }                                                                                                                  // 106\n    return [ a, c ];                                                                                                   // 107\n  };                                                                                                                   // 108\n  function d3_number(x) {                                                                                              // 109\n    return x === null ? NaN : +x;                                                                                      // 110\n  }                                                                                                                    // 111\n  function d3_numeric(x) {                                                                                             // 112\n    return !isNaN(x);                                                                                                  // 113\n  }                                                                                                                    // 114\n  d3.sum = function(array, f) {                                                                                        // 115\n    var s = 0, n = array.length, a, i = -1;                                                                            // 116\n    if (arguments.length === 1) {                                                                                      // 117\n      while (++i < n) if (d3_numeric(a = +array[i])) s += a;                                                           // 118\n    } else {                                                                                                           // 119\n      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;                                         // 120\n    }                                                                                                                  // 121\n    return s;                                                                                                          // 122\n  };                                                                                                                   // 123\n  d3.mean = function(array, f) {                                                                                       // 124\n    var s = 0, n = array.length, a, i = -1, j = n;                                                                     // 125\n    if (arguments.length === 1) {                                                                                      // 126\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;                                       // 127\n    } else {                                                                                                           // 128\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;                     // 129\n    }                                                                                                                  // 130\n    if (j) return s / j;                                                                                               // 131\n  };                                                                                                                   // 132\n  d3.quantile = function(values, p) {                                                                                  // 133\n    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;                             // 134\n    return e ? v + e * (values[h] - v) : v;                                                                            // 135\n  };                                                                                                                   // 136\n  d3.median = function(array, f) {                                                                                     // 137\n    var numbers = [], n = array.length, a, i = -1;                                                                     // 138\n    if (arguments.length === 1) {                                                                                      // 139\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);                                        // 140\n    } else {                                                                                                           // 141\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);                      // 142\n    }                                                                                                                  // 143\n    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);                                            // 144\n  };                                                                                                                   // 145\n  d3.variance = function(array, f) {                                                                                   // 146\n    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;                                                           // 147\n    if (arguments.length === 1) {                                                                                      // 148\n      while (++i < n) {                                                                                                // 149\n        if (d3_numeric(a = d3_number(array[i]))) {                                                                     // 150\n          d = a - m;                                                                                                   // 151\n          m += d / ++j;                                                                                                // 152\n          s += d * (a - m);                                                                                            // 153\n        }                                                                                                              // 154\n      }                                                                                                                // 155\n    } else {                                                                                                           // 156\n      while (++i < n) {                                                                                                // 157\n        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {                                                   // 158\n          d = a - m;                                                                                                   // 159\n          m += d / ++j;                                                                                                // 160\n          s += d * (a - m);                                                                                            // 161\n        }                                                                                                              // 162\n      }                                                                                                                // 163\n    }                                                                                                                  // 164\n    if (j > 1) return s / (j - 1);                                                                                     // 165\n  };                                                                                                                   // 166\n  d3.deviation = function() {                                                                                          // 167\n    var v = d3.variance.apply(this, arguments);                                                                        // 168\n    return v ? Math.sqrt(v) : v;                                                                                       // 169\n  };                                                                                                                   // 170\n  function d3_bisector(compare) {                                                                                      // 171\n    return {                                                                                                           // 172\n      left: function(a, x, lo, hi) {                                                                                   // 173\n        if (arguments.length < 3) lo = 0;                                                                              // 174\n        if (arguments.length < 4) hi = a.length;                                                                       // 175\n        while (lo < hi) {                                                                                              // 176\n          var mid = lo + hi >>> 1;                                                                                     // 177\n          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;                                                     // 178\n        }                                                                                                              // 179\n        return lo;                                                                                                     // 180\n      },                                                                                                               // 181\n      right: function(a, x, lo, hi) {                                                                                  // 182\n        if (arguments.length < 3) lo = 0;                                                                              // 183\n        if (arguments.length < 4) hi = a.length;                                                                       // 184\n        while (lo < hi) {                                                                                              // 185\n          var mid = lo + hi >>> 1;                                                                                     // 186\n          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;                                                     // 187\n        }                                                                                                              // 188\n        return lo;                                                                                                     // 189\n      }                                                                                                                // 190\n    };                                                                                                                 // 191\n  }                                                                                                                    // 192\n  var d3_bisect = d3_bisector(d3_ascending);                                                                           // 193\n  d3.bisectLeft = d3_bisect.left;                                                                                      // 194\n  d3.bisect = d3.bisectRight = d3_bisect.right;                                                                        // 195\n  d3.bisector = function(f) {                                                                                          // 196\n    return d3_bisector(f.length === 1 ? function(d, x) {                                                               // 197\n      return d3_ascending(f(d), x);                                                                                    // 198\n    } : f);                                                                                                            // 199\n  };                                                                                                                   // 200\n  d3.shuffle = function(array, i0, i1) {                                                                               // 201\n    if ((m = arguments.length) < 3) {                                                                                  // 202\n      i1 = array.length;                                                                                               // 203\n      if (m < 2) i0 = 0;                                                                                               // 204\n    }                                                                                                                  // 205\n    var m = i1 - i0, t, i;                                                                                             // 206\n    while (m) {                                                                                                        // 207\n      i = Math.random() * m-- | 0;                                                                                     // 208\n      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;                                             // 209\n    }                                                                                                                  // 210\n    return array;                                                                                                      // 211\n  };                                                                                                                   // 212\n  d3.permute = function(array, indexes) {                                                                              // 213\n    var i = indexes.length, permutes = new Array(i);                                                                   // 214\n    while (i--) permutes[i] = array[indexes[i]];                                                                       // 215\n    return permutes;                                                                                                   // 216\n  };                                                                                                                   // 217\n  d3.pairs = function(array) {                                                                                         // 218\n    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);                              // 219\n    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];                                                             // 220\n    return pairs;                                                                                                      // 221\n  };                                                                                                                   // 222\n  d3.zip = function() {                                                                                                // 223\n    if (!(n = arguments.length)) return [];                                                                            // 224\n    for (var i = -1, m = d3.min(arguments, d3_zipLength), zips = new Array(m); ++i < m; ) {                            // 225\n      for (var j = -1, n, zip = zips[i] = new Array(n); ++j < n; ) {                                                   // 226\n        zip[j] = arguments[j][i];                                                                                      // 227\n      }                                                                                                                // 228\n    }                                                                                                                  // 229\n    return zips;                                                                                                       // 230\n  };                                                                                                                   // 231\n  function d3_zipLength(d) {                                                                                           // 232\n    return d.length;                                                                                                   // 233\n  }                                                                                                                    // 234\n  d3.transpose = function(matrix) {                                                                                    // 235\n    return d3.zip.apply(d3, matrix);                                                                                   // 236\n  };                                                                                                                   // 237\n  d3.keys = function(map) {                                                                                            // 238\n    var keys = [];                                                                                                     // 239\n    for (var key in map) keys.push(key);                                                                               // 240\n    return keys;                                                                                                       // 241\n  };                                                                                                                   // 242\n  d3.values = function(map) {                                                                                          // 243\n    var values = [];                                                                                                   // 244\n    for (var key in map) values.push(map[key]);                                                                        // 245\n    return values;                                                                                                     // 246\n  };                                                                                                                   // 247\n  d3.entries = function(map) {                                                                                         // 248\n    var entries = [];                                                                                                  // 249\n    for (var key in map) entries.push({                                                                                // 250\n      key: key,                                                                                                        // 251\n      value: map[key]                                                                                                  // 252\n    });                                                                                                                // 253\n    return entries;                                                                                                    // 254\n  };                                                                                                                   // 255\n  d3.merge = function(arrays) {                                                                                        // 256\n    var n = arrays.length, m, i = -1, j = 0, merged, array;                                                            // 257\n    while (++i < n) j += arrays[i].length;                                                                             // 258\n    merged = new Array(j);                                                                                             // 259\n    while (--n >= 0) {                                                                                                 // 260\n      array = arrays[n];                                                                                               // 261\n      m = array.length;                                                                                                // 262\n      while (--m >= 0) {                                                                                               // 263\n        merged[--j] = array[m];                                                                                        // 264\n      }                                                                                                                // 265\n    }                                                                                                                  // 266\n    return merged;                                                                                                     // 267\n  };                                                                                                                   // 268\n  var abs = Math.abs;                                                                                                  // 269\n  d3.range = function(start, stop, step) {                                                                             // 270\n    if (arguments.length < 3) {                                                                                        // 271\n      step = 1;                                                                                                        // 272\n      if (arguments.length < 2) {                                                                                      // 273\n        stop = start;                                                                                                  // 274\n        start = 0;                                                                                                     // 275\n      }                                                                                                                // 276\n    }                                                                                                                  // 277\n    if ((stop - start) / step === Infinity) throw new Error(\"infinite range\");                                         // 278\n    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;                                                   // 279\n    start *= k, stop *= k, step *= k;                                                                                  // 280\n    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);\n    return range;                                                                                                      // 282\n  };                                                                                                                   // 283\n  function d3_range_integerScale(x) {                                                                                  // 284\n    var k = 1;                                                                                                         // 285\n    while (x * k % 1) k *= 10;                                                                                         // 286\n    return k;                                                                                                          // 287\n  }                                                                                                                    // 288\n  function d3_class(ctor, properties) {                                                                                // 289\n    for (var key in properties) {                                                                                      // 290\n      Object.defineProperty(ctor.prototype, key, {                                                                     // 291\n        value: properties[key],                                                                                        // 292\n        enumerable: false                                                                                              // 293\n      });                                                                                                              // 294\n    }                                                                                                                  // 295\n  }                                                                                                                    // 296\n  d3.map = function(object, f) {                                                                                       // 297\n    var map = new d3_Map();                                                                                            // 298\n    if (object instanceof d3_Map) {                                                                                    // 299\n      object.forEach(function(key, value) {                                                                            // 300\n        map.set(key, value);                                                                                           // 301\n      });                                                                                                              // 302\n    } else if (Array.isArray(object)) {                                                                                // 303\n      var i = -1, n = object.length, o;                                                                                // 304\n      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);\n    } else {                                                                                                           // 306\n      for (var key in object) map.set(key, object[key]);                                                               // 307\n    }                                                                                                                  // 308\n    return map;                                                                                                        // 309\n  };                                                                                                                   // 310\n  function d3_Map() {                                                                                                  // 311\n    this._ = Object.create(null);                                                                                      // 312\n  }                                                                                                                    // 313\n  var d3_map_proto = \"__proto__\", d3_map_zero = \"\\x00\";                                                                // 314\n  d3_class(d3_Map, {                                                                                                   // 315\n    has: d3_map_has,                                                                                                   // 316\n    get: function(key) {                                                                                               // 317\n      return this._[d3_map_escape(key)];                                                                               // 318\n    },                                                                                                                 // 319\n    set: function(key, value) {                                                                                        // 320\n      return this._[d3_map_escape(key)] = value;                                                                       // 321\n    },                                                                                                                 // 322\n    remove: d3_map_remove,                                                                                             // 323\n    keys: d3_map_keys,                                                                                                 // 324\n    values: function() {                                                                                               // 325\n      var values = [];                                                                                                 // 326\n      for (var key in this._) values.push(this._[key]);                                                                // 327\n      return values;                                                                                                   // 328\n    },                                                                                                                 // 329\n    entries: function() {                                                                                              // 330\n      var entries = [];                                                                                                // 331\n      for (var key in this._) entries.push({                                                                           // 332\n        key: d3_map_unescape(key),                                                                                     // 333\n        value: this._[key]                                                                                             // 334\n      });                                                                                                              // 335\n      return entries;                                                                                                  // 336\n    },                                                                                                                 // 337\n    size: d3_map_size,                                                                                                 // 338\n    empty: d3_map_empty,                                                                                               // 339\n    forEach: function(f) {                                                                                             // 340\n      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);                                         // 341\n    }                                                                                                                  // 342\n  });                                                                                                                  // 343\n  function d3_map_escape(key) {                                                                                        // 344\n    return (key += \"\") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;                           // 345\n  }                                                                                                                    // 346\n  function d3_map_unescape(key) {                                                                                      // 347\n    return (key += \"\")[0] === d3_map_zero ? key.slice(1) : key;                                                        // 348\n  }                                                                                                                    // 349\n  function d3_map_has(key) {                                                                                           // 350\n    return d3_map_escape(key) in this._;                                                                               // 351\n  }                                                                                                                    // 352\n  function d3_map_remove(key) {                                                                                        // 353\n    return (key = d3_map_escape(key)) in this._ && delete this._[key];                                                 // 354\n  }                                                                                                                    // 355\n  function d3_map_keys() {                                                                                             // 356\n    var keys = [];                                                                                                     // 357\n    for (var key in this._) keys.push(d3_map_unescape(key));                                                           // 358\n    return keys;                                                                                                       // 359\n  }                                                                                                                    // 360\n  function d3_map_size() {                                                                                             // 361\n    var size = 0;                                                                                                      // 362\n    for (var key in this._) ++size;                                                                                    // 363\n    return size;                                                                                                       // 364\n  }                                                                                                                    // 365\n  function d3_map_empty() {                                                                                            // 366\n    for (var key in this._) return false;                                                                              // 367\n    return true;                                                                                                       // 368\n  }                                                                                                                    // 369\n  d3.nest = function() {                                                                                               // 370\n    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;                                                       // 371\n    function map(mapType, array, depth) {                                                                              // 372\n      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;\n      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values; // 374\n      while (++i < n) {                                                                                                // 375\n        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {                                             // 376\n          values.push(object);                                                                                         // 377\n        } else {                                                                                                       // 378\n          valuesByKey.set(keyValue, [ object ]);                                                                       // 379\n        }                                                                                                              // 380\n      }                                                                                                                // 381\n      if (mapType) {                                                                                                   // 382\n        object = mapType();                                                                                            // 383\n        setter = function(keyValue, values) {                                                                          // 384\n          object.set(keyValue, map(mapType, values, depth));                                                           // 385\n        };                                                                                                             // 386\n      } else {                                                                                                         // 387\n        object = {};                                                                                                   // 388\n        setter = function(keyValue, values) {                                                                          // 389\n          object[keyValue] = map(mapType, values, depth);                                                              // 390\n        };                                                                                                             // 391\n      }                                                                                                                // 392\n      valuesByKey.forEach(setter);                                                                                     // 393\n      return object;                                                                                                   // 394\n    }                                                                                                                  // 395\n    function entries(map, depth) {                                                                                     // 396\n      if (depth >= keys.length) return map;                                                                            // 397\n      var array = [], sortKey = sortKeys[depth++];                                                                     // 398\n      map.forEach(function(key, keyMap) {                                                                              // 399\n        array.push({                                                                                                   // 400\n          key: key,                                                                                                    // 401\n          values: entries(keyMap, depth)                                                                               // 402\n        });                                                                                                            // 403\n      });                                                                                                              // 404\n      return sortKey ? array.sort(function(a, b) {                                                                     // 405\n        return sortKey(a.key, b.key);                                                                                  // 406\n      }) : array;                                                                                                      // 407\n    }                                                                                                                  // 408\n    nest.map = function(array, mapType) {                                                                              // 409\n      return map(mapType, array, 0);                                                                                   // 410\n    };                                                                                                                 // 411\n    nest.entries = function(array) {                                                                                   // 412\n      return entries(map(d3.map, array, 0), 0);                                                                        // 413\n    };                                                                                                                 // 414\n    nest.key = function(d) {                                                                                           // 415\n      keys.push(d);                                                                                                    // 416\n      return nest;                                                                                                     // 417\n    };                                                                                                                 // 418\n    nest.sortKeys = function(order) {                                                                                  // 419\n      sortKeys[keys.length - 1] = order;                                                                               // 420\n      return nest;                                                                                                     // 421\n    };                                                                                                                 // 422\n    nest.sortValues = function(order) {                                                                                // 423\n      sortValues = order;                                                                                              // 424\n      return nest;                                                                                                     // 425\n    };                                                                                                                 // 426\n    nest.rollup = function(f) {                                                                                        // 427\n      rollup = f;                                                                                                      // 428\n      return nest;                                                                                                     // 429\n    };                                                                                                                 // 430\n    return nest;                                                                                                       // 431\n  };                                                                                                                   // 432\n  d3.set = function(array) {                                                                                           // 433\n    var set = new d3_Set();                                                                                            // 434\n    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);                                        // 435\n    return set;                                                                                                        // 436\n  };                                                                                                                   // 437\n  function d3_Set() {                                                                                                  // 438\n    this._ = Object.create(null);                                                                                      // 439\n  }                                                                                                                    // 440\n  d3_class(d3_Set, {                                                                                                   // 441\n    has: d3_map_has,                                                                                                   // 442\n    add: function(key) {                                                                                               // 443\n      this._[d3_map_escape(key += \"\")] = true;                                                                         // 444\n      return key;                                                                                                      // 445\n    },                                                                                                                 // 446\n    remove: d3_map_remove,                                                                                             // 447\n    values: d3_map_keys,                                                                                               // 448\n    size: d3_map_size,                                                                                                 // 449\n    empty: d3_map_empty,                                                                                               // 450\n    forEach: function(f) {                                                                                             // 451\n      for (var key in this._) f.call(this, d3_map_unescape(key));                                                      // 452\n    }                                                                                                                  // 453\n  });                                                                                                                  // 454\n  d3.behavior = {};                                                                                                    // 455\n  function d3_identity(d) {                                                                                            // 456\n    return d;                                                                                                          // 457\n  }                                                                                                                    // 458\n  d3.rebind = function(target, source) {                                                                               // 459\n    var i = 1, n = arguments.length, method;                                                                           // 460\n    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);                         // 461\n    return target;                                                                                                     // 462\n  };                                                                                                                   // 463\n  function d3_rebind(target, source, method) {                                                                         // 464\n    return function() {                                                                                                // 465\n      var value = method.apply(source, arguments);                                                                     // 466\n      return value === source ? target : value;                                                                        // 467\n    };                                                                                                                 // 468\n  }                                                                                                                    // 469\n  function d3_vendorSymbol(object, name) {                                                                             // 470\n    if (name in object) return name;                                                                                   // 471\n    name = name.charAt(0).toUpperCase() + name.slice(1);                                                               // 472\n    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {                                                        // 473\n      var prefixName = d3_vendorPrefixes[i] + name;                                                                    // 474\n      if (prefixName in object) return prefixName;                                                                     // 475\n    }                                                                                                                  // 476\n  }                                                                                                                    // 477\n  var d3_vendorPrefixes = [ \"webkit\", \"ms\", \"moz\", \"Moz\", \"o\", \"O\" ];                                                  // 478\n  function d3_noop() {}                                                                                                // 479\n  d3.dispatch = function() {                                                                                           // 480\n    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;                                                    // 481\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);                                              // 482\n    return dispatch;                                                                                                   // 483\n  };                                                                                                                   // 484\n  function d3_dispatch() {}                                                                                            // 485\n  d3_dispatch.prototype.on = function(type, listener) {                                                                // 486\n    var i = type.indexOf(\".\"), name = \"\";                                                                              // 487\n    if (i >= 0) {                                                                                                      // 488\n      name = type.slice(i + 1);                                                                                        // 489\n      type = type.slice(0, i);                                                                                         // 490\n    }                                                                                                                  // 491\n    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);                       // 492\n    if (arguments.length === 2) {                                                                                      // 493\n      if (listener == null) for (type in this) {                                                                       // 494\n        if (this.hasOwnProperty(type)) this[type].on(name, null);                                                      // 495\n      }                                                                                                                // 496\n      return this;                                                                                                     // 497\n    }                                                                                                                  // 498\n  };                                                                                                                   // 499\n  function d3_dispatch_event(dispatch) {                                                                               // 500\n    var listeners = [], listenerByName = new d3_Map();                                                                 // 501\n    function event() {                                                                                                 // 502\n      var z = listeners, i = -1, n = z.length, l;                                                                      // 503\n      while (++i < n) if (l = z[i].on) l.apply(this, arguments);                                                       // 504\n      return dispatch;                                                                                                 // 505\n    }                                                                                                                  // 506\n    event.on = function(name, listener) {                                                                              // 507\n      var l = listenerByName.get(name), i;                                                                             // 508\n      if (arguments.length < 2) return l && l.on;                                                                      // 509\n      if (l) {                                                                                                         // 510\n        l.on = null;                                                                                                   // 511\n        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));                       // 512\n        listenerByName.remove(name);                                                                                   // 513\n      }                                                                                                                // 514\n      if (listener) listeners.push(listenerByName.set(name, {                                                          // 515\n        on: listener                                                                                                   // 516\n      }));                                                                                                             // 517\n      return dispatch;                                                                                                 // 518\n    };                                                                                                                 // 519\n    return event;                                                                                                      // 520\n  }                                                                                                                    // 521\n  d3.event = null;                                                                                                     // 522\n  function d3_eventPreventDefault() {                                                                                  // 523\n    d3.event.preventDefault();                                                                                         // 524\n  }                                                                                                                    // 525\n  function d3_eventSource() {                                                                                          // 526\n    var e = d3.event, s;                                                                                               // 527\n    while (s = e.sourceEvent) e = s;                                                                                   // 528\n    return e;                                                                                                          // 529\n  }                                                                                                                    // 530\n  function d3_eventDispatch(target) {                                                                                  // 531\n    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;                                                     // 532\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);                                              // 533\n    dispatch.of = function(thiz, argumentz) {                                                                          // 534\n      return function(e1) {                                                                                            // 535\n        try {                                                                                                          // 536\n          var e0 = e1.sourceEvent = d3.event;                                                                          // 537\n          e1.target = target;                                                                                          // 538\n          d3.event = e1;                                                                                               // 539\n          dispatch[e1.type].apply(thiz, argumentz);                                                                    // 540\n        } finally {                                                                                                    // 541\n          d3.event = e0;                                                                                               // 542\n        }                                                                                                              // 543\n      };                                                                                                               // 544\n    };                                                                                                                 // 545\n    return dispatch;                                                                                                   // 546\n  }                                                                                                                    // 547\n  d3.requote = function(s) {                                                                                           // 548\n    return s.replace(d3_requote_re, \"\\\\$&\");                                                                           // 549\n  };                                                                                                                   // 550\n  var d3_requote_re = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;                                                               // 551\n  var d3_subclass = {}.__proto__ ? function(object, prototype) {                                                       // 552\n    object.__proto__ = prototype;                                                                                      // 553\n  } : function(object, prototype) {                                                                                    // 554\n    for (var property in prototype) object[property] = prototype[property];                                            // 555\n  };                                                                                                                   // 556\n  function d3_selection(groups) {                                                                                      // 557\n    d3_subclass(groups, d3_selectionPrototype);                                                                        // 558\n    return groups;                                                                                                     // 559\n  }                                                                                                                    // 560\n  var d3_select = function(s, n) {                                                                                     // 561\n    return n.querySelector(s);                                                                                         // 562\n  }, d3_selectAll = function(s, n) {                                                                                   // 563\n    return n.querySelectorAll(s);                                                                                      // 564\n  }, d3_selectMatches = function(n, s) {                                                                               // 565\n    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, \"matchesSelector\")];                                      // 566\n    d3_selectMatches = function(n, s) {                                                                                // 567\n      return d3_selectMatcher.call(n, s);                                                                              // 568\n    };                                                                                                                 // 569\n    return d3_selectMatches(n, s);                                                                                     // 570\n  };                                                                                                                   // 571\n  if (typeof Sizzle === \"function\") {                                                                                  // 572\n    d3_select = function(s, n) {                                                                                       // 573\n      return Sizzle(s, n)[0] || null;                                                                                  // 574\n    };                                                                                                                 // 575\n    d3_selectAll = Sizzle;                                                                                             // 576\n    d3_selectMatches = Sizzle.matchesSelector;                                                                         // 577\n  }                                                                                                                    // 578\n  d3.selection = function() {                                                                                          // 579\n    return d3.select(d3_document.documentElement);                                                                     // 580\n  };                                                                                                                   // 581\n  var d3_selectionPrototype = d3.selection.prototype = [];                                                             // 582\n  d3_selectionPrototype.select = function(selector) {                                                                  // 583\n    var subgroups = [], subgroup, subnode, group, node;                                                                // 584\n    selector = d3_selection_selector(selector);                                                                        // 585\n    for (var j = -1, m = this.length; ++j < m; ) {                                                                     // 586\n      subgroups.push(subgroup = []);                                                                                   // 587\n      subgroup.parentNode = (group = this[j]).parentNode;                                                              // 588\n      for (var i = -1, n = group.length; ++i < n; ) {                                                                  // 589\n        if (node = group[i]) {                                                                                         // 590\n          subgroup.push(subnode = selector.call(node, node.__data__, i, j));                                           // 591\n          if (subnode && \"__data__\" in node) subnode.__data__ = node.__data__;                                         // 592\n        } else {                                                                                                       // 593\n          subgroup.push(null);                                                                                         // 594\n        }                                                                                                              // 595\n      }                                                                                                                // 596\n    }                                                                                                                  // 597\n    return d3_selection(subgroups);                                                                                    // 598\n  };                                                                                                                   // 599\n  function d3_selection_selector(selector) {                                                                           // 600\n    return typeof selector === \"function\" ? selector : function() {                                                    // 601\n      return d3_select(selector, this);                                                                                // 602\n    };                                                                                                                 // 603\n  }                                                                                                                    // 604\n  d3_selectionPrototype.selectAll = function(selector) {                                                               // 605\n    var subgroups = [], subgroup, node;                                                                                // 606\n    selector = d3_selection_selectorAll(selector);                                                                     // 607\n    for (var j = -1, m = this.length; ++j < m; ) {                                                                     // 608\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {                                                 // 609\n        if (node = group[i]) {                                                                                         // 610\n          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));                               // 611\n          subgroup.parentNode = node;                                                                                  // 612\n        }                                                                                                              // 613\n      }                                                                                                                // 614\n    }                                                                                                                  // 615\n    return d3_selection(subgroups);                                                                                    // 616\n  };                                                                                                                   // 617\n  function d3_selection_selectorAll(selector) {                                                                        // 618\n    return typeof selector === \"function\" ? selector : function() {                                                    // 619\n      return d3_selectAll(selector, this);                                                                             // 620\n    };                                                                                                                 // 621\n  }                                                                                                                    // 622\n  var d3_nsPrefix = {                                                                                                  // 623\n    svg: \"http://www.w3.org/2000/svg\",                                                                                 // 624\n    xhtml: \"http://www.w3.org/1999/xhtml\",                                                                             // 625\n    xlink: \"http://www.w3.org/1999/xlink\",                                                                             // 626\n    xml: \"http://www.w3.org/XML/1998/namespace\",                                                                       // 627\n    xmlns: \"http://www.w3.org/2000/xmlns/\"                                                                             // 628\n  };                                                                                                                   // 629\n  d3.ns = {                                                                                                            // 630\n    prefix: d3_nsPrefix,                                                                                               // 631\n    qualify: function(name) {                                                                                          // 632\n      var i = name.indexOf(\":\"), prefix = name;                                                                        // 633\n      if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);                                 // 634\n      return d3_nsPrefix.hasOwnProperty(prefix) ? {                                                                    // 635\n        space: d3_nsPrefix[prefix],                                                                                    // 636\n        local: name                                                                                                    // 637\n      } : name;                                                                                                        // 638\n    }                                                                                                                  // 639\n  };                                                                                                                   // 640\n  d3_selectionPrototype.attr = function(name, value) {                                                                 // 641\n    if (arguments.length < 2) {                                                                                        // 642\n      if (typeof name === \"string\") {                                                                                  // 643\n        var node = this.node();                                                                                        // 644\n        name = d3.ns.qualify(name);                                                                                    // 645\n        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);                     // 646\n      }                                                                                                                // 647\n      for (value in name) this.each(d3_selection_attr(value, name[value]));                                            // 648\n      return this;                                                                                                     // 649\n    }                                                                                                                  // 650\n    return this.each(d3_selection_attr(name, value));                                                                  // 651\n  };                                                                                                                   // 652\n  function d3_selection_attr(name, value) {                                                                            // 653\n    name = d3.ns.qualify(name);                                                                                        // 654\n    function attrNull() {                                                                                              // 655\n      this.removeAttribute(name);                                                                                      // 656\n    }                                                                                                                  // 657\n    function attrNullNS() {                                                                                            // 658\n      this.removeAttributeNS(name.space, name.local);                                                                  // 659\n    }                                                                                                                  // 660\n    function attrConstant() {                                                                                          // 661\n      this.setAttribute(name, value);                                                                                  // 662\n    }                                                                                                                  // 663\n    function attrConstantNS() {                                                                                        // 664\n      this.setAttributeNS(name.space, name.local, value);                                                              // 665\n    }                                                                                                                  // 666\n    function attrFunction() {                                                                                          // 667\n      var x = value.apply(this, arguments);                                                                            // 668\n      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);                                      // 669\n    }                                                                                                                  // 670\n    function attrFunctionNS() {                                                                                        // 671\n      var x = value.apply(this, arguments);                                                                            // 672\n      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);\n    }                                                                                                                  // 674\n    return value == null ? name.local ? attrNullNS : attrNull : typeof value === \"function\" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;\n  }                                                                                                                    // 676\n  function d3_collapse(s) {                                                                                            // 677\n    return s.trim().replace(/\\s+/g, \" \");                                                                              // 678\n  }                                                                                                                    // 679\n  d3_selectionPrototype.classed = function(name, value) {                                                              // 680\n    if (arguments.length < 2) {                                                                                        // 681\n      if (typeof name === \"string\") {                                                                                  // 682\n        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;                                // 683\n        if (value = node.classList) {                                                                                  // 684\n          while (++i < n) if (!value.contains(name[i])) return false;                                                  // 685\n        } else {                                                                                                       // 686\n          value = node.getAttribute(\"class\");                                                                          // 687\n          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;                              // 688\n        }                                                                                                              // 689\n        return true;                                                                                                   // 690\n      }                                                                                                                // 691\n      for (value in name) this.each(d3_selection_classed(value, name[value]));                                         // 692\n      return this;                                                                                                     // 693\n    }                                                                                                                  // 694\n    return this.each(d3_selection_classed(name, value));                                                               // 695\n  };                                                                                                                   // 696\n  function d3_selection_classedRe(name) {                                                                              // 697\n    return new RegExp(\"(?:^|\\\\s+)\" + d3.requote(name) + \"(?:\\\\s+|$)\", \"g\");                                            // 698\n  }                                                                                                                    // 699\n  function d3_selection_classes(name) {                                                                                // 700\n    return (name + \"\").trim().split(/^|\\s+/);                                                                          // 701\n  }                                                                                                                    // 702\n  function d3_selection_classed(name, value) {                                                                         // 703\n    name = d3_selection_classes(name).map(d3_selection_classedName);                                                   // 704\n    var n = name.length;                                                                                               // 705\n    function classedConstant() {                                                                                       // 706\n      var i = -1;                                                                                                      // 707\n      while (++i < n) name[i](this, value);                                                                            // 708\n    }                                                                                                                  // 709\n    function classedFunction() {                                                                                       // 710\n      var i = -1, x = value.apply(this, arguments);                                                                    // 711\n      while (++i < n) name[i](this, x);                                                                                // 712\n    }                                                                                                                  // 713\n    return typeof value === \"function\" ? classedFunction : classedConstant;                                            // 714\n  }                                                                                                                    // 715\n  function d3_selection_classedName(name) {                                                                            // 716\n    var re = d3_selection_classedRe(name);                                                                             // 717\n    return function(node, value) {                                                                                     // 718\n      if (c = node.classList) return value ? c.add(name) : c.remove(name);                                             // 719\n      var c = node.getAttribute(\"class\") || \"\";                                                                        // 720\n      if (value) {                                                                                                     // 721\n        re.lastIndex = 0;                                                                                              // 722\n        if (!re.test(c)) node.setAttribute(\"class\", d3_collapse(c + \" \" + name));                                      // 723\n      } else {                                                                                                         // 724\n        node.setAttribute(\"class\", d3_collapse(c.replace(re, \" \")));                                                   // 725\n      }                                                                                                                // 726\n    };                                                                                                                 // 727\n  }                                                                                                                    // 728\n  d3_selectionPrototype.style = function(name, value, priority) {                                                      // 729\n    var n = arguments.length;                                                                                          // 730\n    if (n < 3) {                                                                                                       // 731\n      if (typeof name !== \"string\") {                                                                                  // 732\n        if (n < 2) value = \"\";                                                                                         // 733\n        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));                         // 734\n        return this;                                                                                                   // 735\n      }                                                                                                                // 736\n      if (n < 2) {                                                                                                     // 737\n        var node = this.node();                                                                                        // 738\n        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);                                    // 739\n      }                                                                                                                // 740\n      priority = \"\";                                                                                                   // 741\n    }                                                                                                                  // 742\n    return this.each(d3_selection_style(name, value, priority));                                                       // 743\n  };                                                                                                                   // 744\n  function d3_selection_style(name, value, priority) {                                                                 // 745\n    function styleNull() {                                                                                             // 746\n      this.style.removeProperty(name);                                                                                 // 747\n    }                                                                                                                  // 748\n    function styleConstant() {                                                                                         // 749\n      this.style.setProperty(name, value, priority);                                                                   // 750\n    }                                                                                                                  // 751\n    function styleFunction() {                                                                                         // 752\n      var x = value.apply(this, arguments);                                                                            // 753\n      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);                  // 754\n    }                                                                                                                  // 755\n    return value == null ? styleNull : typeof value === \"function\" ? styleFunction : styleConstant;                    // 756\n  }                                                                                                                    // 757\n  d3_selectionPrototype.property = function(name, value) {                                                             // 758\n    if (arguments.length < 2) {                                                                                        // 759\n      if (typeof name === \"string\") return this.node()[name];                                                          // 760\n      for (value in name) this.each(d3_selection_property(value, name[value]));                                        // 761\n      return this;                                                                                                     // 762\n    }                                                                                                                  // 763\n    return this.each(d3_selection_property(name, value));                                                              // 764\n  };                                                                                                                   // 765\n  function d3_selection_property(name, value) {                                                                        // 766\n    function propertyNull() {                                                                                          // 767\n      delete this[name];                                                                                               // 768\n    }                                                                                                                  // 769\n    function propertyConstant() {                                                                                      // 770\n      this[name] = value;                                                                                              // 771\n    }                                                                                                                  // 772\n    function propertyFunction() {                                                                                      // 773\n      var x = value.apply(this, arguments);                                                                            // 774\n      if (x == null) delete this[name]; else this[name] = x;                                                           // 775\n    }                                                                                                                  // 776\n    return value == null ? propertyNull : typeof value === \"function\" ? propertyFunction : propertyConstant;           // 777\n  }                                                                                                                    // 778\n  d3_selectionPrototype.text = function(value) {                                                                       // 779\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {                                     // 780\n      var v = value.apply(this, arguments);                                                                            // 781\n      this.textContent = v == null ? \"\" : v;                                                                           // 782\n    } : value == null ? function() {                                                                                   // 783\n      this.textContent = \"\";                                                                                           // 784\n    } : function() {                                                                                                   // 785\n      this.textContent = value;                                                                                        // 786\n    }) : this.node().textContent;                                                                                      // 787\n  };                                                                                                                   // 788\n  d3_selectionPrototype.html = function(value) {                                                                       // 789\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {                                     // 790\n      var v = value.apply(this, arguments);                                                                            // 791\n      this.innerHTML = v == null ? \"\" : v;                                                                             // 792\n    } : value == null ? function() {                                                                                   // 793\n      this.innerHTML = \"\";                                                                                             // 794\n    } : function() {                                                                                                   // 795\n      this.innerHTML = value;                                                                                          // 796\n    }) : this.node().innerHTML;                                                                                        // 797\n  };                                                                                                                   // 798\n  d3_selectionPrototype.append = function(name) {                                                                      // 799\n    name = d3_selection_creator(name);                                                                                 // 800\n    return this.select(function() {                                                                                    // 801\n      return this.appendChild(name.apply(this, arguments));                                                            // 802\n    });                                                                                                                // 803\n  };                                                                                                                   // 804\n  function d3_selection_creator(name) {                                                                                // 805\n    function create() {                                                                                                // 806\n      var document = this.ownerDocument, namespace = this.namespaceURI;                                                // 807\n      return namespace ? document.createElementNS(namespace, name) : document.createElement(name);                     // 808\n    }                                                                                                                  // 809\n    function createNS() {                                                                                              // 810\n      return this.ownerDocument.createElementNS(name.space, name.local);                                               // 811\n    }                                                                                                                  // 812\n    return typeof name === \"function\" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;                 // 813\n  }                                                                                                                    // 814\n  d3_selectionPrototype.insert = function(name, before) {                                                              // 815\n    name = d3_selection_creator(name);                                                                                 // 816\n    before = d3_selection_selector(before);                                                                            // 817\n    return this.select(function() {                                                                                    // 818\n      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);                    // 819\n    });                                                                                                                // 820\n  };                                                                                                                   // 821\n  d3_selectionPrototype.remove = function() {                                                                          // 822\n    return this.each(d3_selectionRemove);                                                                              // 823\n  };                                                                                                                   // 824\n  function d3_selectionRemove() {                                                                                      // 825\n    var parent = this.parentNode;                                                                                      // 826\n    if (parent) parent.removeChild(this);                                                                              // 827\n  }                                                                                                                    // 828\n  d3_selectionPrototype.data = function(value, key) {                                                                  // 829\n    var i = -1, n = this.length, group, node;                                                                          // 830\n    if (!arguments.length) {                                                                                           // 831\n      value = new Array(n = (group = this[0]).length);                                                                 // 832\n      while (++i < n) {                                                                                                // 833\n        if (node = group[i]) {                                                                                         // 834\n          value[i] = node.__data__;                                                                                    // 835\n        }                                                                                                              // 836\n      }                                                                                                                // 837\n      return value;                                                                                                    // 838\n    }                                                                                                                  // 839\n    function bind(group, groupData) {                                                                                  // 840\n      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;\n      if (key) {                                                                                                       // 842\n        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;                                         // 843\n        for (i = -1; ++i < n; ) {                                                                                      // 844\n          if (node = group[i]) {                                                                                       // 845\n            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {                                     // 846\n              exitNodes[i] = node;                                                                                     // 847\n            } else {                                                                                                   // 848\n              nodeByKeyValue.set(keyValue, node);                                                                      // 849\n            }                                                                                                          // 850\n            keyValues[i] = keyValue;                                                                                   // 851\n          }                                                                                                            // 852\n        }                                                                                                              // 853\n        for (i = -1; ++i < m; ) {                                                                                      // 854\n          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {              // 855\n            enterNodes[i] = d3_selection_dataNode(nodeData);                                                           // 856\n          } else if (node !== true) {                                                                                  // 857\n            updateNodes[i] = node;                                                                                     // 858\n            node.__data__ = nodeData;                                                                                  // 859\n          }                                                                                                            // 860\n          nodeByKeyValue.set(keyValue, true);                                                                          // 861\n        }                                                                                                              // 862\n        for (i = -1; ++i < n; ) {                                                                                      // 863\n          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {                                           // 864\n            exitNodes[i] = group[i];                                                                                   // 865\n          }                                                                                                            // 866\n        }                                                                                                              // 867\n      } else {                                                                                                         // 868\n        for (i = -1; ++i < n0; ) {                                                                                     // 869\n          node = group[i];                                                                                             // 870\n          nodeData = groupData[i];                                                                                     // 871\n          if (node) {                                                                                                  // 872\n            node.__data__ = nodeData;                                                                                  // 873\n            updateNodes[i] = node;                                                                                     // 874\n          } else {                                                                                                     // 875\n            enterNodes[i] = d3_selection_dataNode(nodeData);                                                           // 876\n          }                                                                                                            // 877\n        }                                                                                                              // 878\n        for (;i < m; ++i) {                                                                                            // 879\n          enterNodes[i] = d3_selection_dataNode(groupData[i]);                                                         // 880\n        }                                                                                                              // 881\n        for (;i < n; ++i) {                                                                                            // 882\n          exitNodes[i] = group[i];                                                                                     // 883\n        }                                                                                                              // 884\n      }                                                                                                                // 885\n      enterNodes.update = updateNodes;                                                                                 // 886\n      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;                        // 887\n      enter.push(enterNodes);                                                                                          // 888\n      update.push(updateNodes);                                                                                        // 889\n      exit.push(exitNodes);                                                                                            // 890\n    }                                                                                                                  // 891\n    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);                            // 892\n    if (typeof value === \"function\") {                                                                                 // 893\n      while (++i < n) {                                                                                                // 894\n        bind(group = this[i], value.call(group, group.parentNode.__data__, i));                                        // 895\n      }                                                                                                                // 896\n    } else {                                                                                                           // 897\n      while (++i < n) {                                                                                                // 898\n        bind(group = this[i], value);                                                                                  // 899\n      }                                                                                                                // 900\n    }                                                                                                                  // 901\n    update.enter = function() {                                                                                        // 902\n      return enter;                                                                                                    // 903\n    };                                                                                                                 // 904\n    update.exit = function() {                                                                                         // 905\n      return exit;                                                                                                     // 906\n    };                                                                                                                 // 907\n    return update;                                                                                                     // 908\n  };                                                                                                                   // 909\n  function d3_selection_dataNode(data) {                                                                               // 910\n    return {                                                                                                           // 911\n      __data__: data                                                                                                   // 912\n    };                                                                                                                 // 913\n  }                                                                                                                    // 914\n  d3_selectionPrototype.datum = function(value) {                                                                      // 915\n    return arguments.length ? this.property(\"__data__\", value) : this.property(\"__data__\");                            // 916\n  };                                                                                                                   // 917\n  d3_selectionPrototype.filter = function(filter) {                                                                    // 918\n    var subgroups = [], subgroup, group, node;                                                                         // 919\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);                                            // 920\n    for (var j = 0, m = this.length; j < m; j++) {                                                                     // 921\n      subgroups.push(subgroup = []);                                                                                   // 922\n      subgroup.parentNode = (group = this[j]).parentNode;                                                              // 923\n      for (var i = 0, n = group.length; i < n; i++) {                                                                  // 924\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {                                             // 925\n          subgroup.push(node);                                                                                         // 926\n        }                                                                                                              // 927\n      }                                                                                                                // 928\n    }                                                                                                                  // 929\n    return d3_selection(subgroups);                                                                                    // 930\n  };                                                                                                                   // 931\n  function d3_selection_filter(selector) {                                                                             // 932\n    return function() {                                                                                                // 933\n      return d3_selectMatches(this, selector);                                                                         // 934\n    };                                                                                                                 // 935\n  }                                                                                                                    // 936\n  d3_selectionPrototype.order = function() {                                                                           // 937\n    for (var j = -1, m = this.length; ++j < m; ) {                                                                     // 938\n      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {                             // 939\n        if (node = group[i]) {                                                                                         // 940\n          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);                             // 941\n          next = node;                                                                                                 // 942\n        }                                                                                                              // 943\n      }                                                                                                                // 944\n    }                                                                                                                  // 945\n    return this;                                                                                                       // 946\n  };                                                                                                                   // 947\n  d3_selectionPrototype.sort = function(comparator) {                                                                  // 948\n    comparator = d3_selection_sortComparator.apply(this, arguments);                                                   // 949\n    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);                                             // 950\n    return this.order();                                                                                               // 951\n  };                                                                                                                   // 952\n  function d3_selection_sortComparator(comparator) {                                                                   // 953\n    if (!arguments.length) comparator = d3_ascending;                                                                  // 954\n    return function(a, b) {                                                                                            // 955\n      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;                                                    // 956\n    };                                                                                                                 // 957\n  }                                                                                                                    // 958\n  d3_selectionPrototype.each = function(callback) {                                                                    // 959\n    return d3_selection_each(this, function(node, i, j) {                                                              // 960\n      callback.call(node, node.__data__, i, j);                                                                        // 961\n    });                                                                                                                // 962\n  };                                                                                                                   // 963\n  function d3_selection_each(groups, callback) {                                                                       // 964\n    for (var j = 0, m = groups.length; j < m; j++) {                                                                   // 965\n      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {                                         // 966\n        if (node = group[i]) callback(node, i, j);                                                                     // 967\n      }                                                                                                                // 968\n    }                                                                                                                  // 969\n    return groups;                                                                                                     // 970\n  }                                                                                                                    // 971\n  d3_selectionPrototype.call = function(callback) {                                                                    // 972\n    var args = d3_array(arguments);                                                                                    // 973\n    callback.apply(args[0] = this, args);                                                                              // 974\n    return this;                                                                                                       // 975\n  };                                                                                                                   // 976\n  d3_selectionPrototype.empty = function() {                                                                           // 977\n    return !this.node();                                                                                               // 978\n  };                                                                                                                   // 979\n  d3_selectionPrototype.node = function() {                                                                            // 980\n    for (var j = 0, m = this.length; j < m; j++) {                                                                     // 981\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {                                                 // 982\n        var node = group[i];                                                                                           // 983\n        if (node) return node;                                                                                         // 984\n      }                                                                                                                // 985\n    }                                                                                                                  // 986\n    return null;                                                                                                       // 987\n  };                                                                                                                   // 988\n  d3_selectionPrototype.size = function() {                                                                            // 989\n    var n = 0;                                                                                                         // 990\n    d3_selection_each(this, function() {                                                                               // 991\n      ++n;                                                                                                             // 992\n    });                                                                                                                // 993\n    return n;                                                                                                          // 994\n  };                                                                                                                   // 995\n  function d3_selection_enter(selection) {                                                                             // 996\n    d3_subclass(selection, d3_selection_enterPrototype);                                                               // 997\n    return selection;                                                                                                  // 998\n  }                                                                                                                    // 999\n  var d3_selection_enterPrototype = [];                                                                                // 1000\n  d3.selection.enter = d3_selection_enter;                                                                             // 1001\n  d3.selection.enter.prototype = d3_selection_enterPrototype;                                                          // 1002\n  d3_selection_enterPrototype.append = d3_selectionPrototype.append;                                                   // 1003\n  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;                                                     // 1004\n  d3_selection_enterPrototype.node = d3_selectionPrototype.node;                                                       // 1005\n  d3_selection_enterPrototype.call = d3_selectionPrototype.call;                                                       // 1006\n  d3_selection_enterPrototype.size = d3_selectionPrototype.size;                                                       // 1007\n  d3_selection_enterPrototype.select = function(selector) {                                                            // 1008\n    var subgroups = [], subgroup, subnode, upgroup, group, node;                                                       // 1009\n    for (var j = -1, m = this.length; ++j < m; ) {                                                                     // 1010\n      upgroup = (group = this[j]).update;                                                                              // 1011\n      subgroups.push(subgroup = []);                                                                                   // 1012\n      subgroup.parentNode = group.parentNode;                                                                          // 1013\n      for (var i = -1, n = group.length; ++i < n; ) {                                                                  // 1014\n        if (node = group[i]) {                                                                                         // 1015\n          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));                  // 1016\n          subnode.__data__ = node.__data__;                                                                            // 1017\n        } else {                                                                                                       // 1018\n          subgroup.push(null);                                                                                         // 1019\n        }                                                                                                              // 1020\n      }                                                                                                                // 1021\n    }                                                                                                                  // 1022\n    return d3_selection(subgroups);                                                                                    // 1023\n  };                                                                                                                   // 1024\n  d3_selection_enterPrototype.insert = function(name, before) {                                                        // 1025\n    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);                                           // 1026\n    return d3_selectionPrototype.insert.call(this, name, before);                                                      // 1027\n  };                                                                                                                   // 1028\n  function d3_selection_enterInsertBefore(enter) {                                                                     // 1029\n    var i0, j0;                                                                                                        // 1030\n    return function(d, i, j) {                                                                                         // 1031\n      var group = enter[j].update, n = group.length, node;                                                             // 1032\n      if (j != j0) j0 = j, i0 = 0;                                                                                     // 1033\n      if (i >= i0) i0 = i + 1;                                                                                         // 1034\n      while (!(node = group[i0]) && ++i0 < n) ;                                                                        // 1035\n      return node;                                                                                                     // 1036\n    };                                                                                                                 // 1037\n  }                                                                                                                    // 1038\n  d3.select = function(node) {                                                                                         // 1039\n    var group;                                                                                                         // 1040\n    if (typeof node === \"string\") {                                                                                    // 1041\n      group = [ d3_select(node, d3_document) ];                                                                        // 1042\n      group.parentNode = d3_document.documentElement;                                                                  // 1043\n    } else {                                                                                                           // 1044\n      group = [ node ];                                                                                                // 1045\n      group.parentNode = d3_documentElement(node);                                                                     // 1046\n    }                                                                                                                  // 1047\n    return d3_selection([ group ]);                                                                                    // 1048\n  };                                                                                                                   // 1049\n  d3.selectAll = function(nodes) {                                                                                     // 1050\n    var group;                                                                                                         // 1051\n    if (typeof nodes === \"string\") {                                                                                   // 1052\n      group = d3_array(d3_selectAll(nodes, d3_document));                                                              // 1053\n      group.parentNode = d3_document.documentElement;                                                                  // 1054\n    } else {                                                                                                           // 1055\n      group = d3_array(nodes);                                                                                         // 1056\n      group.parentNode = null;                                                                                         // 1057\n    }                                                                                                                  // 1058\n    return d3_selection([ group ]);                                                                                    // 1059\n  };                                                                                                                   // 1060\n  d3_selectionPrototype.on = function(type, listener, capture) {                                                       // 1061\n    var n = arguments.length;                                                                                          // 1062\n    if (n < 3) {                                                                                                       // 1063\n      if (typeof type !== \"string\") {                                                                                  // 1064\n        if (n < 2) listener = false;                                                                                   // 1065\n        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));                            // 1066\n        return this;                                                                                                   // 1067\n      }                                                                                                                // 1068\n      if (n < 2) return (n = this.node()[\"__on\" + type]) && n._;                                                       // 1069\n      capture = false;                                                                                                 // 1070\n    }                                                                                                                  // 1071\n    return this.each(d3_selection_on(type, listener, capture));                                                        // 1072\n  };                                                                                                                   // 1073\n  function d3_selection_on(type, listener, capture) {                                                                  // 1074\n    var name = \"__on\" + type, i = type.indexOf(\".\"), wrap = d3_selection_onListener;                                   // 1075\n    if (i > 0) type = type.slice(0, i);                                                                                // 1076\n    var filter = d3_selection_onFilters.get(type);                                                                     // 1077\n    if (filter) type = filter, wrap = d3_selection_onFilter;                                                           // 1078\n    function onRemove() {                                                                                              // 1079\n      var l = this[name];                                                                                              // 1080\n      if (l) {                                                                                                         // 1081\n        this.removeEventListener(type, l, l.$);                                                                        // 1082\n        delete this[name];                                                                                             // 1083\n      }                                                                                                                // 1084\n    }                                                                                                                  // 1085\n    function onAdd() {                                                                                                 // 1086\n      var l = wrap(listener, d3_array(arguments));                                                                     // 1087\n      onRemove.call(this);                                                                                             // 1088\n      this.addEventListener(type, this[name] = l, l.$ = capture);                                                      // 1089\n      l._ = listener;                                                                                                  // 1090\n    }                                                                                                                  // 1091\n    function removeAll() {                                                                                             // 1092\n      var re = new RegExp(\"^__on([^.]+)\" + d3.requote(type) + \"$\"), match;                                             // 1093\n      for (var name in this) {                                                                                         // 1094\n        if (match = name.match(re)) {                                                                                  // 1095\n          var l = this[name];                                                                                          // 1096\n          this.removeEventListener(match[1], l, l.$);                                                                  // 1097\n          delete this[name];                                                                                           // 1098\n        }                                                                                                              // 1099\n      }                                                                                                                // 1100\n    }                                                                                                                  // 1101\n    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;                                           // 1102\n  }                                                                                                                    // 1103\n  var d3_selection_onFilters = d3.map({                                                                                // 1104\n    mouseenter: \"mouseover\",                                                                                           // 1105\n    mouseleave: \"mouseout\"                                                                                             // 1106\n  });                                                                                                                  // 1107\n  if (d3_document) {                                                                                                   // 1108\n    d3_selection_onFilters.forEach(function(k) {                                                                       // 1109\n      if (\"on\" + k in d3_document) d3_selection_onFilters.remove(k);                                                   // 1110\n    });                                                                                                                // 1111\n  }                                                                                                                    // 1112\n  function d3_selection_onListener(listener, argumentz) {                                                              // 1113\n    return function(e) {                                                                                               // 1114\n      var o = d3.event;                                                                                                // 1115\n      d3.event = e;                                                                                                    // 1116\n      argumentz[0] = this.__data__;                                                                                    // 1117\n      try {                                                                                                            // 1118\n        listener.apply(this, argumentz);                                                                               // 1119\n      } finally {                                                                                                      // 1120\n        d3.event = o;                                                                                                  // 1121\n      }                                                                                                                // 1122\n    };                                                                                                                 // 1123\n  }                                                                                                                    // 1124\n  function d3_selection_onFilter(listener, argumentz) {                                                                // 1125\n    var l = d3_selection_onListener(listener, argumentz);                                                              // 1126\n    return function(e) {                                                                                               // 1127\n      var target = this, related = e.relatedTarget;                                                                    // 1128\n      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {                          // 1129\n        l.call(target, e);                                                                                             // 1130\n      }                                                                                                                // 1131\n    };                                                                                                                 // 1132\n  }                                                                                                                    // 1133\n  var d3_event_dragSelect, d3_event_dragId = 0;                                                                        // 1134\n  function d3_event_dragSuppress(node) {                                                                               // 1135\n    var name = \".dragsuppress-\" + ++d3_event_dragId, click = \"click\" + name, w = d3.select(d3_window(node)).on(\"touchmove\" + name, d3_eventPreventDefault).on(\"dragstart\" + name, d3_eventPreventDefault).on(\"selectstart\" + name, d3_eventPreventDefault);\n    if (d3_event_dragSelect == null) {                                                                                 // 1137\n      d3_event_dragSelect = \"onselectstart\" in node ? false : d3_vendorSymbol(node.style, \"userSelect\");               // 1138\n    }                                                                                                                  // 1139\n    if (d3_event_dragSelect) {                                                                                         // 1140\n      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];                                 // 1141\n      style[d3_event_dragSelect] = \"none\";                                                                             // 1142\n    }                                                                                                                  // 1143\n    return function(suppressClick) {                                                                                   // 1144\n      w.on(name, null);                                                                                                // 1145\n      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;                                                    // 1146\n      if (suppressClick) {                                                                                             // 1147\n        var off = function() {                                                                                         // 1148\n          w.on(click, null);                                                                                           // 1149\n        };                                                                                                             // 1150\n        w.on(click, function() {                                                                                       // 1151\n          d3_eventPreventDefault();                                                                                    // 1152\n          off();                                                                                                       // 1153\n        }, true);                                                                                                      // 1154\n        setTimeout(off, 0);                                                                                            // 1155\n      }                                                                                                                // 1156\n    };                                                                                                                 // 1157\n  }                                                                                                                    // 1158\n  d3.mouse = function(container) {                                                                                     // 1159\n    return d3_mousePoint(container, d3_eventSource());                                                                 // 1160\n  };                                                                                                                   // 1161\n  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;                          // 1162\n  function d3_mousePoint(container, e) {                                                                               // 1163\n    if (e.changedTouches) e = e.changedTouches[0];                                                                     // 1164\n    var svg = container.ownerSVGElement || container;                                                                  // 1165\n    if (svg.createSVGPoint) {                                                                                          // 1166\n      var point = svg.createSVGPoint();                                                                                // 1167\n      if (d3_mouse_bug44083 < 0) {                                                                                     // 1168\n        var window = d3_window(container);                                                                             // 1169\n        if (window.scrollX || window.scrollY) {                                                                        // 1170\n          svg = d3.select(\"body\").append(\"svg\").style({                                                                // 1171\n            position: \"absolute\",                                                                                      // 1172\n            top: 0,                                                                                                    // 1173\n            left: 0,                                                                                                   // 1174\n            margin: 0,                                                                                                 // 1175\n            padding: 0,                                                                                                // 1176\n            border: \"none\"                                                                                             // 1177\n          }, \"important\");                                                                                             // 1178\n          var ctm = svg[0][0].getScreenCTM();                                                                          // 1179\n          d3_mouse_bug44083 = !(ctm.f || ctm.e);                                                                       // 1180\n          svg.remove();                                                                                                // 1181\n        }                                                                                                              // 1182\n      }                                                                                                                // 1183\n      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX,                           // 1184\n      point.y = e.clientY;                                                                                             // 1185\n      point = point.matrixTransform(container.getScreenCTM().inverse());                                               // 1186\n      return [ point.x, point.y ];                                                                                     // 1187\n    }                                                                                                                  // 1188\n    var rect = container.getBoundingClientRect();                                                                      // 1189\n    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];               // 1190\n  }                                                                                                                    // 1191\n  d3.touch = function(container, touches, identifier) {                                                                // 1192\n    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;                         // 1193\n    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {                                              // 1194\n      if ((touch = touches[i]).identifier === identifier) {                                                            // 1195\n        return d3_mousePoint(container, touch);                                                                        // 1196\n      }                                                                                                                // 1197\n    }                                                                                                                  // 1198\n  };                                                                                                                   // 1199\n  d3.behavior.drag = function() {                                                                                      // 1200\n    var event = d3_eventDispatch(drag, \"drag\", \"dragstart\", \"dragend\"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, \"mousemove\", \"mouseup\"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, \"touchmove\", \"touchend\");\n    function drag() {                                                                                                  // 1202\n      this.on(\"mousedown.drag\", mousedown).on(\"touchstart.drag\", touchstart);                                          // 1203\n    }                                                                                                                  // 1204\n    function dragstart(id, position, subject, move, end) {                                                             // 1205\n      return function() {                                                                                              // 1206\n        var that = this, target = d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = \".drag\" + (dragId == null ? \"\" : \"-\" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);\n        if (origin) {                                                                                                  // 1208\n          dragOffset = origin.apply(that, arguments);                                                                  // 1209\n          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];                                   // 1210\n        } else {                                                                                                       // 1211\n          dragOffset = [ 0, 0 ];                                                                                       // 1212\n        }                                                                                                              // 1213\n        dispatch({                                                                                                     // 1214\n          type: \"dragstart\"                                                                                            // 1215\n        });                                                                                                            // 1216\n        function moved() {                                                                                             // 1217\n          var position1 = position(parent, dragId), dx, dy;                                                            // 1218\n          if (!position1) return;                                                                                      // 1219\n          dx = position1[0] - position0[0];                                                                            // 1220\n          dy = position1[1] - position0[1];                                                                            // 1221\n          dragged |= dx | dy;                                                                                          // 1222\n          position0 = position1;                                                                                       // 1223\n          dispatch({                                                                                                   // 1224\n            type: \"drag\",                                                                                              // 1225\n            x: position1[0] + dragOffset[0],                                                                           // 1226\n            y: position1[1] + dragOffset[1],                                                                           // 1227\n            dx: dx,                                                                                                    // 1228\n            dy: dy                                                                                                     // 1229\n          });                                                                                                          // 1230\n        }                                                                                                              // 1231\n        function ended() {                                                                                             // 1232\n          if (!position(parent, dragId)) return;                                                                       // 1233\n          dragSubject.on(move + dragName, null).on(end + dragName, null);                                              // 1234\n          dragRestore(dragged && d3.event.target === target);                                                          // 1235\n          dispatch({                                                                                                   // 1236\n            type: \"dragend\"                                                                                            // 1237\n          });                                                                                                          // 1238\n        }                                                                                                              // 1239\n      };                                                                                                               // 1240\n    }                                                                                                                  // 1241\n    drag.origin = function(x) {                                                                                        // 1242\n      if (!arguments.length) return origin;                                                                            // 1243\n      origin = x;                                                                                                      // 1244\n      return drag;                                                                                                     // 1245\n    };                                                                                                                 // 1246\n    return d3.rebind(drag, event, \"on\");                                                                               // 1247\n  };                                                                                                                   // 1248\n  function d3_behavior_dragTouchId() {                                                                                 // 1249\n    return d3.event.changedTouches[0].identifier;                                                                      // 1250\n  }                                                                                                                    // 1251\n  d3.touches = function(container, touches) {                                                                          // 1252\n    if (arguments.length < 2) touches = d3_eventSource().touches;                                                      // 1253\n    return touches ? d3_array(touches).map(function(touch) {                                                           // 1254\n      var point = d3_mousePoint(container, touch);                                                                     // 1255\n      point.identifier = touch.identifier;                                                                             // 1256\n      return point;                                                                                                    // 1257\n    }) : [];                                                                                                           // 1258\n  };                                                                                                                   // 1259\n  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;\n  function d3_sgn(x) {                                                                                                 // 1261\n    return x > 0 ? 1 : x < 0 ? -1 : 0;                                                                                 // 1262\n  }                                                                                                                    // 1263\n  function d3_cross2d(a, b, c) {                                                                                       // 1264\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);                                              // 1265\n  }                                                                                                                    // 1266\n  function d3_acos(x) {                                                                                                // 1267\n    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);                                                                      // 1268\n  }                                                                                                                    // 1269\n  function d3_asin(x) {                                                                                                // 1270\n    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);                                                             // 1271\n  }                                                                                                                    // 1272\n  function d3_sinh(x) {                                                                                                // 1273\n    return ((x = Math.exp(x)) - 1 / x) / 2;                                                                            // 1274\n  }                                                                                                                    // 1275\n  function d3_cosh(x) {                                                                                                // 1276\n    return ((x = Math.exp(x)) + 1 / x) / 2;                                                                            // 1277\n  }                                                                                                                    // 1278\n  function d3_tanh(x) {                                                                                                // 1279\n    return ((x = Math.exp(2 * x)) - 1) / (x + 1);                                                                      // 1280\n  }                                                                                                                    // 1281\n  function d3_haversin(x) {                                                                                            // 1282\n    return (x = Math.sin(x / 2)) * x;                                                                                  // 1283\n  }                                                                                                                    // 1284\n  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;                                                                                  // 1285\n  d3.interpolateZoom = function(p0, p1) {                                                                              // 1286\n    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;\n    if (d2 < ε2) {                                                                                                     // 1288\n      S = Math.log(w1 / w0) / ρ;                                                                                       // 1289\n      i = function(t) {                                                                                                // 1290\n        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];                                               // 1291\n      };                                                                                                               // 1292\n    } else {                                                                                                           // 1293\n      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n      S = (r1 - r0) / ρ;                                                                                               // 1295\n      i = function(t) {                                                                                                // 1296\n        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));        // 1297\n        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];                                      // 1298\n      };                                                                                                               // 1299\n    }                                                                                                                  // 1300\n    i.duration = S * 1e3;                                                                                              // 1301\n    return i;                                                                                                          // 1302\n  };                                                                                                                   // 1303\n  d3.behavior.zoom = function() {                                                                                      // 1304\n    var view = {                                                                                                       // 1305\n      x: 0,                                                                                                            // 1306\n      y: 0,                                                                                                            // 1307\n      k: 1                                                                                                             // 1308\n    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = \"mousedown.zoom\", mousemove = \"mousemove.zoom\", mouseup = \"mouseup.zoom\", mousewheelTimer, touchstart = \"touchstart.zoom\", touchtime, event = d3_eventDispatch(zoom, \"zoomstart\", \"zoom\", \"zoomend\"), x0, x1, y0, y1;\n    if (!d3_behavior_zoomWheel) {                                                                                      // 1310\n      d3_behavior_zoomWheel = \"onwheel\" in d3_document ? (d3_behavior_zoomDelta = function() {                         // 1311\n        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);                                                      // 1312\n      }, \"wheel\") : \"onmousewheel\" in d3_document ? (d3_behavior_zoomDelta = function() {                              // 1313\n        return d3.event.wheelDelta;                                                                                    // 1314\n      }, \"mousewheel\") : (d3_behavior_zoomDelta = function() {                                                         // 1315\n        return -d3.event.detail;                                                                                       // 1316\n      }, \"MozMousePixelScroll\");                                                                                       // 1317\n    }                                                                                                                  // 1318\n    function zoom(g) {                                                                                                 // 1319\n      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + \".zoom\", mousewheeled).on(\"dblclick.zoom\", dblclicked).on(touchstart, touchstarted);\n    }                                                                                                                  // 1321\n    zoom.event = function(g) {                                                                                         // 1322\n      g.each(function() {                                                                                              // 1323\n        var dispatch = event.of(this, arguments), view1 = view;                                                        // 1324\n        if (d3_transitionInheritId) {                                                                                  // 1325\n          d3.select(this).transition().each(\"start.zoom\", function() {                                                 // 1326\n            view = this.__chart__ || {                                                                                 // 1327\n              x: 0,                                                                                                    // 1328\n              y: 0,                                                                                                    // 1329\n              k: 1                                                                                                     // 1330\n            };                                                                                                         // 1331\n            zoomstarted(dispatch);                                                                                     // 1332\n          }).tween(\"zoom:zoom\", function() {                                                                           // 1333\n            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);\n            return function(t) {                                                                                       // 1335\n              var l = i(t), k = dx / l[2];                                                                             // 1336\n              this.__chart__ = view = {                                                                                // 1337\n                x: cx - l[0] * k,                                                                                      // 1338\n                y: cy - l[1] * k,                                                                                      // 1339\n                k: k                                                                                                   // 1340\n              };                                                                                                       // 1341\n              zoomed(dispatch);                                                                                        // 1342\n            };                                                                                                         // 1343\n          }).each(\"interrupt.zoom\", function() {                                                                       // 1344\n            zoomended(dispatch);                                                                                       // 1345\n          }).each(\"end.zoom\", function() {                                                                             // 1346\n            zoomended(dispatch);                                                                                       // 1347\n          });                                                                                                          // 1348\n        } else {                                                                                                       // 1349\n          this.__chart__ = view;                                                                                       // 1350\n          zoomstarted(dispatch);                                                                                       // 1351\n          zoomed(dispatch);                                                                                            // 1352\n          zoomended(dispatch);                                                                                         // 1353\n        }                                                                                                              // 1354\n      });                                                                                                              // 1355\n    };                                                                                                                 // 1356\n    zoom.translate = function(_) {                                                                                     // 1357\n      if (!arguments.length) return [ view.x, view.y ];                                                                // 1358\n      view = {                                                                                                         // 1359\n        x: +_[0],                                                                                                      // 1360\n        y: +_[1],                                                                                                      // 1361\n        k: view.k                                                                                                      // 1362\n      };                                                                                                               // 1363\n      rescale();                                                                                                       // 1364\n      return zoom;                                                                                                     // 1365\n    };                                                                                                                 // 1366\n    zoom.scale = function(_) {                                                                                         // 1367\n      if (!arguments.length) return view.k;                                                                            // 1368\n      view = {                                                                                                         // 1369\n        x: view.x,                                                                                                     // 1370\n        y: view.y,                                                                                                     // 1371\n        k: null                                                                                                        // 1372\n      };                                                                                                               // 1373\n      scaleTo(+_);                                                                                                     // 1374\n      rescale();                                                                                                       // 1375\n      return zoom;                                                                                                     // 1376\n    };                                                                                                                 // 1377\n    zoom.scaleExtent = function(_) {                                                                                   // 1378\n      if (!arguments.length) return scaleExtent;                                                                       // 1379\n      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];                                           // 1380\n      return zoom;                                                                                                     // 1381\n    };                                                                                                                 // 1382\n    zoom.center = function(_) {                                                                                        // 1383\n      if (!arguments.length) return center;                                                                            // 1384\n      center = _ && [ +_[0], +_[1] ];                                                                                  // 1385\n      return zoom;                                                                                                     // 1386\n    };                                                                                                                 // 1387\n    zoom.size = function(_) {                                                                                          // 1388\n      if (!arguments.length) return size;                                                                              // 1389\n      size = _ && [ +_[0], +_[1] ];                                                                                    // 1390\n      return zoom;                                                                                                     // 1391\n    };                                                                                                                 // 1392\n    zoom.duration = function(_) {                                                                                      // 1393\n      if (!arguments.length) return duration;                                                                          // 1394\n      duration = +_;                                                                                                   // 1395\n      return zoom;                                                                                                     // 1396\n    };                                                                                                                 // 1397\n    zoom.x = function(z) {                                                                                             // 1398\n      if (!arguments.length) return x1;                                                                                // 1399\n      x1 = z;                                                                                                          // 1400\n      x0 = z.copy();                                                                                                   // 1401\n      view = {                                                                                                         // 1402\n        x: 0,                                                                                                          // 1403\n        y: 0,                                                                                                          // 1404\n        k: 1                                                                                                           // 1405\n      };                                                                                                               // 1406\n      return zoom;                                                                                                     // 1407\n    };                                                                                                                 // 1408\n    zoom.y = function(z) {                                                                                             // 1409\n      if (!arguments.length) return y1;                                                                                // 1410\n      y1 = z;                                                                                                          // 1411\n      y0 = z.copy();                                                                                                   // 1412\n      view = {                                                                                                         // 1413\n        x: 0,                                                                                                          // 1414\n        y: 0,                                                                                                          // 1415\n        k: 1                                                                                                           // 1416\n      };                                                                                                               // 1417\n      return zoom;                                                                                                     // 1418\n    };                                                                                                                 // 1419\n    function location(p) {                                                                                             // 1420\n      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];                                                   // 1421\n    }                                                                                                                  // 1422\n    function point(l) {                                                                                                // 1423\n      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];                                                       // 1424\n    }                                                                                                                  // 1425\n    function scaleTo(s) {                                                                                              // 1426\n      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));                                                  // 1427\n    }                                                                                                                  // 1428\n    function translateTo(p, l) {                                                                                       // 1429\n      l = point(l);                                                                                                    // 1430\n      view.x += p[0] - l[0];                                                                                           // 1431\n      view.y += p[1] - l[1];                                                                                           // 1432\n    }                                                                                                                  // 1433\n    function zoomTo(that, p, l, k) {                                                                                   // 1434\n      that.__chart__ = {                                                                                               // 1435\n        x: view.x,                                                                                                     // 1436\n        y: view.y,                                                                                                     // 1437\n        k: view.k                                                                                                      // 1438\n      };                                                                                                               // 1439\n      scaleTo(Math.pow(2, k));                                                                                         // 1440\n      translateTo(center0 = p, l);                                                                                     // 1441\n      that = d3.select(that);                                                                                          // 1442\n      if (duration > 0) that = that.transition().duration(duration);                                                   // 1443\n      that.call(zoom.event);                                                                                           // 1444\n    }                                                                                                                  // 1445\n    function rescale() {                                                                                               // 1446\n      if (x1) x1.domain(x0.range().map(function(x) {                                                                   // 1447\n        return (x - view.x) / view.k;                                                                                  // 1448\n      }).map(x0.invert));                                                                                              // 1449\n      if (y1) y1.domain(y0.range().map(function(y) {                                                                   // 1450\n        return (y - view.y) / view.k;                                                                                  // 1451\n      }).map(y0.invert));                                                                                              // 1452\n    }                                                                                                                  // 1453\n    function zoomstarted(dispatch) {                                                                                   // 1454\n      if (!zooming++) dispatch({                                                                                       // 1455\n        type: \"zoomstart\"                                                                                              // 1456\n      });                                                                                                              // 1457\n    }                                                                                                                  // 1458\n    function zoomed(dispatch) {                                                                                        // 1459\n      rescale();                                                                                                       // 1460\n      dispatch({                                                                                                       // 1461\n        type: \"zoom\",                                                                                                  // 1462\n        scale: view.k,                                                                                                 // 1463\n        translate: [ view.x, view.y ]                                                                                  // 1464\n      });                                                                                                              // 1465\n    }                                                                                                                  // 1466\n    function zoomended(dispatch) {                                                                                     // 1467\n      if (!--zooming) dispatch({                                                                                       // 1468\n        type: \"zoomend\"                                                                                                // 1469\n      }), center0 = null;                                                                                              // 1470\n    }                                                                                                                  // 1471\n    function mousedowned() {                                                                                           // 1472\n      var that = this, target = d3.event.target, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);\n      d3_selection_interrupt.call(that);                                                                               // 1474\n      zoomstarted(dispatch);                                                                                           // 1475\n      function moved() {                                                                                               // 1476\n        dragged = 1;                                                                                                   // 1477\n        translateTo(d3.mouse(that), location0);                                                                        // 1478\n        zoomed(dispatch);                                                                                              // 1479\n      }                                                                                                                // 1480\n      function ended() {                                                                                               // 1481\n        subject.on(mousemove, null).on(mouseup, null);                                                                 // 1482\n        dragRestore(dragged && d3.event.target === target);                                                            // 1483\n        zoomended(dispatch);                                                                                           // 1484\n      }                                                                                                                // 1485\n    }                                                                                                                  // 1486\n    function touchstarted() {                                                                                          // 1487\n      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = \".zoom-\" + d3.event.changedTouches[0].identifier, touchmove = \"touchmove\" + zoomName, touchend = \"touchend\" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);\n      started();                                                                                                       // 1489\n      zoomstarted(dispatch);                                                                                           // 1490\n      subject.on(mousedown, null).on(touchstart, started);                                                             // 1491\n      function relocate() {                                                                                            // 1492\n        var touches = d3.touches(that);                                                                                // 1493\n        scale0 = view.k;                                                                                               // 1494\n        touches.forEach(function(t) {                                                                                  // 1495\n          if (t.identifier in locations0) locations0[t.identifier] = location(t);                                      // 1496\n        });                                                                                                            // 1497\n        return touches;                                                                                                // 1498\n      }                                                                                                                // 1499\n      function started() {                                                                                             // 1500\n        var target = d3.event.target;                                                                                  // 1501\n        d3.select(target).on(touchmove, moved).on(touchend, ended);                                                    // 1502\n        targets.push(target);                                                                                          // 1503\n        var changed = d3.event.changedTouches;                                                                         // 1504\n        for (var i = 0, n = changed.length; i < n; ++i) {                                                              // 1505\n          locations0[changed[i].identifier] = null;                                                                    // 1506\n        }                                                                                                              // 1507\n        var touches = relocate(), now = Date.now();                                                                    // 1508\n        if (touches.length === 1) {                                                                                    // 1509\n          if (now - touchtime < 500) {                                                                                 // 1510\n            var p = touches[0];                                                                                        // 1511\n            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);                    // 1512\n            d3_eventPreventDefault();                                                                                  // 1513\n          }                                                                                                            // 1514\n          touchtime = now;                                                                                             // 1515\n        } else if (touches.length > 1) {                                                                               // 1516\n          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];                                      // 1517\n          distance0 = dx * dx + dy * dy;                                                                               // 1518\n        }                                                                                                              // 1519\n      }                                                                                                                // 1520\n      function moved() {                                                                                               // 1521\n        var touches = d3.touches(that), p0, l0, p1, l1;                                                                // 1522\n        d3_selection_interrupt.call(that);                                                                             // 1523\n        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {                                                   // 1524\n          p1 = touches[i];                                                                                             // 1525\n          if (l1 = locations0[p1.identifier]) {                                                                        // 1526\n            if (l0) break;                                                                                             // 1527\n            p0 = p1, l0 = l1;                                                                                          // 1528\n          }                                                                                                            // 1529\n        }                                                                                                              // 1530\n        if (l1) {                                                                                                      // 1531\n          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);\n          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];                                                           // 1533\n          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];                                                           // 1534\n          scaleTo(scale1 * scale0);                                                                                    // 1535\n        }                                                                                                              // 1536\n        touchtime = null;                                                                                              // 1537\n        translateTo(p0, l0);                                                                                           // 1538\n        zoomed(dispatch);                                                                                              // 1539\n      }                                                                                                                // 1540\n      function ended() {                                                                                               // 1541\n        if (d3.event.touches.length) {                                                                                 // 1542\n          var changed = d3.event.changedTouches;                                                                       // 1543\n          for (var i = 0, n = changed.length; i < n; ++i) {                                                            // 1544\n            delete locations0[changed[i].identifier];                                                                  // 1545\n          }                                                                                                            // 1546\n          for (var identifier in locations0) {                                                                         // 1547\n            return void relocate();                                                                                    // 1548\n          }                                                                                                            // 1549\n        }                                                                                                              // 1550\n        d3.selectAll(targets).on(zoomName, null);                                                                      // 1551\n        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);                                               // 1552\n        dragRestore();                                                                                                 // 1553\n        zoomended(dispatch);                                                                                           // 1554\n      }                                                                                                                // 1555\n    }                                                                                                                  // 1556\n    function mousewheeled() {                                                                                          // 1557\n      var dispatch = event.of(this, arguments);                                                                        // 1558\n      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this),                      // 1559\n      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);                                // 1560\n      mousewheelTimer = setTimeout(function() {                                                                        // 1561\n        mousewheelTimer = null;                                                                                        // 1562\n        zoomended(dispatch);                                                                                           // 1563\n      }, 50);                                                                                                          // 1564\n      d3_eventPreventDefault();                                                                                        // 1565\n      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);                                                   // 1566\n      translateTo(center0, translate0);                                                                                // 1567\n      zoomed(dispatch);                                                                                                // 1568\n    }                                                                                                                  // 1569\n    function dblclicked() {                                                                                            // 1570\n      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;                                                         // 1571\n      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);                          // 1572\n    }                                                                                                                  // 1573\n    return d3.rebind(zoom, event, \"on\");                                                                               // 1574\n  };                                                                                                                   // 1575\n  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;                        // 1576\n  d3.color = d3_color;                                                                                                 // 1577\n  function d3_color() {}                                                                                               // 1578\n  d3_color.prototype.toString = function() {                                                                           // 1579\n    return this.rgb() + \"\";                                                                                            // 1580\n  };                                                                                                                   // 1581\n  d3.hsl = d3_hsl;                                                                                                     // 1582\n  function d3_hsl(h, s, l) {                                                                                           // 1583\n    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse(\"\" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);\n  }                                                                                                                    // 1585\n  var d3_hslPrototype = d3_hsl.prototype = new d3_color();                                                             // 1586\n  d3_hslPrototype.brighter = function(k) {                                                                             // 1587\n    k = Math.pow(.7, arguments.length ? k : 1);                                                                        // 1588\n    return new d3_hsl(this.h, this.s, this.l / k);                                                                     // 1589\n  };                                                                                                                   // 1590\n  d3_hslPrototype.darker = function(k) {                                                                               // 1591\n    k = Math.pow(.7, arguments.length ? k : 1);                                                                        // 1592\n    return new d3_hsl(this.h, this.s, k * this.l);                                                                     // 1593\n  };                                                                                                                   // 1594\n  d3_hslPrototype.rgb = function() {                                                                                   // 1595\n    return d3_hsl_rgb(this.h, this.s, this.l);                                                                         // 1596\n  };                                                                                                                   // 1597\n  function d3_hsl_rgb(h, s, l) {                                                                                       // 1598\n    var m1, m2;                                                                                                        // 1599\n    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;                                                                   // 1600\n    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;                                                                      // 1601\n    l = l < 0 ? 0 : l > 1 ? 1 : l;                                                                                     // 1602\n    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;                                                                        // 1603\n    m1 = 2 * l - m2;                                                                                                   // 1604\n    function v(h) {                                                                                                    // 1605\n      if (h > 360) h -= 360; else if (h < 0) h += 360;                                                                 // 1606\n      if (h < 60) return m1 + (m2 - m1) * h / 60;                                                                      // 1607\n      if (h < 180) return m2;                                                                                          // 1608\n      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;                                                             // 1609\n      return m1;                                                                                                       // 1610\n    }                                                                                                                  // 1611\n    function vv(h) {                                                                                                   // 1612\n      return Math.round(v(h) * 255);                                                                                   // 1613\n    }                                                                                                                  // 1614\n    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));                                                                // 1615\n  }                                                                                                                    // 1616\n  d3.hcl = d3_hcl;                                                                                                     // 1617\n  function d3_hcl(h, c, l) {                                                                                           // 1618\n    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);\n  }                                                                                                                    // 1620\n  var d3_hclPrototype = d3_hcl.prototype = new d3_color();                                                             // 1621\n  d3_hclPrototype.brighter = function(k) {                                                                             // 1622\n    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));                  // 1623\n  };                                                                                                                   // 1624\n  d3_hclPrototype.darker = function(k) {                                                                               // 1625\n    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));                    // 1626\n  };                                                                                                                   // 1627\n  d3_hclPrototype.rgb = function() {                                                                                   // 1628\n    return d3_hcl_lab(this.h, this.c, this.l).rgb();                                                                   // 1629\n  };                                                                                                                   // 1630\n  function d3_hcl_lab(h, c, l) {                                                                                       // 1631\n    if (isNaN(h)) h = 0;                                                                                               // 1632\n    if (isNaN(c)) c = 0;                                                                                               // 1633\n    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);                                              // 1634\n  }                                                                                                                    // 1635\n  d3.lab = d3_lab;                                                                                                     // 1636\n  function d3_lab(l, a, b) {                                                                                           // 1637\n    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);\n  }                                                                                                                    // 1639\n  var d3_lab_K = 18;                                                                                                   // 1640\n  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;                                                             // 1641\n  var d3_labPrototype = d3_lab.prototype = new d3_color();                                                             // 1642\n  d3_labPrototype.brighter = function(k) {                                                                             // 1643\n    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);                  // 1644\n  };                                                                                                                   // 1645\n  d3_labPrototype.darker = function(k) {                                                                               // 1646\n    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);                    // 1647\n  };                                                                                                                   // 1648\n  d3_labPrototype.rgb = function() {                                                                                   // 1649\n    return d3_lab_rgb(this.l, this.a, this.b);                                                                         // 1650\n  };                                                                                                                   // 1651\n  function d3_lab_rgb(l, a, b) {                                                                                       // 1652\n    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;                                                          // 1653\n    x = d3_lab_xyz(x) * d3_lab_X;                                                                                      // 1654\n    y = d3_lab_xyz(y) * d3_lab_Y;                                                                                      // 1655\n    z = d3_lab_xyz(z) * d3_lab_Z;                                                                                      // 1656\n    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));\n  }                                                                                                                    // 1658\n  function d3_lab_hcl(l, a, b) {                                                                                       // 1659\n    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);   // 1660\n  }                                                                                                                    // 1661\n  function d3_lab_xyz(x) {                                                                                             // 1662\n    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;                                                       // 1663\n  }                                                                                                                    // 1664\n  function d3_xyz_lab(x) {                                                                                             // 1665\n    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;                                                   // 1666\n  }                                                                                                                    // 1667\n  function d3_xyz_rgb(r) {                                                                                             // 1668\n    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));                          // 1669\n  }                                                                                                                    // 1670\n  d3.rgb = d3_rgb;                                                                                                     // 1671\n  function d3_rgb(r, g, b) {                                                                                           // 1672\n    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse(\"\" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);\n  }                                                                                                                    // 1674\n  function d3_rgbNumber(value) {                                                                                       // 1675\n    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);                                                     // 1676\n  }                                                                                                                    // 1677\n  function d3_rgbString(value) {                                                                                       // 1678\n    return d3_rgbNumber(value) + \"\";                                                                                   // 1679\n  }                                                                                                                    // 1680\n  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();                                                             // 1681\n  d3_rgbPrototype.brighter = function(k) {                                                                             // 1682\n    k = Math.pow(.7, arguments.length ? k : 1);                                                                        // 1683\n    var r = this.r, g = this.g, b = this.b, i = 30;                                                                    // 1684\n    if (!r && !g && !b) return new d3_rgb(i, i, i);                                                                    // 1685\n    if (r && r < i) r = i;                                                                                             // 1686\n    if (g && g < i) g = i;                                                                                             // 1687\n    if (b && b < i) b = i;                                                                                             // 1688\n    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));                               // 1689\n  };                                                                                                                   // 1690\n  d3_rgbPrototype.darker = function(k) {                                                                               // 1691\n    k = Math.pow(.7, arguments.length ? k : 1);                                                                        // 1692\n    return new d3_rgb(k * this.r, k * this.g, k * this.b);                                                             // 1693\n  };                                                                                                                   // 1694\n  d3_rgbPrototype.hsl = function() {                                                                                   // 1695\n    return d3_rgb_hsl(this.r, this.g, this.b);                                                                         // 1696\n  };                                                                                                                   // 1697\n  d3_rgbPrototype.toString = function() {                                                                              // 1698\n    return \"#\" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);                                         // 1699\n  };                                                                                                                   // 1700\n  function d3_rgb_hex(v) {                                                                                             // 1701\n    return v < 16 ? \"0\" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);                                 // 1702\n  }                                                                                                                    // 1703\n  function d3_rgb_parse(format, rgb, hsl) {                                                                            // 1704\n    var r = 0, g = 0, b = 0, m1, m2, color;                                                                            // 1705\n    m1 = /([a-z]+)\\((.*)\\)/.exec(format = format.toLowerCase());                                                       // 1706\n    if (m1) {                                                                                                          // 1707\n      m2 = m1[2].split(\",\");                                                                                           // 1708\n      switch (m1[1]) {                                                                                                 // 1709\n       case \"hsl\":                                                                                                     // 1710\n        {                                                                                                              // 1711\n          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);                             // 1712\n        }                                                                                                              // 1713\n                                                                                                                       // 1714\n       case \"rgb\":                                                                                                     // 1715\n        {                                                                                                              // 1716\n          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));                 // 1717\n        }                                                                                                              // 1718\n      }                                                                                                                // 1719\n    }                                                                                                                  // 1720\n    if (color = d3_rgb_names.get(format)) {                                                                            // 1721\n      return rgb(color.r, color.g, color.b);                                                                           // 1722\n    }                                                                                                                  // 1723\n    if (format != null && format.charAt(0) === \"#\" && !isNaN(color = parseInt(format.slice(1), 16))) {                 // 1724\n      if (format.length === 4) {                                                                                       // 1725\n        r = (color & 3840) >> 4;                                                                                       // 1726\n        r = r >> 4 | r;                                                                                                // 1727\n        g = color & 240;                                                                                               // 1728\n        g = g >> 4 | g;                                                                                                // 1729\n        b = color & 15;                                                                                                // 1730\n        b = b << 4 | b;                                                                                                // 1731\n      } else if (format.length === 7) {                                                                                // 1732\n        r = (color & 16711680) >> 16;                                                                                  // 1733\n        g = (color & 65280) >> 8;                                                                                      // 1734\n        b = color & 255;                                                                                               // 1735\n      }                                                                                                                // 1736\n    }                                                                                                                  // 1737\n    return rgb(r, g, b);                                                                                               // 1738\n  }                                                                                                                    // 1739\n  function d3_rgb_hsl(r, g, b) {                                                                                       // 1740\n    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;\n    if (d) {                                                                                                           // 1742\n      s = l < .5 ? d / (max + min) : d / (2 - max - min);                                                              // 1743\n      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;\n      h *= 60;                                                                                                         // 1745\n    } else {                                                                                                           // 1746\n      h = NaN;                                                                                                         // 1747\n      s = l > 0 && l < 1 ? 0 : h;                                                                                      // 1748\n    }                                                                                                                  // 1749\n    return new d3_hsl(h, s, l);                                                                                        // 1750\n  }                                                                                                                    // 1751\n  function d3_rgb_lab(r, g, b) {                                                                                       // 1752\n    r = d3_rgb_xyz(r);                                                                                                 // 1753\n    g = d3_rgb_xyz(g);                                                                                                 // 1754\n    b = d3_rgb_xyz(b);                                                                                                 // 1755\n    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);\n    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));                                                         // 1757\n  }                                                                                                                    // 1758\n  function d3_rgb_xyz(r) {                                                                                             // 1759\n    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);                                       // 1760\n  }                                                                                                                    // 1761\n  function d3_rgb_parseNumber(c) {                                                                                     // 1762\n    var f = parseFloat(c);                                                                                             // 1763\n    return c.charAt(c.length - 1) === \"%\" ? Math.round(f * 2.55) : f;                                                  // 1764\n  }                                                                                                                    // 1765\n  var d3_rgb_names = d3.map({                                                                                          // 1766\n    aliceblue: 15792383,                                                                                               // 1767\n    antiquewhite: 16444375,                                                                                            // 1768\n    aqua: 65535,                                                                                                       // 1769\n    aquamarine: 8388564,                                                                                               // 1770\n    azure: 15794175,                                                                                                   // 1771\n    beige: 16119260,                                                                                                   // 1772\n    bisque: 16770244,                                                                                                  // 1773\n    black: 0,                                                                                                          // 1774\n    blanchedalmond: 16772045,                                                                                          // 1775\n    blue: 255,                                                                                                         // 1776\n    blueviolet: 9055202,                                                                                               // 1777\n    brown: 10824234,                                                                                                   // 1778\n    burlywood: 14596231,                                                                                               // 1779\n    cadetblue: 6266528,                                                                                                // 1780\n    chartreuse: 8388352,                                                                                               // 1781\n    chocolate: 13789470,                                                                                               // 1782\n    coral: 16744272,                                                                                                   // 1783\n    cornflowerblue: 6591981,                                                                                           // 1784\n    cornsilk: 16775388,                                                                                                // 1785\n    crimson: 14423100,                                                                                                 // 1786\n    cyan: 65535,                                                                                                       // 1787\n    darkblue: 139,                                                                                                     // 1788\n    darkcyan: 35723,                                                                                                   // 1789\n    darkgoldenrod: 12092939,                                                                                           // 1790\n    darkgray: 11119017,                                                                                                // 1791\n    darkgreen: 25600,                                                                                                  // 1792\n    darkgrey: 11119017,                                                                                                // 1793\n    darkkhaki: 12433259,                                                                                               // 1794\n    darkmagenta: 9109643,                                                                                              // 1795\n    darkolivegreen: 5597999,                                                                                           // 1796\n    darkorange: 16747520,                                                                                              // 1797\n    darkorchid: 10040012,                                                                                              // 1798\n    darkred: 9109504,                                                                                                  // 1799\n    darksalmon: 15308410,                                                                                              // 1800\n    darkseagreen: 9419919,                                                                                             // 1801\n    darkslateblue: 4734347,                                                                                            // 1802\n    darkslategray: 3100495,                                                                                            // 1803\n    darkslategrey: 3100495,                                                                                            // 1804\n    darkturquoise: 52945,                                                                                              // 1805\n    darkviolet: 9699539,                                                                                               // 1806\n    deeppink: 16716947,                                                                                                // 1807\n    deepskyblue: 49151,                                                                                                // 1808\n    dimgray: 6908265,                                                                                                  // 1809\n    dimgrey: 6908265,                                                                                                  // 1810\n    dodgerblue: 2003199,                                                                                               // 1811\n    firebrick: 11674146,                                                                                               // 1812\n    floralwhite: 16775920,                                                                                             // 1813\n    forestgreen: 2263842,                                                                                              // 1814\n    fuchsia: 16711935,                                                                                                 // 1815\n    gainsboro: 14474460,                                                                                               // 1816\n    ghostwhite: 16316671,                                                                                              // 1817\n    gold: 16766720,                                                                                                    // 1818\n    goldenrod: 14329120,                                                                                               // 1819\n    gray: 8421504,                                                                                                     // 1820\n    green: 32768,                                                                                                      // 1821\n    greenyellow: 11403055,                                                                                             // 1822\n    grey: 8421504,                                                                                                     // 1823\n    honeydew: 15794160,                                                                                                // 1824\n    hotpink: 16738740,                                                                                                 // 1825\n    indianred: 13458524,                                                                                               // 1826\n    indigo: 4915330,                                                                                                   // 1827\n    ivory: 16777200,                                                                                                   // 1828\n    khaki: 15787660,                                                                                                   // 1829\n    lavender: 15132410,                                                                                                // 1830\n    lavenderblush: 16773365,                                                                                           // 1831\n    lawngreen: 8190976,                                                                                                // 1832\n    lemonchiffon: 16775885,                                                                                            // 1833\n    lightblue: 11393254,                                                                                               // 1834\n    lightcoral: 15761536,                                                                                              // 1835\n    lightcyan: 14745599,                                                                                               // 1836\n    lightgoldenrodyellow: 16448210,                                                                                    // 1837\n    lightgray: 13882323,                                                                                               // 1838\n    lightgreen: 9498256,                                                                                               // 1839\n    lightgrey: 13882323,                                                                                               // 1840\n    lightpink: 16758465,                                                                                               // 1841\n    lightsalmon: 16752762,                                                                                             // 1842\n    lightseagreen: 2142890,                                                                                            // 1843\n    lightskyblue: 8900346,                                                                                             // 1844\n    lightslategray: 7833753,                                                                                           // 1845\n    lightslategrey: 7833753,                                                                                           // 1846\n    lightsteelblue: 11584734,                                                                                          // 1847\n    lightyellow: 16777184,                                                                                             // 1848\n    lime: 65280,                                                                                                       // 1849\n    limegreen: 3329330,                                                                                                // 1850\n    linen: 16445670,                                                                                                   // 1851\n    magenta: 16711935,                                                                                                 // 1852\n    maroon: 8388608,                                                                                                   // 1853\n    mediumaquamarine: 6737322,                                                                                         // 1854\n    mediumblue: 205,                                                                                                   // 1855\n    mediumorchid: 12211667,                                                                                            // 1856\n    mediumpurple: 9662683,                                                                                             // 1857\n    mediumseagreen: 3978097,                                                                                           // 1858\n    mediumslateblue: 8087790,                                                                                          // 1859\n    mediumspringgreen: 64154,                                                                                          // 1860\n    mediumturquoise: 4772300,                                                                                          // 1861\n    mediumvioletred: 13047173,                                                                                         // 1862\n    midnightblue: 1644912,                                                                                             // 1863\n    mintcream: 16121850,                                                                                               // 1864\n    mistyrose: 16770273,                                                                                               // 1865\n    moccasin: 16770229,                                                                                                // 1866\n    navajowhite: 16768685,                                                                                             // 1867\n    navy: 128,                                                                                                         // 1868\n    oldlace: 16643558,                                                                                                 // 1869\n    olive: 8421376,                                                                                                    // 1870\n    olivedrab: 7048739,                                                                                                // 1871\n    orange: 16753920,                                                                                                  // 1872\n    orangered: 16729344,                                                                                               // 1873\n    orchid: 14315734,                                                                                                  // 1874\n    palegoldenrod: 15657130,                                                                                           // 1875\n    palegreen: 10025880,                                                                                               // 1876\n    paleturquoise: 11529966,                                                                                           // 1877\n    palevioletred: 14381203,                                                                                           // 1878\n    papayawhip: 16773077,                                                                                              // 1879\n    peachpuff: 16767673,                                                                                               // 1880\n    peru: 13468991,                                                                                                    // 1881\n    pink: 16761035,                                                                                                    // 1882\n    plum: 14524637,                                                                                                    // 1883\n    powderblue: 11591910,                                                                                              // 1884\n    purple: 8388736,                                                                                                   // 1885\n    rebeccapurple: 6697881,                                                                                            // 1886\n    red: 16711680,                                                                                                     // 1887\n    rosybrown: 12357519,                                                                                               // 1888\n    royalblue: 4286945,                                                                                                // 1889\n    saddlebrown: 9127187,                                                                                              // 1890\n    salmon: 16416882,                                                                                                  // 1891\n    sandybrown: 16032864,                                                                                              // 1892\n    seagreen: 3050327,                                                                                                 // 1893\n    seashell: 16774638,                                                                                                // 1894\n    sienna: 10506797,                                                                                                  // 1895\n    silver: 12632256,                                                                                                  // 1896\n    skyblue: 8900331,                                                                                                  // 1897\n    slateblue: 6970061,                                                                                                // 1898\n    slategray: 7372944,                                                                                                // 1899\n    slategrey: 7372944,                                                                                                // 1900\n    snow: 16775930,                                                                                                    // 1901\n    springgreen: 65407,                                                                                                // 1902\n    steelblue: 4620980,                                                                                                // 1903\n    tan: 13808780,                                                                                                     // 1904\n    teal: 32896,                                                                                                       // 1905\n    thistle: 14204888,                                                                                                 // 1906\n    tomato: 16737095,                                                                                                  // 1907\n    turquoise: 4251856,                                                                                                // 1908\n    violet: 15631086,                                                                                                  // 1909\n    wheat: 16113331,                                                                                                   // 1910\n    white: 16777215,                                                                                                   // 1911\n    whitesmoke: 16119285,                                                                                              // 1912\n    yellow: 16776960,                                                                                                  // 1913\n    yellowgreen: 10145074                                                                                              // 1914\n  });                                                                                                                  // 1915\n  d3_rgb_names.forEach(function(key, value) {                                                                          // 1916\n    d3_rgb_names.set(key, d3_rgbNumber(value));                                                                        // 1917\n  });                                                                                                                  // 1918\n  function d3_functor(v) {                                                                                             // 1919\n    return typeof v === \"function\" ? v : function() {                                                                  // 1920\n      return v;                                                                                                        // 1921\n    };                                                                                                                 // 1922\n  }                                                                                                                    // 1923\n  d3.functor = d3_functor;                                                                                             // 1924\n  d3.xhr = d3_xhrType(d3_identity);                                                                                    // 1925\n  function d3_xhrType(response) {                                                                                      // 1926\n    return function(url, mimeType, callback) {                                                                         // 1927\n      if (arguments.length === 2 && typeof mimeType === \"function\") callback = mimeType,                               // 1928\n      mimeType = null;                                                                                                 // 1929\n      return d3_xhr(url, mimeType, response, callback);                                                                // 1930\n    };                                                                                                                 // 1931\n  }                                                                                                                    // 1932\n  function d3_xhr(url, mimeType, response, callback) {                                                                 // 1933\n    var xhr = {}, dispatch = d3.dispatch(\"beforesend\", \"progress\", \"load\", \"error\"), headers = {}, request = new XMLHttpRequest(), responseType = null;\n    if (this.XDomainRequest && !(\"withCredentials\" in request) && /^(http(s)?:)?\\/\\//.test(url)) request = new XDomainRequest();\n    \"onload\" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {       // 1936\n      request.readyState > 3 && respond();                                                                             // 1937\n    };                                                                                                                 // 1938\n    function respond() {                                                                                               // 1939\n      var status = request.status, result;                                                                             // 1940\n      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {                  // 1941\n        try {                                                                                                          // 1942\n          result = response.call(xhr, request);                                                                        // 1943\n        } catch (e) {                                                                                                  // 1944\n          dispatch.error.call(xhr, e);                                                                                 // 1945\n          return;                                                                                                      // 1946\n        }                                                                                                              // 1947\n        dispatch.load.call(xhr, result);                                                                               // 1948\n      } else {                                                                                                         // 1949\n        dispatch.error.call(xhr, request);                                                                             // 1950\n      }                                                                                                                // 1951\n    }                                                                                                                  // 1952\n    request.onprogress = function(event) {                                                                             // 1953\n      var o = d3.event;                                                                                                // 1954\n      d3.event = event;                                                                                                // 1955\n      try {                                                                                                            // 1956\n        dispatch.progress.call(xhr, request);                                                                          // 1957\n      } finally {                                                                                                      // 1958\n        d3.event = o;                                                                                                  // 1959\n      }                                                                                                                // 1960\n    };                                                                                                                 // 1961\n    xhr.header = function(name, value) {                                                                               // 1962\n      name = (name + \"\").toLowerCase();                                                                                // 1963\n      if (arguments.length < 2) return headers[name];                                                                  // 1964\n      if (value == null) delete headers[name]; else headers[name] = value + \"\";                                        // 1965\n      return xhr;                                                                                                      // 1966\n    };                                                                                                                 // 1967\n    xhr.mimeType = function(value) {                                                                                   // 1968\n      if (!arguments.length) return mimeType;                                                                          // 1969\n      mimeType = value == null ? null : value + \"\";                                                                    // 1970\n      return xhr;                                                                                                      // 1971\n    };                                                                                                                 // 1972\n    xhr.responseType = function(value) {                                                                               // 1973\n      if (!arguments.length) return responseType;                                                                      // 1974\n      responseType = value;                                                                                            // 1975\n      return xhr;                                                                                                      // 1976\n    };                                                                                                                 // 1977\n    xhr.response = function(value) {                                                                                   // 1978\n      response = value;                                                                                                // 1979\n      return xhr;                                                                                                      // 1980\n    };                                                                                                                 // 1981\n    [ \"get\", \"post\" ].forEach(function(method) {                                                                       // 1982\n      xhr[method] = function() {                                                                                       // 1983\n        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));                                            // 1984\n      };                                                                                                               // 1985\n    });                                                                                                                // 1986\n    xhr.send = function(method, data, callback) {                                                                      // 1987\n      if (arguments.length === 2 && typeof data === \"function\") callback = data, data = null;                          // 1988\n      request.open(method, url, true);                                                                                 // 1989\n      if (mimeType != null && !(\"accept\" in headers)) headers[\"accept\"] = mimeType + \",*/*\";                           // 1990\n      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);           // 1991\n      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);                            // 1992\n      if (responseType != null) request.responseType = responseType;                                                   // 1993\n      if (callback != null) xhr.on(\"error\", callback).on(\"load\", function(request) {                                   // 1994\n        callback(null, request);                                                                                       // 1995\n      });                                                                                                              // 1996\n      dispatch.beforesend.call(xhr, request);                                                                          // 1997\n      request.send(data == null ? null : data);                                                                        // 1998\n      return xhr;                                                                                                      // 1999\n    };                                                                                                                 // 2000\n    xhr.abort = function() {                                                                                           // 2001\n      request.abort();                                                                                                 // 2002\n      return xhr;                                                                                                      // 2003\n    };                                                                                                                 // 2004\n    d3.rebind(xhr, dispatch, \"on\");                                                                                    // 2005\n    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));                                             // 2006\n  }                                                                                                                    // 2007\n  function d3_xhr_fixCallback(callback) {                                                                              // 2008\n    return callback.length === 1 ? function(error, request) {                                                          // 2009\n      callback(error == null ? request : null);                                                                        // 2010\n    } : callback;                                                                                                      // 2011\n  }                                                                                                                    // 2012\n  function d3_xhrHasResponse(request) {                                                                                // 2013\n    var type = request.responseType;                                                                                   // 2014\n    return type && type !== \"text\" ? request.response : request.responseText;                                          // 2015\n  }                                                                                                                    // 2016\n  d3.dsv = function(delimiter, mimeType) {                                                                             // 2017\n    var reFormat = new RegExp('[\"' + delimiter + \"\\n]\"), delimiterCode = delimiter.charCodeAt(0);                      // 2018\n    function dsv(url, row, callback) {                                                                                 // 2019\n      if (arguments.length < 3) callback = row, row = null;                                                            // 2020\n      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);                          // 2021\n      xhr.row = function(_) {                                                                                          // 2022\n        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;                 // 2023\n      };                                                                                                               // 2024\n      return xhr;                                                                                                      // 2025\n    }                                                                                                                  // 2026\n    function response(request) {                                                                                       // 2027\n      return dsv.parse(request.responseText);                                                                          // 2028\n    }                                                                                                                  // 2029\n    function typedResponse(f) {                                                                                        // 2030\n      return function(request) {                                                                                       // 2031\n        return dsv.parse(request.responseText, f);                                                                     // 2032\n      };                                                                                                               // 2033\n    }                                                                                                                  // 2034\n    dsv.parse = function(text, f) {                                                                                    // 2035\n      var o;                                                                                                           // 2036\n      return dsv.parseRows(text, function(row, i) {                                                                    // 2037\n        if (o) return o(row, i - 1);                                                                                   // 2038\n        var a = new Function(\"d\", \"return {\" + row.map(function(name, i) {                                             // 2039\n          return JSON.stringify(name) + \": d[\" + i + \"]\";                                                              // 2040\n        }).join(\",\") + \"}\");                                                                                           // 2041\n        o = f ? function(row, i) {                                                                                     // 2042\n          return f(a(row), i);                                                                                         // 2043\n        } : a;                                                                                                         // 2044\n      });                                                                                                              // 2045\n    };                                                                                                                 // 2046\n    dsv.parseRows = function(text, f) {                                                                                // 2047\n      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;                                        // 2048\n      function token() {                                                                                               // 2049\n        if (I >= N) return EOF;                                                                                        // 2050\n        if (eol) return eol = false, EOL;                                                                              // 2051\n        var j = I;                                                                                                     // 2052\n        if (text.charCodeAt(j) === 34) {                                                                               // 2053\n          var i = j;                                                                                                   // 2054\n          while (i++ < N) {                                                                                            // 2055\n            if (text.charCodeAt(i) === 34) {                                                                           // 2056\n              if (text.charCodeAt(i + 1) !== 34) break;                                                                // 2057\n              ++i;                                                                                                     // 2058\n            }                                                                                                          // 2059\n          }                                                                                                            // 2060\n          I = i + 2;                                                                                                   // 2061\n          var c = text.charCodeAt(i + 1);                                                                              // 2062\n          if (c === 13) {                                                                                              // 2063\n            eol = true;                                                                                                // 2064\n            if (text.charCodeAt(i + 2) === 10) ++I;                                                                    // 2065\n          } else if (c === 10) {                                                                                       // 2066\n            eol = true;                                                                                                // 2067\n          }                                                                                                            // 2068\n          return text.slice(j + 1, i).replace(/\"\"/g, '\"');                                                             // 2069\n        }                                                                                                              // 2070\n        while (I < N) {                                                                                                // 2071\n          var c = text.charCodeAt(I++), k = 1;                                                                         // 2072\n          if (c === 10) eol = true; else if (c === 13) {                                                               // 2073\n            eol = true;                                                                                                // 2074\n            if (text.charCodeAt(I) === 10) ++I, ++k;                                                                   // 2075\n          } else if (c !== delimiterCode) continue;                                                                    // 2076\n          return text.slice(j, I - k);                                                                                 // 2077\n        }                                                                                                              // 2078\n        return text.slice(j);                                                                                          // 2079\n      }                                                                                                                // 2080\n      while ((t = token()) !== EOF) {                                                                                  // 2081\n        var a = [];                                                                                                    // 2082\n        while (t !== EOL && t !== EOF) {                                                                               // 2083\n          a.push(t);                                                                                                   // 2084\n          t = token();                                                                                                 // 2085\n        }                                                                                                              // 2086\n        if (f && (a = f(a, n++)) == null) continue;                                                                    // 2087\n        rows.push(a);                                                                                                  // 2088\n      }                                                                                                                // 2089\n      return rows;                                                                                                     // 2090\n    };                                                                                                                 // 2091\n    dsv.format = function(rows) {                                                                                      // 2092\n      if (Array.isArray(rows[0])) return dsv.formatRows(rows);                                                         // 2093\n      var fieldSet = new d3_Set(), fields = [];                                                                        // 2094\n      rows.forEach(function(row) {                                                                                     // 2095\n        for (var field in row) {                                                                                       // 2096\n          if (!fieldSet.has(field)) {                                                                                  // 2097\n            fields.push(fieldSet.add(field));                                                                          // 2098\n          }                                                                                                            // 2099\n        }                                                                                                              // 2100\n      });                                                                                                              // 2101\n      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {                               // 2102\n        return fields.map(function(field) {                                                                            // 2103\n          return formatValue(row[field]);                                                                              // 2104\n        }).join(delimiter);                                                                                            // 2105\n      })).join(\"\\n\");                                                                                                  // 2106\n    };                                                                                                                 // 2107\n    dsv.formatRows = function(rows) {                                                                                  // 2108\n      return rows.map(formatRow).join(\"\\n\");                                                                           // 2109\n    };                                                                                                                 // 2110\n    function formatRow(row) {                                                                                          // 2111\n      return row.map(formatValue).join(delimiter);                                                                     // 2112\n    }                                                                                                                  // 2113\n    function formatValue(text) {                                                                                       // 2114\n      return reFormat.test(text) ? '\"' + text.replace(/\\\"/g, '\"\"') + '\"' : text;                                       // 2115\n    }                                                                                                                  // 2116\n    return dsv;                                                                                                        // 2117\n  };                                                                                                                   // 2118\n  d3.csv = d3.dsv(\",\", \"text/csv\");                                                                                    // 2119\n  d3.tsv = d3.dsv(\"\t\", \"text/tab-separated-values\");                                                                   // 2120\n  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, \"requestAnimationFrame\")] || function(callback) {\n    setTimeout(callback, 17);                                                                                          // 2122\n  };                                                                                                                   // 2123\n  d3.timer = function() {                                                                                              // 2124\n    d3_timer.apply(this, arguments);                                                                                   // 2125\n  };                                                                                                                   // 2126\n  function d3_timer(callback, delay, then) {                                                                           // 2127\n    var n = arguments.length;                                                                                          // 2128\n    if (n < 2) delay = 0;                                                                                              // 2129\n    if (n < 3) then = Date.now();                                                                                      // 2130\n    var time = then + delay, timer = {                                                                                 // 2131\n      c: callback,                                                                                                     // 2132\n      t: time,                                                                                                         // 2133\n      n: null                                                                                                          // 2134\n    };                                                                                                                 // 2135\n    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;                             // 2136\n    d3_timer_queueTail = timer;                                                                                        // 2137\n    if (!d3_timer_interval) {                                                                                          // 2138\n      d3_timer_timeout = clearTimeout(d3_timer_timeout);                                                               // 2139\n      d3_timer_interval = 1;                                                                                           // 2140\n      d3_timer_frame(d3_timer_step);                                                                                   // 2141\n    }                                                                                                                  // 2142\n    return timer;                                                                                                      // 2143\n  }                                                                                                                    // 2144\n  function d3_timer_step() {                                                                                           // 2145\n    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;                                                         // 2146\n    if (delay > 24) {                                                                                                  // 2147\n      if (isFinite(delay)) {                                                                                           // 2148\n        clearTimeout(d3_timer_timeout);                                                                                // 2149\n        d3_timer_timeout = setTimeout(d3_timer_step, delay);                                                           // 2150\n      }                                                                                                                // 2151\n      d3_timer_interval = 0;                                                                                           // 2152\n    } else {                                                                                                           // 2153\n      d3_timer_interval = 1;                                                                                           // 2154\n      d3_timer_frame(d3_timer_step);                                                                                   // 2155\n    }                                                                                                                  // 2156\n  }                                                                                                                    // 2157\n  d3.timer.flush = function() {                                                                                        // 2158\n    d3_timer_mark();                                                                                                   // 2159\n    d3_timer_sweep();                                                                                                  // 2160\n  };                                                                                                                   // 2161\n  function d3_timer_mark() {                                                                                           // 2162\n    var now = Date.now(), timer = d3_timer_queueHead;                                                                  // 2163\n    while (timer) {                                                                                                    // 2164\n      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;                                                    // 2165\n      timer = timer.n;                                                                                                 // 2166\n    }                                                                                                                  // 2167\n    return now;                                                                                                        // 2168\n  }                                                                                                                    // 2169\n  function d3_timer_sweep() {                                                                                          // 2170\n    var t0, t1 = d3_timer_queueHead, time = Infinity;                                                                  // 2171\n    while (t1) {                                                                                                       // 2172\n      if (t1.c) {                                                                                                      // 2173\n        if (t1.t < time) time = t1.t;                                                                                  // 2174\n        t1 = (t0 = t1).n;                                                                                              // 2175\n      } else {                                                                                                         // 2176\n        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;                                                             // 2177\n      }                                                                                                                // 2178\n    }                                                                                                                  // 2179\n    d3_timer_queueTail = t0;                                                                                           // 2180\n    return time;                                                                                                       // 2181\n  }                                                                                                                    // 2182\n  function d3_format_precision(x, p) {                                                                                 // 2183\n    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);                                                           // 2184\n  }                                                                                                                    // 2185\n  d3.round = function(x, n) {                                                                                          // 2186\n    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);                                              // 2187\n  };                                                                                                                   // 2188\n  var d3_formatPrefixes = [ \"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\" ].map(d3_formatPrefix);\n  d3.formatPrefix = function(value, precision) {                                                                       // 2190\n    var i = 0;                                                                                                         // 2191\n    if (value = +value) {                                                                                              // 2192\n      if (value < 0) value *= -1;                                                                                      // 2193\n      if (precision) value = d3.round(value, d3_format_precision(value, precision));                                   // 2194\n      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);                                                         // 2195\n      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));                                                    // 2196\n    }                                                                                                                  // 2197\n    return d3_formatPrefixes[8 + i / 3];                                                                               // 2198\n  };                                                                                                                   // 2199\n  function d3_formatPrefix(d, i) {                                                                                     // 2200\n    var k = Math.pow(10, abs(8 - i) * 3);                                                                              // 2201\n    return {                                                                                                           // 2202\n      scale: i > 8 ? function(d) {                                                                                     // 2203\n        return d / k;                                                                                                  // 2204\n      } : function(d) {                                                                                                // 2205\n        return d * k;                                                                                                  // 2206\n      },                                                                                                               // 2207\n      symbol: d                                                                                                        // 2208\n    };                                                                                                                 // 2209\n  }                                                                                                                    // 2210\n  function d3_locale_numberFormat(locale) {                                                                            // 2211\n    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {\n      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;                                         // 2213\n      while (i > 0 && g > 0) {                                                                                         // 2214\n        if (length + g + 1 > width) g = Math.max(1, width - length);                                                   // 2215\n        t.push(value.substring(i -= g, i + g));                                                                        // 2216\n        if ((length += g + 1) > width) break;                                                                          // 2217\n        g = locale_grouping[j = (j + 1) % locale_grouping.length];                                                     // 2218\n      }                                                                                                                // 2219\n      return t.reverse().join(locale_thousands);                                                                       // 2220\n    } : d3_identity;                                                                                                   // 2221\n    return function(specifier) {                                                                                       // 2222\n      var match = d3_format_re.exec(specifier), fill = match[1] || \" \", align = match[2] || \">\", sign = match[3] || \"-\", symbol = match[4] || \"\", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = \"\", suffix = \"\", integer = false, exponent = true;\n      if (precision) precision = +precision.substring(1);                                                              // 2224\n      if (zfill || fill === \"0\" && align === \"=\") {                                                                    // 2225\n        zfill = fill = \"0\";                                                                                            // 2226\n        align = \"=\";                                                                                                   // 2227\n      }                                                                                                                // 2228\n      switch (type) {                                                                                                  // 2229\n       case \"n\":                                                                                                       // 2230\n        comma = true;                                                                                                  // 2231\n        type = \"g\";                                                                                                    // 2232\n        break;                                                                                                         // 2233\n                                                                                                                       // 2234\n       case \"%\":                                                                                                       // 2235\n        scale = 100;                                                                                                   // 2236\n        suffix = \"%\";                                                                                                  // 2237\n        type = \"f\";                                                                                                    // 2238\n        break;                                                                                                         // 2239\n                                                                                                                       // 2240\n       case \"p\":                                                                                                       // 2241\n        scale = 100;                                                                                                   // 2242\n        suffix = \"%\";                                                                                                  // 2243\n        type = \"r\";                                                                                                    // 2244\n        break;                                                                                                         // 2245\n                                                                                                                       // 2246\n       case \"b\":                                                                                                       // 2247\n       case \"o\":                                                                                                       // 2248\n       case \"x\":                                                                                                       // 2249\n       case \"X\":                                                                                                       // 2250\n        if (symbol === \"#\") prefix = \"0\" + type.toLowerCase();                                                         // 2251\n                                                                                                                       // 2252\n       case \"c\":                                                                                                       // 2253\n        exponent = false;                                                                                              // 2254\n                                                                                                                       // 2255\n       case \"d\":                                                                                                       // 2256\n        integer = true;                                                                                                // 2257\n        precision = 0;                                                                                                 // 2258\n        break;                                                                                                         // 2259\n                                                                                                                       // 2260\n       case \"s\":                                                                                                       // 2261\n        scale = -1;                                                                                                    // 2262\n        type = \"r\";                                                                                                    // 2263\n        break;                                                                                                         // 2264\n      }                                                                                                                // 2265\n      if (symbol === \"$\") prefix = locale_currency[0], suffix = locale_currency[1];                                    // 2266\n      if (type == \"r\" && !precision) type = \"g\";                                                                       // 2267\n      if (precision != null) {                                                                                         // 2268\n        if (type == \"g\") precision = Math.max(1, Math.min(21, precision)); else if (type == \"e\" || type == \"f\") precision = Math.max(0, Math.min(20, precision));\n      }                                                                                                                // 2270\n      type = d3_format_types.get(type) || d3_format_typeDefault;                                                       // 2271\n      var zcomma = zfill && comma;                                                                                     // 2272\n      return function(value) {                                                                                         // 2273\n        var fullSuffix = suffix;                                                                                       // 2274\n        if (integer && value % 1) return \"\";                                                                           // 2275\n        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, \"-\") : sign === \"-\" ? \"\" : sign;   // 2276\n        if (scale < 0) {                                                                                               // 2277\n          var unit = d3.formatPrefix(value, precision);                                                                // 2278\n          value = unit.scale(value);                                                                                   // 2279\n          fullSuffix = unit.symbol + suffix;                                                                           // 2280\n        } else {                                                                                                       // 2281\n          value *= scale;                                                                                              // 2282\n        }                                                                                                              // 2283\n        value = type(value, precision);                                                                                // 2284\n        var i = value.lastIndexOf(\".\"), before, after;                                                                 // 2285\n        if (i < 0) {                                                                                                   // 2286\n          var j = exponent ? value.lastIndexOf(\"e\") : -1;                                                              // 2287\n          if (j < 0) before = value, after = \"\"; else before = value.substring(0, j), after = value.substring(j);      // 2288\n        } else {                                                                                                       // 2289\n          before = value.substring(0, i);                                                                              // 2290\n          after = locale_decimal + value.substring(i + 1);                                                             // 2291\n        }                                                                                                              // 2292\n        if (!zfill && comma) before = formatGroup(before, Infinity);                                                   // 2293\n        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : \"\";\n        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);          // 2295\n        negative += prefix;                                                                                            // 2296\n        value = before + after;                                                                                        // 2297\n        return (align === \"<\" ? negative + value + padding : align === \">\" ? padding + negative + value : align === \"^\" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;\n      };                                                                                                               // 2299\n    };                                                                                                                 // 2300\n  }                                                                                                                    // 2301\n  var d3_format_re = /(?:([^{])?([<>=^]))?([+\\- ])?([$#])?(0)?(\\d+)?(,)?(\\.-?\\d+)?([a-z%])?/i;                         // 2302\n  var d3_format_types = d3.map({                                                                                       // 2303\n    b: function(x) {                                                                                                   // 2304\n      return x.toString(2);                                                                                            // 2305\n    },                                                                                                                 // 2306\n    c: function(x) {                                                                                                   // 2307\n      return String.fromCharCode(x);                                                                                   // 2308\n    },                                                                                                                 // 2309\n    o: function(x) {                                                                                                   // 2310\n      return x.toString(8);                                                                                            // 2311\n    },                                                                                                                 // 2312\n    x: function(x) {                                                                                                   // 2313\n      return x.toString(16);                                                                                           // 2314\n    },                                                                                                                 // 2315\n    X: function(x) {                                                                                                   // 2316\n      return x.toString(16).toUpperCase();                                                                             // 2317\n    },                                                                                                                 // 2318\n    g: function(x, p) {                                                                                                // 2319\n      return x.toPrecision(p);                                                                                         // 2320\n    },                                                                                                                 // 2321\n    e: function(x, p) {                                                                                                // 2322\n      return x.toExponential(p);                                                                                       // 2323\n    },                                                                                                                 // 2324\n    f: function(x, p) {                                                                                                // 2325\n      return x.toFixed(p);                                                                                             // 2326\n    },                                                                                                                 // 2327\n    r: function(x, p) {                                                                                                // 2328\n      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));\n    }                                                                                                                  // 2330\n  });                                                                                                                  // 2331\n  function d3_format_typeDefault(x) {                                                                                  // 2332\n    return x + \"\";                                                                                                     // 2333\n  }                                                                                                                    // 2334\n  var d3_time = d3.time = {}, d3_date = Date;                                                                          // 2335\n  function d3_date_utc() {                                                                                             // 2336\n    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);                          // 2337\n  }                                                                                                                    // 2338\n  d3_date_utc.prototype = {                                                                                            // 2339\n    getDate: function() {                                                                                              // 2340\n      return this._.getUTCDate();                                                                                      // 2341\n    },                                                                                                                 // 2342\n    getDay: function() {                                                                                               // 2343\n      return this._.getUTCDay();                                                                                       // 2344\n    },                                                                                                                 // 2345\n    getFullYear: function() {                                                                                          // 2346\n      return this._.getUTCFullYear();                                                                                  // 2347\n    },                                                                                                                 // 2348\n    getHours: function() {                                                                                             // 2349\n      return this._.getUTCHours();                                                                                     // 2350\n    },                                                                                                                 // 2351\n    getMilliseconds: function() {                                                                                      // 2352\n      return this._.getUTCMilliseconds();                                                                              // 2353\n    },                                                                                                                 // 2354\n    getMinutes: function() {                                                                                           // 2355\n      return this._.getUTCMinutes();                                                                                   // 2356\n    },                                                                                                                 // 2357\n    getMonth: function() {                                                                                             // 2358\n      return this._.getUTCMonth();                                                                                     // 2359\n    },                                                                                                                 // 2360\n    getSeconds: function() {                                                                                           // 2361\n      return this._.getUTCSeconds();                                                                                   // 2362\n    },                                                                                                                 // 2363\n    getTime: function() {                                                                                              // 2364\n      return this._.getTime();                                                                                         // 2365\n    },                                                                                                                 // 2366\n    getTimezoneOffset: function() {                                                                                    // 2367\n      return 0;                                                                                                        // 2368\n    },                                                                                                                 // 2369\n    valueOf: function() {                                                                                              // 2370\n      return this._.valueOf();                                                                                         // 2371\n    },                                                                                                                 // 2372\n    setDate: function() {                                                                                              // 2373\n      d3_time_prototype.setUTCDate.apply(this._, arguments);                                                           // 2374\n    },                                                                                                                 // 2375\n    setDay: function() {                                                                                               // 2376\n      d3_time_prototype.setUTCDay.apply(this._, arguments);                                                            // 2377\n    },                                                                                                                 // 2378\n    setFullYear: function() {                                                                                          // 2379\n      d3_time_prototype.setUTCFullYear.apply(this._, arguments);                                                       // 2380\n    },                                                                                                                 // 2381\n    setHours: function() {                                                                                             // 2382\n      d3_time_prototype.setUTCHours.apply(this._, arguments);                                                          // 2383\n    },                                                                                                                 // 2384\n    setMilliseconds: function() {                                                                                      // 2385\n      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);                                                   // 2386\n    },                                                                                                                 // 2387\n    setMinutes: function() {                                                                                           // 2388\n      d3_time_prototype.setUTCMinutes.apply(this._, arguments);                                                        // 2389\n    },                                                                                                                 // 2390\n    setMonth: function() {                                                                                             // 2391\n      d3_time_prototype.setUTCMonth.apply(this._, arguments);                                                          // 2392\n    },                                                                                                                 // 2393\n    setSeconds: function() {                                                                                           // 2394\n      d3_time_prototype.setUTCSeconds.apply(this._, arguments);                                                        // 2395\n    },                                                                                                                 // 2396\n    setTime: function() {                                                                                              // 2397\n      d3_time_prototype.setTime.apply(this._, arguments);                                                              // 2398\n    }                                                                                                                  // 2399\n  };                                                                                                                   // 2400\n  var d3_time_prototype = Date.prototype;                                                                              // 2401\n  function d3_time_interval(local, step, number) {                                                                     // 2402\n    function round(date) {                                                                                             // 2403\n      var d0 = local(date), d1 = offset(d0, 1);                                                                        // 2404\n      return date - d0 < d1 - date ? d0 : d1;                                                                          // 2405\n    }                                                                                                                  // 2406\n    function ceil(date) {                                                                                              // 2407\n      step(date = local(new d3_date(date - 1)), 1);                                                                    // 2408\n      return date;                                                                                                     // 2409\n    }                                                                                                                  // 2410\n    function offset(date, k) {                                                                                         // 2411\n      step(date = new d3_date(+date), k);                                                                              // 2412\n      return date;                                                                                                     // 2413\n    }                                                                                                                  // 2414\n    function range(t0, t1, dt) {                                                                                       // 2415\n      var time = ceil(t0), times = [];                                                                                 // 2416\n      if (dt > 1) {                                                                                                    // 2417\n        while (time < t1) {                                                                                            // 2418\n          if (!(number(time) % dt)) times.push(new Date(+time));                                                       // 2419\n          step(time, 1);                                                                                               // 2420\n        }                                                                                                              // 2421\n      } else {                                                                                                         // 2422\n        while (time < t1) times.push(new Date(+time)), step(time, 1);                                                  // 2423\n      }                                                                                                                // 2424\n      return times;                                                                                                    // 2425\n    }                                                                                                                  // 2426\n    function range_utc(t0, t1, dt) {                                                                                   // 2427\n      try {                                                                                                            // 2428\n        d3_date = d3_date_utc;                                                                                         // 2429\n        var utc = new d3_date_utc();                                                                                   // 2430\n        utc._ = t0;                                                                                                    // 2431\n        return range(utc, t1, dt);                                                                                     // 2432\n      } finally {                                                                                                      // 2433\n        d3_date = Date;                                                                                                // 2434\n      }                                                                                                                // 2435\n    }                                                                                                                  // 2436\n    local.floor = local;                                                                                               // 2437\n    local.round = round;                                                                                               // 2438\n    local.ceil = ceil;                                                                                                 // 2439\n    local.offset = offset;                                                                                             // 2440\n    local.range = range;                                                                                               // 2441\n    var utc = local.utc = d3_time_interval_utc(local);                                                                 // 2442\n    utc.floor = utc;                                                                                                   // 2443\n    utc.round = d3_time_interval_utc(round);                                                                           // 2444\n    utc.ceil = d3_time_interval_utc(ceil);                                                                             // 2445\n    utc.offset = d3_time_interval_utc(offset);                                                                         // 2446\n    utc.range = range_utc;                                                                                             // 2447\n    return local;                                                                                                      // 2448\n  }                                                                                                                    // 2449\n  function d3_time_interval_utc(method) {                                                                              // 2450\n    return function(date, k) {                                                                                         // 2451\n      try {                                                                                                            // 2452\n        d3_date = d3_date_utc;                                                                                         // 2453\n        var utc = new d3_date_utc();                                                                                   // 2454\n        utc._ = date;                                                                                                  // 2455\n        return method(utc, k)._;                                                                                       // 2456\n      } finally {                                                                                                      // 2457\n        d3_date = Date;                                                                                                // 2458\n      }                                                                                                                // 2459\n    };                                                                                                                 // 2460\n  }                                                                                                                    // 2461\n  d3_time.year = d3_time_interval(function(date) {                                                                     // 2462\n    date = d3_time.day(date);                                                                                          // 2463\n    date.setMonth(0, 1);                                                                                               // 2464\n    return date;                                                                                                       // 2465\n  }, function(date, offset) {                                                                                          // 2466\n    date.setFullYear(date.getFullYear() + offset);                                                                     // 2467\n  }, function(date) {                                                                                                  // 2468\n    return date.getFullYear();                                                                                         // 2469\n  });                                                                                                                  // 2470\n  d3_time.years = d3_time.year.range;                                                                                  // 2471\n  d3_time.years.utc = d3_time.year.utc.range;                                                                          // 2472\n  d3_time.day = d3_time_interval(function(date) {                                                                      // 2473\n    var day = new d3_date(2e3, 0);                                                                                     // 2474\n    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());                                              // 2475\n    return day;                                                                                                        // 2476\n  }, function(date, offset) {                                                                                          // 2477\n    date.setDate(date.getDate() + offset);                                                                             // 2478\n  }, function(date) {                                                                                                  // 2479\n    return date.getDate() - 1;                                                                                         // 2480\n  });                                                                                                                  // 2481\n  d3_time.days = d3_time.day.range;                                                                                    // 2482\n  d3_time.days.utc = d3_time.day.utc.range;                                                                            // 2483\n  d3_time.dayOfYear = function(date) {                                                                                 // 2484\n    var year = d3_time.year(date);                                                                                     // 2485\n    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);            // 2486\n  };                                                                                                                   // 2487\n  [ \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\" ].forEach(function(day, i) {          // 2488\n    i = 7 - i;                                                                                                         // 2489\n    var interval = d3_time[day] = d3_time_interval(function(date) {                                                    // 2490\n      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);                                    // 2491\n      return date;                                                                                                     // 2492\n    }, function(date, offset) {                                                                                        // 2493\n      date.setDate(date.getDate() + Math.floor(offset) * 7);                                                           // 2494\n    }, function(date) {                                                                                                // 2495\n      var day = d3_time.year(date).getDay();                                                                           // 2496\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);                                  // 2497\n    });                                                                                                                // 2498\n    d3_time[day + \"s\"] = interval.range;                                                                               // 2499\n    d3_time[day + \"s\"].utc = interval.utc.range;                                                                       // 2500\n    d3_time[day + \"OfYear\"] = function(date) {                                                                         // 2501\n      var day = d3_time.year(date).getDay();                                                                           // 2502\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);                                                // 2503\n    };                                                                                                                 // 2504\n  });                                                                                                                  // 2505\n  d3_time.week = d3_time.sunday;                                                                                       // 2506\n  d3_time.weeks = d3_time.sunday.range;                                                                                // 2507\n  d3_time.weeks.utc = d3_time.sunday.utc.range;                                                                        // 2508\n  d3_time.weekOfYear = d3_time.sundayOfYear;                                                                           // 2509\n  function d3_locale_timeFormat(locale) {                                                                              // 2510\n    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;\n    function d3_time_format(template) {                                                                                // 2512\n      var n = template.length;                                                                                         // 2513\n      function format(date) {                                                                                          // 2514\n        var string = [], i = -1, j = 0, c, p, f;                                                                       // 2515\n        while (++i < n) {                                                                                              // 2516\n          if (template.charCodeAt(i) === 37) {                                                                         // 2517\n            string.push(template.slice(j, i));                                                                         // 2518\n            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);                  // 2519\n            if (f = d3_time_formats[c]) c = f(date, p == null ? c === \"e\" ? \" \" : \"0\" : p);                            // 2520\n            string.push(c);                                                                                            // 2521\n            j = i + 1;                                                                                                 // 2522\n          }                                                                                                            // 2523\n        }                                                                                                              // 2524\n        string.push(template.slice(j, i));                                                                             // 2525\n        return string.join(\"\");                                                                                        // 2526\n      }                                                                                                                // 2527\n      format.parse = function(string) {                                                                                // 2528\n        var d = {                                                                                                      // 2529\n          y: 1900,                                                                                                     // 2530\n          m: 0,                                                                                                        // 2531\n          d: 1,                                                                                                        // 2532\n          H: 0,                                                                                                        // 2533\n          M: 0,                                                                                                        // 2534\n          S: 0,                                                                                                        // 2535\n          L: 0,                                                                                                        // 2536\n          Z: null                                                                                                      // 2537\n        }, i = d3_time_parse(d, template, string, 0);                                                                  // 2538\n        if (i != string.length) return null;                                                                           // 2539\n        if (\"p\" in d) d.H = d.H % 12 + d.p * 12;                                                                       // 2540\n        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();            // 2541\n        if (\"j\" in d) date.setFullYear(d.y, 0, d.j); else if (\"W\" in d || \"U\" in d) {                                  // 2542\n          if (!(\"w\" in d)) d.w = \"W\" in d ? 1 : 0;                                                                     // 2543\n          date.setFullYear(d.y, 0, 1);                                                                                 // 2544\n          date.setFullYear(d.y, 0, \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);\n        } else date.setFullYear(d.y, d.m, d.d);                                                                        // 2546\n        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);                                               // 2547\n        return localZ ? date._ : date;                                                                                 // 2548\n      };                                                                                                               // 2549\n      format.toString = function() {                                                                                   // 2550\n        return template;                                                                                               // 2551\n      };                                                                                                               // 2552\n      return format;                                                                                                   // 2553\n    }                                                                                                                  // 2554\n    function d3_time_parse(date, template, string, j) {                                                                // 2555\n      var c, p, t, i = 0, n = template.length, m = string.length;                                                      // 2556\n      while (i < n) {                                                                                                  // 2557\n        if (j >= m) return -1;                                                                                         // 2558\n        c = template.charCodeAt(i++);                                                                                  // 2559\n        if (c === 37) {                                                                                                // 2560\n          t = template.charAt(i++);                                                                                    // 2561\n          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];                                     // 2562\n          if (!p || (j = p(date, string, j)) < 0) return -1;                                                           // 2563\n        } else if (c != string.charCodeAt(j++)) {                                                                      // 2564\n          return -1;                                                                                                   // 2565\n        }                                                                                                              // 2566\n      }                                                                                                                // 2567\n      return j;                                                                                                        // 2568\n    }                                                                                                                  // 2569\n    d3_time_format.utc = function(template) {                                                                          // 2570\n      var local = d3_time_format(template);                                                                            // 2571\n      function format(date) {                                                                                          // 2572\n        try {                                                                                                          // 2573\n          d3_date = d3_date_utc;                                                                                       // 2574\n          var utc = new d3_date();                                                                                     // 2575\n          utc._ = date;                                                                                                // 2576\n          return local(utc);                                                                                           // 2577\n        } finally {                                                                                                    // 2578\n          d3_date = Date;                                                                                              // 2579\n        }                                                                                                              // 2580\n      }                                                                                                                // 2581\n      format.parse = function(string) {                                                                                // 2582\n        try {                                                                                                          // 2583\n          d3_date = d3_date_utc;                                                                                       // 2584\n          var date = local.parse(string);                                                                              // 2585\n          return date && date._;                                                                                       // 2586\n        } finally {                                                                                                    // 2587\n          d3_date = Date;                                                                                              // 2588\n        }                                                                                                              // 2589\n      };                                                                                                               // 2590\n      format.toString = local.toString;                                                                                // 2591\n      return format;                                                                                                   // 2592\n    };                                                                                                                 // 2593\n    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;                                             // 2594\n    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);\n    locale_periods.forEach(function(p, i) {                                                                            // 2596\n      d3_time_periodLookup.set(p.toLowerCase(), i);                                                                    // 2597\n    });                                                                                                                // 2598\n    var d3_time_formats = {                                                                                            // 2599\n      a: function(d) {                                                                                                 // 2600\n        return locale_shortDays[d.getDay()];                                                                           // 2601\n      },                                                                                                               // 2602\n      A: function(d) {                                                                                                 // 2603\n        return locale_days[d.getDay()];                                                                                // 2604\n      },                                                                                                               // 2605\n      b: function(d) {                                                                                                 // 2606\n        return locale_shortMonths[d.getMonth()];                                                                       // 2607\n      },                                                                                                               // 2608\n      B: function(d) {                                                                                                 // 2609\n        return locale_months[d.getMonth()];                                                                            // 2610\n      },                                                                                                               // 2611\n      c: d3_time_format(locale_dateTime),                                                                              // 2612\n      d: function(d, p) {                                                                                              // 2613\n        return d3_time_formatPad(d.getDate(), p, 2);                                                                   // 2614\n      },                                                                                                               // 2615\n      e: function(d, p) {                                                                                              // 2616\n        return d3_time_formatPad(d.getDate(), p, 2);                                                                   // 2617\n      },                                                                                                               // 2618\n      H: function(d, p) {                                                                                              // 2619\n        return d3_time_formatPad(d.getHours(), p, 2);                                                                  // 2620\n      },                                                                                                               // 2621\n      I: function(d, p) {                                                                                              // 2622\n        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);                                                       // 2623\n      },                                                                                                               // 2624\n      j: function(d, p) {                                                                                              // 2625\n        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);                                                      // 2626\n      },                                                                                                               // 2627\n      L: function(d, p) {                                                                                              // 2628\n        return d3_time_formatPad(d.getMilliseconds(), p, 3);                                                           // 2629\n      },                                                                                                               // 2630\n      m: function(d, p) {                                                                                              // 2631\n        return d3_time_formatPad(d.getMonth() + 1, p, 2);                                                              // 2632\n      },                                                                                                               // 2633\n      M: function(d, p) {                                                                                              // 2634\n        return d3_time_formatPad(d.getMinutes(), p, 2);                                                                // 2635\n      },                                                                                                               // 2636\n      p: function(d) {                                                                                                 // 2637\n        return locale_periods[+(d.getHours() >= 12)];                                                                  // 2638\n      },                                                                                                               // 2639\n      S: function(d, p) {                                                                                              // 2640\n        return d3_time_formatPad(d.getSeconds(), p, 2);                                                                // 2641\n      },                                                                                                               // 2642\n      U: function(d, p) {                                                                                              // 2643\n        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);                                                       // 2644\n      },                                                                                                               // 2645\n      w: function(d) {                                                                                                 // 2646\n        return d.getDay();                                                                                             // 2647\n      },                                                                                                               // 2648\n      W: function(d, p) {                                                                                              // 2649\n        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);                                                       // 2650\n      },                                                                                                               // 2651\n      x: d3_time_format(locale_date),                                                                                  // 2652\n      X: d3_time_format(locale_time),                                                                                  // 2653\n      y: function(d, p) {                                                                                              // 2654\n        return d3_time_formatPad(d.getFullYear() % 100, p, 2);                                                         // 2655\n      },                                                                                                               // 2656\n      Y: function(d, p) {                                                                                              // 2657\n        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);                                                         // 2658\n      },                                                                                                               // 2659\n      Z: d3_time_zone,                                                                                                 // 2660\n      \"%\": function() {                                                                                                // 2661\n        return \"%\";                                                                                                    // 2662\n      }                                                                                                                // 2663\n    };                                                                                                                 // 2664\n    var d3_time_parsers = {                                                                                            // 2665\n      a: d3_time_parseWeekdayAbbrev,                                                                                   // 2666\n      A: d3_time_parseWeekday,                                                                                         // 2667\n      b: d3_time_parseMonthAbbrev,                                                                                     // 2668\n      B: d3_time_parseMonth,                                                                                           // 2669\n      c: d3_time_parseLocaleFull,                                                                                      // 2670\n      d: d3_time_parseDay,                                                                                             // 2671\n      e: d3_time_parseDay,                                                                                             // 2672\n      H: d3_time_parseHour24,                                                                                          // 2673\n      I: d3_time_parseHour24,                                                                                          // 2674\n      j: d3_time_parseDayOfYear,                                                                                       // 2675\n      L: d3_time_parseMilliseconds,                                                                                    // 2676\n      m: d3_time_parseMonthNumber,                                                                                     // 2677\n      M: d3_time_parseMinutes,                                                                                         // 2678\n      p: d3_time_parseAmPm,                                                                                            // 2679\n      S: d3_time_parseSeconds,                                                                                         // 2680\n      U: d3_time_parseWeekNumberSunday,                                                                                // 2681\n      w: d3_time_parseWeekdayNumber,                                                                                   // 2682\n      W: d3_time_parseWeekNumberMonday,                                                                                // 2683\n      x: d3_time_parseLocaleDate,                                                                                      // 2684\n      X: d3_time_parseLocaleTime,                                                                                      // 2685\n      y: d3_time_parseYear,                                                                                            // 2686\n      Y: d3_time_parseFullYear,                                                                                        // 2687\n      Z: d3_time_parseZone,                                                                                            // 2688\n      \"%\": d3_time_parseLiteralPercent                                                                                 // 2689\n    };                                                                                                                 // 2690\n    function d3_time_parseWeekdayAbbrev(date, string, i) {                                                             // 2691\n      d3_time_dayAbbrevRe.lastIndex = 0;                                                                               // 2692\n      var n = d3_time_dayAbbrevRe.exec(string.slice(i));                                                               // 2693\n      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;                     // 2694\n    }                                                                                                                  // 2695\n    function d3_time_parseWeekday(date, string, i) {                                                                   // 2696\n      d3_time_dayRe.lastIndex = 0;                                                                                     // 2697\n      var n = d3_time_dayRe.exec(string.slice(i));                                                                     // 2698\n      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;                           // 2699\n    }                                                                                                                  // 2700\n    function d3_time_parseMonthAbbrev(date, string, i) {                                                               // 2701\n      d3_time_monthAbbrevRe.lastIndex = 0;                                                                             // 2702\n      var n = d3_time_monthAbbrevRe.exec(string.slice(i));                                                             // 2703\n      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;                   // 2704\n    }                                                                                                                  // 2705\n    function d3_time_parseMonth(date, string, i) {                                                                     // 2706\n      d3_time_monthRe.lastIndex = 0;                                                                                   // 2707\n      var n = d3_time_monthRe.exec(string.slice(i));                                                                   // 2708\n      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;                         // 2709\n    }                                                                                                                  // 2710\n    function d3_time_parseLocaleFull(date, string, i) {                                                                // 2711\n      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);                                             // 2712\n    }                                                                                                                  // 2713\n    function d3_time_parseLocaleDate(date, string, i) {                                                                // 2714\n      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);                                             // 2715\n    }                                                                                                                  // 2716\n    function d3_time_parseLocaleTime(date, string, i) {                                                                // 2717\n      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);                                             // 2718\n    }                                                                                                                  // 2719\n    function d3_time_parseAmPm(date, string, i) {                                                                      // 2720\n      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());                                         // 2721\n      return n == null ? -1 : (date.p = n, i);                                                                         // 2722\n    }                                                                                                                  // 2723\n    return d3_time_format;                                                                                             // 2724\n  }                                                                                                                    // 2725\n  var d3_time_formatPads = {                                                                                           // 2726\n    \"-\": \"\",                                                                                                           // 2727\n    _: \" \",                                                                                                            // 2728\n    \"0\": \"0\"                                                                                                           // 2729\n  }, d3_time_numberRe = /^\\s*\\d+/, d3_time_percentRe = /^%/;                                                           // 2730\n  function d3_time_formatPad(value, fill, width) {                                                                     // 2731\n    var sign = value < 0 ? \"-\" : \"\", string = (sign ? -value : value) + \"\", length = string.length;                    // 2732\n    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);                       // 2733\n  }                                                                                                                    // 2734\n  function d3_time_formatRe(names) {                                                                                   // 2735\n    return new RegExp(\"^(?:\" + names.map(d3.requote).join(\"|\") + \")\", \"i\");                                            // 2736\n  }                                                                                                                    // 2737\n  function d3_time_formatLookup(names) {                                                                               // 2738\n    var map = new d3_Map(), i = -1, n = names.length;                                                                  // 2739\n    while (++i < n) map.set(names[i].toLowerCase(), i);                                                                // 2740\n    return map;                                                                                                        // 2741\n  }                                                                                                                    // 2742\n  function d3_time_parseWeekdayNumber(date, string, i) {                                                               // 2743\n    d3_time_numberRe.lastIndex = 0;                                                                                    // 2744\n    var n = d3_time_numberRe.exec(string.slice(i, i + 1));                                                             // 2745\n    return n ? (date.w = +n[0], i + n[0].length) : -1;                                                                 // 2746\n  }                                                                                                                    // 2747\n  function d3_time_parseWeekNumberSunday(date, string, i) {                                                            // 2748\n    d3_time_numberRe.lastIndex = 0;                                                                                    // 2749\n    var n = d3_time_numberRe.exec(string.slice(i));                                                                    // 2750\n    return n ? (date.U = +n[0], i + n[0].length) : -1;                                                                 // 2751\n  }                                                                                                                    // 2752\n  function d3_time_parseWeekNumberMonday(date, string, i) {                                                            // 2753\n    d3_time_numberRe.lastIndex = 0;                                                                                    // 2754\n    var n = d3_time_numberRe.exec(string.slice(i));                                                                    // 2755\n    return n ? (date.W = +n[0], i + n[0].length) : -1;                                                                 // 2756\n  }                                                                                                                    // 2757\n  function d3_time_parseFullYear(date, string, i) {                                                                    // 2758\n    d3_time_numberRe.lastIndex = 0;                                                                                    // 2759\n    var n = d3_time_numberRe.exec(string.slice(i, i + 4));                                                             // 2760\n    return n ? (date.y = +n[0], i + n[0].length) : -1;                                                                 // 2761\n  }                                                                                                                    // 2762\n  function d3_time_parseYear(date, string, i) {                                                                        // 2763\n    d3_time_numberRe.lastIndex = 0;                                                                                    // 2764\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));                                                             // 2765\n    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;                                             // 2766\n  }                                                                                                                    // 2767\n  function d3_time_parseZone(date, string, i) {                                                                        // 2768\n    return /^[+-]\\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string,                                    // 2769\n    i + 5) : -1;                                                                                                       // 2770\n  }                                                                                                                    // 2771\n  function d3_time_expandYear(d) {                                                                                     // 2772\n    return d + (d > 68 ? 1900 : 2e3);                                                                                  // 2773\n  }                                                                                                                    // 2774\n  function d3_time_parseMonthNumber(date, string, i) {                                                                 // 2775\n    d3_time_numberRe.lastIndex = 0;                                                                                    // 2776\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));                                                             // 2777\n    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;                                                              // 2778\n  }                                                                                                                    // 2779\n  function d3_time_parseDay(date, string, i) {                                                                         // 2780\n    d3_time_numberRe.lastIndex = 0;                                                                                    // 2781\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));                                                             // 2782\n    return n ? (date.d = +n[0], i + n[0].length) : -1;                                                                 // 2783\n  }                                                                                                                    // 2784\n  function d3_time_parseDayOfYear(date, string, i) {                                                                   // 2785\n    d3_time_numberRe.lastIndex = 0;                                                                                    // 2786\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));                                                             // 2787\n    return n ? (date.j = +n[0], i + n[0].length) : -1;                                                                 // 2788\n  }                                                                                                                    // 2789\n  function d3_time_parseHour24(date, string, i) {                                                                      // 2790\n    d3_time_numberRe.lastIndex = 0;                                                                                    // 2791\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));                                                             // 2792\n    return n ? (date.H = +n[0], i + n[0].length) : -1;                                                                 // 2793\n  }                                                                                                                    // 2794\n  function d3_time_parseMinutes(date, string, i) {                                                                     // 2795\n    d3_time_numberRe.lastIndex = 0;                                                                                    // 2796\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));                                                             // 2797\n    return n ? (date.M = +n[0], i + n[0].length) : -1;                                                                 // 2798\n  }                                                                                                                    // 2799\n  function d3_time_parseSeconds(date, string, i) {                                                                     // 2800\n    d3_time_numberRe.lastIndex = 0;                                                                                    // 2801\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));                                                             // 2802\n    return n ? (date.S = +n[0], i + n[0].length) : -1;                                                                 // 2803\n  }                                                                                                                    // 2804\n  function d3_time_parseMilliseconds(date, string, i) {                                                                // 2805\n    d3_time_numberRe.lastIndex = 0;                                                                                    // 2806\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));                                                             // 2807\n    return n ? (date.L = +n[0], i + n[0].length) : -1;                                                                 // 2808\n  }                                                                                                                    // 2809\n  function d3_time_zone(d) {                                                                                           // 2810\n    var z = d.getTimezoneOffset(), zs = z > 0 ? \"-\" : \"+\", zh = abs(z) / 60 | 0, zm = abs(z) % 60;                     // 2811\n    return zs + d3_time_formatPad(zh, \"0\", 2) + d3_time_formatPad(zm, \"0\", 2);                                         // 2812\n  }                                                                                                                    // 2813\n  function d3_time_parseLiteralPercent(date, string, i) {                                                              // 2814\n    d3_time_percentRe.lastIndex = 0;                                                                                   // 2815\n    var n = d3_time_percentRe.exec(string.slice(i, i + 1));                                                            // 2816\n    return n ? i + n[0].length : -1;                                                                                   // 2817\n  }                                                                                                                    // 2818\n  function d3_time_formatMulti(formats) {                                                                              // 2819\n    var n = formats.length, i = -1;                                                                                    // 2820\n    while (++i < n) formats[i][0] = this(formats[i][0]);                                                               // 2821\n    return function(date) {                                                                                            // 2822\n      var i = 0, f = formats[i];                                                                                       // 2823\n      while (!f[1](date)) f = formats[++i];                                                                            // 2824\n      return f[0](date);                                                                                               // 2825\n    };                                                                                                                 // 2826\n  }                                                                                                                    // 2827\n  d3.locale = function(locale) {                                                                                       // 2828\n    return {                                                                                                           // 2829\n      numberFormat: d3_locale_numberFormat(locale),                                                                    // 2830\n      timeFormat: d3_locale_timeFormat(locale)                                                                         // 2831\n    };                                                                                                                 // 2832\n  };                                                                                                                   // 2833\n  var d3_locale_enUS = d3.locale({                                                                                     // 2834\n    decimal: \".\",                                                                                                      // 2835\n    thousands: \",\",                                                                                                    // 2836\n    grouping: [ 3 ],                                                                                                   // 2837\n    currency: [ \"$\", \"\" ],                                                                                             // 2838\n    dateTime: \"%a %b %e %X %Y\",                                                                                        // 2839\n    date: \"%m/%d/%Y\",                                                                                                  // 2840\n    time: \"%H:%M:%S\",                                                                                                  // 2841\n    periods: [ \"AM\", \"PM\" ],                                                                                           // 2842\n    days: [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ],                            // 2843\n    shortDays: [ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" ],                                                    // 2844\n    months: [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ],\n    shortMonths: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ]                // 2846\n  });                                                                                                                  // 2847\n  d3.format = d3_locale_enUS.numberFormat;                                                                             // 2848\n  d3.geo = {};                                                                                                         // 2849\n  function d3_adder() {}                                                                                               // 2850\n  d3_adder.prototype = {                                                                                               // 2851\n    s: 0,                                                                                                              // 2852\n    t: 0,                                                                                                              // 2853\n    add: function(y) {                                                                                                 // 2854\n      d3_adderSum(y, this.t, d3_adderTemp);                                                                            // 2855\n      d3_adderSum(d3_adderTemp.s, this.s, this);                                                                       // 2856\n      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;                                              // 2857\n    },                                                                                                                 // 2858\n    reset: function() {                                                                                                // 2859\n      this.s = this.t = 0;                                                                                             // 2860\n    },                                                                                                                 // 2861\n    valueOf: function() {                                                                                              // 2862\n      return this.s;                                                                                                   // 2863\n    }                                                                                                                  // 2864\n  };                                                                                                                   // 2865\n  var d3_adderTemp = new d3_adder();                                                                                   // 2866\n  function d3_adderSum(a, b, o) {                                                                                      // 2867\n    var x = o.s = a + b, bv = x - a, av = x - bv;                                                                      // 2868\n    o.t = a - av + (b - bv);                                                                                           // 2869\n  }                                                                                                                    // 2870\n  d3.geo.stream = function(object, listener) {                                                                         // 2871\n    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {                                               // 2872\n      d3_geo_streamObjectType[object.type](object, listener);                                                          // 2873\n    } else {                                                                                                           // 2874\n      d3_geo_streamGeometry(object, listener);                                                                         // 2875\n    }                                                                                                                  // 2876\n  };                                                                                                                   // 2877\n  function d3_geo_streamGeometry(geometry, listener) {                                                                 // 2878\n    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {                                         // 2879\n      d3_geo_streamGeometryType[geometry.type](geometry, listener);                                                    // 2880\n    }                                                                                                                  // 2881\n  }                                                                                                                    // 2882\n  var d3_geo_streamObjectType = {                                                                                      // 2883\n    Feature: function(feature, listener) {                                                                             // 2884\n      d3_geo_streamGeometry(feature.geometry, listener);                                                               // 2885\n    },                                                                                                                 // 2886\n    FeatureCollection: function(object, listener) {                                                                    // 2887\n      var features = object.features, i = -1, n = features.length;                                                     // 2888\n      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);                                           // 2889\n    }                                                                                                                  // 2890\n  };                                                                                                                   // 2891\n  var d3_geo_streamGeometryType = {                                                                                    // 2892\n    Sphere: function(object, listener) {                                                                               // 2893\n      listener.sphere();                                                                                               // 2894\n    },                                                                                                                 // 2895\n    Point: function(object, listener) {                                                                                // 2896\n      object = object.coordinates;                                                                                     // 2897\n      listener.point(object[0], object[1], object[2]);                                                                 // 2898\n    },                                                                                                                 // 2899\n    MultiPoint: function(object, listener) {                                                                           // 2900\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;                                            // 2901\n      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);                        // 2902\n    },                                                                                                                 // 2903\n    LineString: function(object, listener) {                                                                           // 2904\n      d3_geo_streamLine(object.coordinates, listener, 0);                                                              // 2905\n    },                                                                                                                 // 2906\n    MultiLineString: function(object, listener) {                                                                      // 2907\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;                                            // 2908\n      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);                                                  // 2909\n    },                                                                                                                 // 2910\n    Polygon: function(object, listener) {                                                                              // 2911\n      d3_geo_streamPolygon(object.coordinates, listener);                                                              // 2912\n    },                                                                                                                 // 2913\n    MultiPolygon: function(object, listener) {                                                                         // 2914\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;                                            // 2915\n      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);                                                  // 2916\n    },                                                                                                                 // 2917\n    GeometryCollection: function(object, listener) {                                                                   // 2918\n      var geometries = object.geometries, i = -1, n = geometries.length;                                               // 2919\n      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);                                                  // 2920\n    }                                                                                                                  // 2921\n  };                                                                                                                   // 2922\n  function d3_geo_streamLine(coordinates, listener, closed) {                                                          // 2923\n    var i = -1, n = coordinates.length - closed, coordinate;                                                           // 2924\n    listener.lineStart();                                                                                              // 2925\n    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);          // 2926\n    listener.lineEnd();                                                                                                // 2927\n  }                                                                                                                    // 2928\n  function d3_geo_streamPolygon(coordinates, listener) {                                                               // 2929\n    var i = -1, n = coordinates.length;                                                                                // 2930\n    listener.polygonStart();                                                                                           // 2931\n    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);                                                    // 2932\n    listener.polygonEnd();                                                                                             // 2933\n  }                                                                                                                    // 2934\n  d3.geo.area = function(object) {                                                                                     // 2935\n    d3_geo_areaSum = 0;                                                                                                // 2936\n    d3.geo.stream(object, d3_geo_area);                                                                                // 2937\n    return d3_geo_areaSum;                                                                                             // 2938\n  };                                                                                                                   // 2939\n  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();                                                             // 2940\n  var d3_geo_area = {                                                                                                  // 2941\n    sphere: function() {                                                                                               // 2942\n      d3_geo_areaSum += 4 * π;                                                                                         // 2943\n    },                                                                                                                 // 2944\n    point: d3_noop,                                                                                                    // 2945\n    lineStart: d3_noop,                                                                                                // 2946\n    lineEnd: d3_noop,                                                                                                  // 2947\n    polygonStart: function() {                                                                                         // 2948\n      d3_geo_areaRingSum.reset();                                                                                      // 2949\n      d3_geo_area.lineStart = d3_geo_areaRingStart;                                                                    // 2950\n    },                                                                                                                 // 2951\n    polygonEnd: function() {                                                                                           // 2952\n      var area = 2 * d3_geo_areaRingSum;                                                                               // 2953\n      d3_geo_areaSum += area < 0 ? 4 * π + area : area;                                                                // 2954\n      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;                                       // 2955\n    }                                                                                                                  // 2956\n  };                                                                                                                   // 2957\n  function d3_geo_areaRingStart() {                                                                                    // 2958\n    var λ00, φ00, λ0, cosφ0, sinφ0;                                                                                    // 2959\n    d3_geo_area.point = function(λ, φ) {                                                                               // 2960\n      d3_geo_area.point = nextPoint;                                                                                   // 2961\n      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4),                           // 2962\n      sinφ0 = Math.sin(φ);                                                                                             // 2963\n    };                                                                                                                 // 2964\n    function nextPoint(λ, φ) {                                                                                         // 2965\n      λ *= d3_radians;                                                                                                 // 2966\n      φ = φ * d3_radians / 2 + π / 4;                                                                                  // 2967\n      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);\n      d3_geo_areaRingSum.add(Math.atan2(v, u));                                                                        // 2969\n      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;                                                                              // 2970\n    }                                                                                                                  // 2971\n    d3_geo_area.lineEnd = function() {                                                                                 // 2972\n      nextPoint(λ00, φ00);                                                                                             // 2973\n    };                                                                                                                 // 2974\n  }                                                                                                                    // 2975\n  function d3_geo_cartesian(spherical) {                                                                               // 2976\n    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);                                                        // 2977\n    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];                                                    // 2978\n  }                                                                                                                    // 2979\n  function d3_geo_cartesianDot(a, b) {                                                                                 // 2980\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];                                                                    // 2981\n  }                                                                                                                    // 2982\n  function d3_geo_cartesianCross(a, b) {                                                                               // 2983\n    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];                        // 2984\n  }                                                                                                                    // 2985\n  function d3_geo_cartesianAdd(a, b) {                                                                                 // 2986\n    a[0] += b[0];                                                                                                      // 2987\n    a[1] += b[1];                                                                                                      // 2988\n    a[2] += b[2];                                                                                                      // 2989\n  }                                                                                                                    // 2990\n  function d3_geo_cartesianScale(vector, k) {                                                                          // 2991\n    return [ vector[0] * k, vector[1] * k, vector[2] * k ];                                                            // 2992\n  }                                                                                                                    // 2993\n  function d3_geo_cartesianNormalize(d) {                                                                              // 2994\n    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);                                                        // 2995\n    d[0] /= l;                                                                                                         // 2996\n    d[1] /= l;                                                                                                         // 2997\n    d[2] /= l;                                                                                                         // 2998\n  }                                                                                                                    // 2999\n  function d3_geo_spherical(cartesian) {                                                                               // 3000\n    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];                                          // 3001\n  }                                                                                                                    // 3002\n  function d3_geo_sphericalEqual(a, b) {                                                                               // 3003\n    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;                                                               // 3004\n  }                                                                                                                    // 3005\n  d3.geo.bounds = function() {                                                                                         // 3006\n    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;                                                        // 3007\n    var bound = {                                                                                                      // 3008\n      point: point,                                                                                                    // 3009\n      lineStart: lineStart,                                                                                            // 3010\n      lineEnd: lineEnd,                                                                                                // 3011\n      polygonStart: function() {                                                                                       // 3012\n        bound.point = ringPoint;                                                                                       // 3013\n        bound.lineStart = ringStart;                                                                                   // 3014\n        bound.lineEnd = ringEnd;                                                                                       // 3015\n        dλSum = 0;                                                                                                     // 3016\n        d3_geo_area.polygonStart();                                                                                    // 3017\n      },                                                                                                               // 3018\n      polygonEnd: function() {                                                                                         // 3019\n        d3_geo_area.polygonEnd();                                                                                      // 3020\n        bound.point = point;                                                                                           // 3021\n        bound.lineStart = lineStart;                                                                                   // 3022\n        bound.lineEnd = lineEnd;                                                                                       // 3023\n        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;\n        range[0] = λ0, range[1] = λ1;                                                                                  // 3025\n      }                                                                                                                // 3026\n    };                                                                                                                 // 3027\n    function point(λ, φ) {                                                                                             // 3028\n      ranges.push(range = [ λ0 = λ, λ1 = λ ]);                                                                         // 3029\n      if (φ < φ0) φ0 = φ;                                                                                              // 3030\n      if (φ > φ1) φ1 = φ;                                                                                              // 3031\n    }                                                                                                                  // 3032\n    function linePoint(λ, φ) {                                                                                         // 3033\n      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);                                                    // 3034\n      if (p0) {                                                                                                        // 3035\n        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);\n        d3_geo_cartesianNormalize(inflection);                                                                         // 3037\n        inflection = d3_geo_spherical(inflection);                                                                     // 3038\n        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;       // 3039\n        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {                                                              // 3040\n          var φi = inflection[1] * d3_degrees;                                                                         // 3041\n          if (φi > φ1) φ1 = φi;                                                                                        // 3042\n        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {                          // 3043\n          var φi = -inflection[1] * d3_degrees;                                                                        // 3044\n          if (φi < φ0) φ0 = φi;                                                                                        // 3045\n        } else {                                                                                                       // 3046\n          if (φ < φ0) φ0 = φ;                                                                                          // 3047\n          if (φ > φ1) φ1 = φ;                                                                                          // 3048\n        }                                                                                                              // 3049\n        if (antimeridian) {                                                                                            // 3050\n          if (λ < λ_) {                                                                                                // 3051\n            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;                                                                  // 3052\n          } else {                                                                                                     // 3053\n            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;                                                                  // 3054\n          }                                                                                                            // 3055\n        } else {                                                                                                       // 3056\n          if (λ1 >= λ0) {                                                                                              // 3057\n            if (λ < λ0) λ0 = λ;                                                                                        // 3058\n            if (λ > λ1) λ1 = λ;                                                                                        // 3059\n          } else {                                                                                                     // 3060\n            if (λ > λ_) {                                                                                              // 3061\n              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;                                                                // 3062\n            } else {                                                                                                   // 3063\n              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;                                                                // 3064\n            }                                                                                                          // 3065\n          }                                                                                                            // 3066\n        }                                                                                                              // 3067\n      } else {                                                                                                         // 3068\n        point(λ, φ);                                                                                                   // 3069\n      }                                                                                                                // 3070\n      p0 = p, λ_ = λ;                                                                                                  // 3071\n    }                                                                                                                  // 3072\n    function lineStart() {                                                                                             // 3073\n      bound.point = linePoint;                                                                                         // 3074\n    }                                                                                                                  // 3075\n    function lineEnd() {                                                                                               // 3076\n      range[0] = λ0, range[1] = λ1;                                                                                    // 3077\n      bound.point = point;                                                                                             // 3078\n      p0 = null;                                                                                                       // 3079\n    }                                                                                                                  // 3080\n    function ringPoint(λ, φ) {                                                                                         // 3081\n      if (p0) {                                                                                                        // 3082\n        var dλ = λ - λ_;                                                                                               // 3083\n        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;                                                      // 3084\n      } else λ__ = λ, φ__ = φ;                                                                                         // 3085\n      d3_geo_area.point(λ, φ);                                                                                         // 3086\n      linePoint(λ, φ);                                                                                                 // 3087\n    }                                                                                                                  // 3088\n    function ringStart() {                                                                                             // 3089\n      d3_geo_area.lineStart();                                                                                         // 3090\n    }                                                                                                                  // 3091\n    function ringEnd() {                                                                                               // 3092\n      ringPoint(λ__, φ__);                                                                                             // 3093\n      d3_geo_area.lineEnd();                                                                                           // 3094\n      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);                                                                            // 3095\n      range[0] = λ0, range[1] = λ1;                                                                                    // 3096\n      p0 = null;                                                                                                       // 3097\n    }                                                                                                                  // 3098\n    function angle(λ0, λ1) {                                                                                           // 3099\n      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;                                                                           // 3100\n    }                                                                                                                  // 3101\n    function compareRanges(a, b) {                                                                                     // 3102\n      return a[0] - b[0];                                                                                              // 3103\n    }                                                                                                                  // 3104\n    function withinRange(x, range) {                                                                                   // 3105\n      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;                     // 3106\n    }                                                                                                                  // 3107\n    return function(feature) {                                                                                         // 3108\n      φ1 = λ1 = -(λ0 = φ0 = Infinity);                                                                                 // 3109\n      ranges = [];                                                                                                     // 3110\n      d3.geo.stream(feature, bound);                                                                                   // 3111\n      var n = ranges.length;                                                                                           // 3112\n      if (n) {                                                                                                         // 3113\n        ranges.sort(compareRanges);                                                                                    // 3114\n        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {                                                // 3115\n          b = ranges[i];                                                                                               // 3116\n          if (withinRange(b[0], a) || withinRange(b[1], a)) {                                                          // 3117\n            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];                                                    // 3118\n            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];                                                    // 3119\n          } else {                                                                                                     // 3120\n            merged.push(a = b);                                                                                        // 3121\n          }                                                                                                            // 3122\n        }                                                                                                              // 3123\n        var best = -Infinity, dλ;                                                                                      // 3124\n        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {                                 // 3125\n          b = merged[i];                                                                                               // 3126\n          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];                                        // 3127\n        }                                                                                                              // 3128\n      }                                                                                                                // 3129\n      ranges = range = null;                                                                                           // 3130\n      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];         // 3131\n    };                                                                                                                 // 3132\n  }();                                                                                                                 // 3133\n  d3.geo.centroid = function(object) {                                                                                 // 3134\n    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n    d3.geo.stream(object, d3_geo_centroid);                                                                            // 3136\n    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;                // 3137\n    if (m < ε2) {                                                                                                      // 3138\n      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;                                             // 3139\n      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;                  // 3140\n      m = x * x + y * y + z * z;                                                                                       // 3141\n      if (m < ε2) return [ NaN, NaN ];                                                                                 // 3142\n    }                                                                                                                  // 3143\n    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];                                  // 3144\n  };                                                                                                                   // 3145\n  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;\n  var d3_geo_centroid = {                                                                                              // 3147\n    sphere: d3_noop,                                                                                                   // 3148\n    point: d3_geo_centroidPoint,                                                                                       // 3149\n    lineStart: d3_geo_centroidLineStart,                                                                               // 3150\n    lineEnd: d3_geo_centroidLineEnd,                                                                                   // 3151\n    polygonStart: function() {                                                                                         // 3152\n      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;                                                            // 3153\n    },                                                                                                                 // 3154\n    polygonEnd: function() {                                                                                           // 3155\n      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;                                                            // 3156\n    }                                                                                                                  // 3157\n  };                                                                                                                   // 3158\n  function d3_geo_centroidPoint(λ, φ) {                                                                                // 3159\n    λ *= d3_radians;                                                                                                   // 3160\n    var cosφ = Math.cos(φ *= d3_radians);                                                                              // 3161\n    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));                                      // 3162\n  }                                                                                                                    // 3163\n  function d3_geo_centroidPointXYZ(x, y, z) {                                                                          // 3164\n    ++d3_geo_centroidW0;                                                                                               // 3165\n    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;                                                  // 3166\n    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;                                                  // 3167\n    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;                                                  // 3168\n  }                                                                                                                    // 3169\n  function d3_geo_centroidLineStart() {                                                                                // 3170\n    var x0, y0, z0;                                                                                                    // 3171\n    d3_geo_centroid.point = function(λ, φ) {                                                                           // 3172\n      λ *= d3_radians;                                                                                                 // 3173\n      var cosφ = Math.cos(φ *= d3_radians);                                                                            // 3174\n      x0 = cosφ * Math.cos(λ);                                                                                         // 3175\n      y0 = cosφ * Math.sin(λ);                                                                                         // 3176\n      z0 = Math.sin(φ);                                                                                                // 3177\n      d3_geo_centroid.point = nextPoint;                                                                               // 3178\n      d3_geo_centroidPointXYZ(x0, y0, z0);                                                                             // 3179\n    };                                                                                                                 // 3180\n    function nextPoint(λ, φ) {                                                                                         // 3181\n      λ *= d3_radians;                                                                                                 // 3182\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n      d3_geo_centroidW1 += w;                                                                                          // 3184\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));                                                                        // 3185\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));                                                                        // 3186\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));                                                                        // 3187\n      d3_geo_centroidPointXYZ(x0, y0, z0);                                                                             // 3188\n    }                                                                                                                  // 3189\n  }                                                                                                                    // 3190\n  function d3_geo_centroidLineEnd() {                                                                                  // 3191\n    d3_geo_centroid.point = d3_geo_centroidPoint;                                                                      // 3192\n  }                                                                                                                    // 3193\n  function d3_geo_centroidRingStart() {                                                                                // 3194\n    var λ00, φ00, x0, y0, z0;                                                                                          // 3195\n    d3_geo_centroid.point = function(λ, φ) {                                                                           // 3196\n      λ00 = λ, φ00 = φ;                                                                                                // 3197\n      d3_geo_centroid.point = nextPoint;                                                                               // 3198\n      λ *= d3_radians;                                                                                                 // 3199\n      var cosφ = Math.cos(φ *= d3_radians);                                                                            // 3200\n      x0 = cosφ * Math.cos(λ);                                                                                         // 3201\n      y0 = cosφ * Math.sin(λ);                                                                                         // 3202\n      z0 = Math.sin(φ);                                                                                                // 3203\n      d3_geo_centroidPointXYZ(x0, y0, z0);                                                                             // 3204\n    };                                                                                                                 // 3205\n    d3_geo_centroid.lineEnd = function() {                                                                             // 3206\n      nextPoint(λ00, φ00);                                                                                             // 3207\n      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;                                                                // 3208\n      d3_geo_centroid.point = d3_geo_centroidPoint;                                                                    // 3209\n    };                                                                                                                 // 3210\n    function nextPoint(λ, φ) {                                                                                         // 3211\n      λ *= d3_radians;                                                                                                 // 3212\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);\n      d3_geo_centroidX2 += v * cx;                                                                                     // 3214\n      d3_geo_centroidY2 += v * cy;                                                                                     // 3215\n      d3_geo_centroidZ2 += v * cz;                                                                                     // 3216\n      d3_geo_centroidW1 += w;                                                                                          // 3217\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));                                                                        // 3218\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));                                                                        // 3219\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));                                                                        // 3220\n      d3_geo_centroidPointXYZ(x0, y0, z0);                                                                             // 3221\n    }                                                                                                                  // 3222\n  }                                                                                                                    // 3223\n  function d3_geo_compose(a, b) {                                                                                      // 3224\n    function compose(x, y) {                                                                                           // 3225\n      return x = a(x, y), b(x[0], x[1]);                                                                               // 3226\n    }                                                                                                                  // 3227\n    if (a.invert && b.invert) compose.invert = function(x, y) {                                                        // 3228\n      return x = b.invert(x, y), x && a.invert(x[0], x[1]);                                                            // 3229\n    };                                                                                                                 // 3230\n    return compose;                                                                                                    // 3231\n  }                                                                                                                    // 3232\n  function d3_true() {                                                                                                 // 3233\n    return true;                                                                                                       // 3234\n  }                                                                                                                    // 3235\n  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {                             // 3236\n    var subject = [], clip = [];                                                                                       // 3237\n    segments.forEach(function(segment) {                                                                               // 3238\n      if ((n = segment.length - 1) <= 0) return;                                                                       // 3239\n      var n, p0 = segment[0], p1 = segment[n];                                                                         // 3240\n      if (d3_geo_sphericalEqual(p0, p1)) {                                                                             // 3241\n        listener.lineStart();                                                                                          // 3242\n        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);                                       // 3243\n        listener.lineEnd();                                                                                            // 3244\n        return;                                                                                                        // 3245\n      }                                                                                                                // 3246\n      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);\n      a.o = b;                                                                                                         // 3248\n      subject.push(a);                                                                                                 // 3249\n      clip.push(b);                                                                                                    // 3250\n      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);                                                // 3251\n      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);                                                       // 3252\n      a.o = b;                                                                                                         // 3253\n      subject.push(a);                                                                                                 // 3254\n      clip.push(b);                                                                                                    // 3255\n    });                                                                                                                // 3256\n    clip.sort(compare);                                                                                                // 3257\n    d3_geo_clipPolygonLinkCircular(subject);                                                                           // 3258\n    d3_geo_clipPolygonLinkCircular(clip);                                                                              // 3259\n    if (!subject.length) return;                                                                                       // 3260\n    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {                                            // 3261\n      clip[i].e = entry = !entry;                                                                                      // 3262\n    }                                                                                                                  // 3263\n    var start = subject[0], points, point;                                                                             // 3264\n    while (1) {                                                                                                        // 3265\n      var current = start, isSubject = true;                                                                           // 3266\n      while (current.v) if ((current = current.n) === start) return;                                                   // 3267\n      points = current.z;                                                                                              // 3268\n      listener.lineStart();                                                                                            // 3269\n      do {                                                                                                             // 3270\n        current.v = current.o.v = true;                                                                                // 3271\n        if (current.e) {                                                                                               // 3272\n          if (isSubject) {                                                                                             // 3273\n            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);           // 3274\n          } else {                                                                                                     // 3275\n            interpolate(current.x, current.n.x, 1, listener);                                                          // 3276\n          }                                                                                                            // 3277\n          current = current.n;                                                                                         // 3278\n        } else {                                                                                                       // 3279\n          if (isSubject) {                                                                                             // 3280\n            points = current.p.z;                                                                                      // 3281\n            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);             // 3282\n          } else {                                                                                                     // 3283\n            interpolate(current.x, current.p.x, -1, listener);                                                         // 3284\n          }                                                                                                            // 3285\n          current = current.p;                                                                                         // 3286\n        }                                                                                                              // 3287\n        current = current.o;                                                                                           // 3288\n        points = current.z;                                                                                            // 3289\n        isSubject = !isSubject;                                                                                        // 3290\n      } while (!current.v);                                                                                            // 3291\n      listener.lineEnd();                                                                                              // 3292\n    }                                                                                                                  // 3293\n  }                                                                                                                    // 3294\n  function d3_geo_clipPolygonLinkCircular(array) {                                                                     // 3295\n    if (!(n = array.length)) return;                                                                                   // 3296\n    var n, i = 0, a = array[0], b;                                                                                     // 3297\n    while (++i < n) {                                                                                                  // 3298\n      a.n = b = array[i];                                                                                              // 3299\n      b.p = a;                                                                                                         // 3300\n      a = b;                                                                                                           // 3301\n    }                                                                                                                  // 3302\n    a.n = b = array[0];                                                                                                // 3303\n    b.p = a;                                                                                                           // 3304\n  }                                                                                                                    // 3305\n  function d3_geo_clipPolygonIntersection(point, points, other, entry) {                                               // 3306\n    this.x = point;                                                                                                    // 3307\n    this.z = points;                                                                                                   // 3308\n    this.o = other;                                                                                                    // 3309\n    this.e = entry;                                                                                                    // 3310\n    this.v = false;                                                                                                    // 3311\n    this.n = this.p = null;                                                                                            // 3312\n  }                                                                                                                    // 3313\n  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {                                               // 3314\n    return function(rotate, listener) {                                                                                // 3315\n      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);                     // 3316\n      var clip = {                                                                                                     // 3317\n        point: point,                                                                                                  // 3318\n        lineStart: lineStart,                                                                                          // 3319\n        lineEnd: lineEnd,                                                                                              // 3320\n        polygonStart: function() {                                                                                     // 3321\n          clip.point = pointRing;                                                                                      // 3322\n          clip.lineStart = ringStart;                                                                                  // 3323\n          clip.lineEnd = ringEnd;                                                                                      // 3324\n          segments = [];                                                                                               // 3325\n          polygon = [];                                                                                                // 3326\n        },                                                                                                             // 3327\n        polygonEnd: function() {                                                                                       // 3328\n          clip.point = point;                                                                                          // 3329\n          clip.lineStart = lineStart;                                                                                  // 3330\n          clip.lineEnd = lineEnd;                                                                                      // 3331\n          segments = d3.merge(segments);                                                                               // 3332\n          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);                                      // 3333\n          if (segments.length) {                                                                                       // 3334\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;                                       // 3335\n            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);                     // 3336\n          } else if (clipStartInside) {                                                                                // 3337\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;                                       // 3338\n            listener.lineStart();                                                                                      // 3339\n            interpolate(null, null, 1, listener);                                                                      // 3340\n            listener.lineEnd();                                                                                        // 3341\n          }                                                                                                            // 3342\n          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;                                           // 3343\n          segments = polygon = null;                                                                                   // 3344\n        },                                                                                                             // 3345\n        sphere: function() {                                                                                           // 3346\n          listener.polygonStart();                                                                                     // 3347\n          listener.lineStart();                                                                                        // 3348\n          interpolate(null, null, 1, listener);                                                                        // 3349\n          listener.lineEnd();                                                                                          // 3350\n          listener.polygonEnd();                                                                                       // 3351\n        }                                                                                                              // 3352\n      };                                                                                                               // 3353\n      function point(λ, φ) {                                                                                           // 3354\n        var point = rotate(λ, φ);                                                                                      // 3355\n        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);                                            // 3356\n      }                                                                                                                // 3357\n      function pointLine(λ, φ) {                                                                                       // 3358\n        var point = rotate(λ, φ);                                                                                      // 3359\n        line.point(point[0], point[1]);                                                                                // 3360\n      }                                                                                                                // 3361\n      function lineStart() {                                                                                           // 3362\n        clip.point = pointLine;                                                                                        // 3363\n        line.lineStart();                                                                                              // 3364\n      }                                                                                                                // 3365\n      function lineEnd() {                                                                                             // 3366\n        clip.point = point;                                                                                            // 3367\n        line.lineEnd();                                                                                                // 3368\n      }                                                                                                                // 3369\n      var segments;                                                                                                    // 3370\n      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;\n      function pointRing(λ, φ) {                                                                                       // 3372\n        ring.push([ λ, φ ]);                                                                                           // 3373\n        var point = rotate(λ, φ);                                                                                      // 3374\n        ringListener.point(point[0], point[1]);                                                                        // 3375\n      }                                                                                                                // 3376\n      function ringStart() {                                                                                           // 3377\n        ringListener.lineStart();                                                                                      // 3378\n        ring = [];                                                                                                     // 3379\n      }                                                                                                                // 3380\n      function ringEnd() {                                                                                             // 3381\n        pointRing(ring[0][0], ring[0][1]);                                                                             // 3382\n        ringListener.lineEnd();                                                                                        // 3383\n        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;            // 3384\n        ring.pop();                                                                                                    // 3385\n        polygon.push(ring);                                                                                            // 3386\n        ring = null;                                                                                                   // 3387\n        if (!n) return;                                                                                                // 3388\n        if (clean & 1) {                                                                                               // 3389\n          segment = ringSegments[0];                                                                                   // 3390\n          var n = segment.length - 1, i = -1, point;                                                                   // 3391\n          if (n > 0) {                                                                                                 // 3392\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;                                       // 3393\n            listener.lineStart();                                                                                      // 3394\n            while (++i < n) listener.point((point = segment[i])[0], point[1]);                                         // 3395\n            listener.lineEnd();                                                                                        // 3396\n          }                                                                                                            // 3397\n          return;                                                                                                      // 3398\n        }                                                                                                              // 3399\n        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));                    // 3400\n        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));                                                 // 3401\n      }                                                                                                                // 3402\n      return clip;                                                                                                     // 3403\n    };                                                                                                                 // 3404\n  }                                                                                                                    // 3405\n  function d3_geo_clipSegmentLength1(segment) {                                                                        // 3406\n    return segment.length > 1;                                                                                         // 3407\n  }                                                                                                                    // 3408\n  function d3_geo_clipBufferListener() {                                                                               // 3409\n    var lines = [], line;                                                                                              // 3410\n    return {                                                                                                           // 3411\n      lineStart: function() {                                                                                          // 3412\n        lines.push(line = []);                                                                                         // 3413\n      },                                                                                                               // 3414\n      point: function(λ, φ) {                                                                                          // 3415\n        line.push([ λ, φ ]);                                                                                           // 3416\n      },                                                                                                               // 3417\n      lineEnd: d3_noop,                                                                                                // 3418\n      buffer: function() {                                                                                             // 3419\n        var buffer = lines;                                                                                            // 3420\n        lines = [];                                                                                                    // 3421\n        line = null;                                                                                                   // 3422\n        return buffer;                                                                                                 // 3423\n      },                                                                                                               // 3424\n      rejoin: function() {                                                                                             // 3425\n        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));                                           // 3426\n      }                                                                                                                // 3427\n    };                                                                                                                 // 3428\n  }                                                                                                                    // 3429\n  function d3_geo_clipSort(a, b) {                                                                                     // 3430\n    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);\n  }                                                                                                                    // 3432\n  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);\n  function d3_geo_clipAntimeridianLine(listener) {                                                                     // 3434\n    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;                                                                          // 3435\n    return {                                                                                                           // 3436\n      lineStart: function() {                                                                                          // 3437\n        listener.lineStart();                                                                                          // 3438\n        clean = 1;                                                                                                     // 3439\n      },                                                                                                               // 3440\n      point: function(λ1, φ1) {                                                                                        // 3441\n        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);                                                                  // 3442\n        if (abs(dλ - π) < ε) {                                                                                         // 3443\n          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);                                                 // 3444\n          listener.point(sλ0, φ0);                                                                                     // 3445\n          listener.lineEnd();                                                                                          // 3446\n          listener.lineStart();                                                                                        // 3447\n          listener.point(sλ1, φ0);                                                                                     // 3448\n          listener.point(λ1, φ0);                                                                                      // 3449\n          clean = 0;                                                                                                   // 3450\n        } else if (sλ0 !== sλ1 && dλ >= π) {                                                                           // 3451\n          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;                                                                        // 3452\n          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;                                                                        // 3453\n          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);                                                       // 3454\n          listener.point(sλ0, φ0);                                                                                     // 3455\n          listener.lineEnd();                                                                                          // 3456\n          listener.lineStart();                                                                                        // 3457\n          listener.point(sλ1, φ0);                                                                                     // 3458\n          clean = 0;                                                                                                   // 3459\n        }                                                                                                              // 3460\n        listener.point(λ0 = λ1, φ0 = φ1);                                                                              // 3461\n        sλ0 = sλ1;                                                                                                     // 3462\n      },                                                                                                               // 3463\n      lineEnd: function() {                                                                                            // 3464\n        listener.lineEnd();                                                                                            // 3465\n        λ0 = φ0 = NaN;                                                                                                 // 3466\n      },                                                                                                               // 3467\n      clean: function() {                                                                                              // 3468\n        return 2 - clean;                                                                                              // 3469\n      }                                                                                                                // 3470\n    };                                                                                                                 // 3471\n  }                                                                                                                    // 3472\n  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {                                                          // 3473\n    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);                                                                    // 3474\n    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;\n  }                                                                                                                    // 3476\n  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {                                         // 3477\n    var φ;                                                                                                             // 3478\n    if (from == null) {                                                                                                // 3479\n      φ = direction * halfπ;                                                                                           // 3480\n      listener.point(-π, φ);                                                                                           // 3481\n      listener.point(0, φ);                                                                                            // 3482\n      listener.point(π, φ);                                                                                            // 3483\n      listener.point(π, 0);                                                                                            // 3484\n      listener.point(π, -φ);                                                                                           // 3485\n      listener.point(0, -φ);                                                                                           // 3486\n      listener.point(-π, -φ);                                                                                          // 3487\n      listener.point(-π, 0);                                                                                           // 3488\n      listener.point(-π, φ);                                                                                           // 3489\n    } else if (abs(from[0] - to[0]) > ε) {                                                                             // 3490\n      var s = from[0] < to[0] ? π : -π;                                                                                // 3491\n      φ = direction * s / 2;                                                                                           // 3492\n      listener.point(-s, φ);                                                                                           // 3493\n      listener.point(0, φ);                                                                                            // 3494\n      listener.point(s, φ);                                                                                            // 3495\n    } else {                                                                                                           // 3496\n      listener.point(to[0], to[1]);                                                                                    // 3497\n    }                                                                                                                  // 3498\n  }                                                                                                                    // 3499\n  function d3_geo_pointInPolygon(point, polygon) {                                                                     // 3500\n    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;\n    d3_geo_areaRingSum.reset();                                                                                        // 3502\n    for (var i = 0, n = polygon.length; i < n; ++i) {                                                                  // 3503\n      var ring = polygon[i], m = ring.length;                                                                          // 3504\n      if (!m) continue;                                                                                                // 3505\n      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;\n      while (true) {                                                                                                   // 3507\n        if (j === m) j = 0;                                                                                            // 3508\n        point = ring[j];                                                                                               // 3509\n        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;\n        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));                 // 3511\n        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;                                                                // 3512\n        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {                                                           // 3513\n          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));                          // 3514\n          d3_geo_cartesianNormalize(arc);                                                                              // 3515\n          var intersection = d3_geo_cartesianCross(meridianNormal, arc);                                               // 3516\n          d3_geo_cartesianNormalize(intersection);                                                                     // 3517\n          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);                                     // 3518\n          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {                                            // 3519\n            winding += antimeridian ^ dλ >= 0 ? 1 : -1;                                                                // 3520\n          }                                                                                                            // 3521\n        }                                                                                                              // 3522\n        if (!j++) break;                                                                                               // 3523\n        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;                                                            // 3524\n      }                                                                                                                // 3525\n    }                                                                                                                  // 3526\n    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < 0) ^ winding & 1;                                // 3527\n  }                                                                                                                    // 3528\n  function d3_geo_clipCircle(radius) {                                                                                 // 3529\n    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);\n    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);             // 3531\n    function visible(λ, φ) {                                                                                           // 3532\n      return Math.cos(λ) * Math.cos(φ) > cr;                                                                           // 3533\n    }                                                                                                                  // 3534\n    function clipLine(listener) {                                                                                      // 3535\n      var point0, c0, v0, v00, clean;                                                                                  // 3536\n      return {                                                                                                         // 3537\n        lineStart: function() {                                                                                        // 3538\n          v00 = v0 = false;                                                                                            // 3539\n          clean = 1;                                                                                                   // 3540\n        },                                                                                                             // 3541\n        point: function(λ, φ) {                                                                                        // 3542\n          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;\n          if (!point0 && (v00 = v0 = v)) listener.lineStart();                                                         // 3544\n          if (v !== v0) {                                                                                              // 3545\n            point2 = intersect(point0, point1);                                                                        // 3546\n            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {                      // 3547\n              point1[0] += ε;                                                                                          // 3548\n              point1[1] += ε;                                                                                          // 3549\n              v = visible(point1[0], point1[1]);                                                                       // 3550\n            }                                                                                                          // 3551\n          }                                                                                                            // 3552\n          if (v !== v0) {                                                                                              // 3553\n            clean = 0;                                                                                                 // 3554\n            if (v) {                                                                                                   // 3555\n              listener.lineStart();                                                                                    // 3556\n              point2 = intersect(point1, point0);                                                                      // 3557\n              listener.point(point2[0], point2[1]);                                                                    // 3558\n            } else {                                                                                                   // 3559\n              point2 = intersect(point0, point1);                                                                      // 3560\n              listener.point(point2[0], point2[1]);                                                                    // 3561\n              listener.lineEnd();                                                                                      // 3562\n            }                                                                                                          // 3563\n            point0 = point2;                                                                                           // 3564\n          } else if (notHemisphere && point0 && smallRadius ^ v) {                                                     // 3565\n            var t;                                                                                                     // 3566\n            if (!(c & c0) && (t = intersect(point1, point0, true))) {                                                  // 3567\n              clean = 0;                                                                                               // 3568\n              if (smallRadius) {                                                                                       // 3569\n                listener.lineStart();                                                                                  // 3570\n                listener.point(t[0][0], t[0][1]);                                                                      // 3571\n                listener.point(t[1][0], t[1][1]);                                                                      // 3572\n                listener.lineEnd();                                                                                    // 3573\n              } else {                                                                                                 // 3574\n                listener.point(t[1][0], t[1][1]);                                                                      // 3575\n                listener.lineEnd();                                                                                    // 3576\n                listener.lineStart();                                                                                  // 3577\n                listener.point(t[0][0], t[0][1]);                                                                      // 3578\n              }                                                                                                        // 3579\n            }                                                                                                          // 3580\n          }                                                                                                            // 3581\n          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {                                              // 3582\n            listener.point(point1[0], point1[1]);                                                                      // 3583\n          }                                                                                                            // 3584\n          point0 = point1, v0 = v, c0 = c;                                                                             // 3585\n        },                                                                                                             // 3586\n        lineEnd: function() {                                                                                          // 3587\n          if (v0) listener.lineEnd();                                                                                  // 3588\n          point0 = null;                                                                                               // 3589\n        },                                                                                                             // 3590\n        clean: function() {                                                                                            // 3591\n          return clean | (v00 && v0) << 1;                                                                             // 3592\n        }                                                                                                              // 3593\n      };                                                                                                               // 3594\n    }                                                                                                                  // 3595\n    function intersect(a, b, two) {                                                                                    // 3596\n      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);                                                          // 3597\n      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;\n      if (!determinant) return !two && a;                                                                              // 3599\n      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);\n      d3_geo_cartesianAdd(A, B);                                                                                       // 3601\n      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);\n      if (t2 < 0) return;                                                                                              // 3603\n      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);                                              // 3604\n      d3_geo_cartesianAdd(q, A);                                                                                       // 3605\n      q = d3_geo_spherical(q);                                                                                         // 3606\n      if (!two) return q;                                                                                              // 3607\n      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;                                                               // 3608\n      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;                                                                            // 3609\n      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;                                           // 3610\n      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;                                                                  // 3611\n      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {\n        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);                                                              // 3613\n        d3_geo_cartesianAdd(q1, A);                                                                                    // 3614\n        return [ q, d3_geo_spherical(q1) ];                                                                            // 3615\n      }                                                                                                                // 3616\n    }                                                                                                                  // 3617\n    function code(λ, φ) {                                                                                              // 3618\n      var r = smallRadius ? radius : π - radius, code = 0;                                                             // 3619\n      if (λ < -r) code |= 1; else if (λ > r) code |= 2;                                                                // 3620\n      if (φ < -r) code |= 4; else if (φ > r) code |= 8;                                                                // 3621\n      return code;                                                                                                     // 3622\n    }                                                                                                                  // 3623\n  }                                                                                                                    // 3624\n  function d3_geom_clipLine(x0, y0, x1, y1) {                                                                          // 3625\n    return function(line) {                                                                                            // 3626\n      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;\n      r = x0 - ax;                                                                                                     // 3628\n      if (!dx && r > 0) return;                                                                                        // 3629\n      r /= dx;                                                                                                         // 3630\n      if (dx < 0) {                                                                                                    // 3631\n        if (r < t0) return;                                                                                            // 3632\n        if (r < t1) t1 = r;                                                                                            // 3633\n      } else if (dx > 0) {                                                                                             // 3634\n        if (r > t1) return;                                                                                            // 3635\n        if (r > t0) t0 = r;                                                                                            // 3636\n      }                                                                                                                // 3637\n      r = x1 - ax;                                                                                                     // 3638\n      if (!dx && r < 0) return;                                                                                        // 3639\n      r /= dx;                                                                                                         // 3640\n      if (dx < 0) {                                                                                                    // 3641\n        if (r > t1) return;                                                                                            // 3642\n        if (r > t0) t0 = r;                                                                                            // 3643\n      } else if (dx > 0) {                                                                                             // 3644\n        if (r < t0) return;                                                                                            // 3645\n        if (r < t1) t1 = r;                                                                                            // 3646\n      }                                                                                                                // 3647\n      r = y0 - ay;                                                                                                     // 3648\n      if (!dy && r > 0) return;                                                                                        // 3649\n      r /= dy;                                                                                                         // 3650\n      if (dy < 0) {                                                                                                    // 3651\n        if (r < t0) return;                                                                                            // 3652\n        if (r < t1) t1 = r;                                                                                            // 3653\n      } else if (dy > 0) {                                                                                             // 3654\n        if (r > t1) return;                                                                                            // 3655\n        if (r > t0) t0 = r;                                                                                            // 3656\n      }                                                                                                                // 3657\n      r = y1 - ay;                                                                                                     // 3658\n      if (!dy && r < 0) return;                                                                                        // 3659\n      r /= dy;                                                                                                         // 3660\n      if (dy < 0) {                                                                                                    // 3661\n        if (r > t1) return;                                                                                            // 3662\n        if (r > t0) t0 = r;                                                                                            // 3663\n      } else if (dy > 0) {                                                                                             // 3664\n        if (r < t0) return;                                                                                            // 3665\n        if (r < t1) t1 = r;                                                                                            // 3666\n      }                                                                                                                // 3667\n      if (t0 > 0) line.a = {                                                                                           // 3668\n        x: ax + t0 * dx,                                                                                               // 3669\n        y: ay + t0 * dy                                                                                                // 3670\n      };                                                                                                               // 3671\n      if (t1 < 1) line.b = {                                                                                           // 3672\n        x: ax + t1 * dx,                                                                                               // 3673\n        y: ay + t1 * dy                                                                                                // 3674\n      };                                                                                                               // 3675\n      return line;                                                                                                     // 3676\n    };                                                                                                                 // 3677\n  }                                                                                                                    // 3678\n  var d3_geo_clipExtentMAX = 1e9;                                                                                      // 3679\n  d3.geo.clipExtent = function() {                                                                                     // 3680\n    var x0, y0, x1, y1, stream, clip, clipExtent = {                                                                   // 3681\n      stream: function(output) {                                                                                       // 3682\n        if (stream) stream.valid = false;                                                                              // 3683\n        stream = clip(output);                                                                                         // 3684\n        stream.valid = true;                                                                                           // 3685\n        return stream;                                                                                                 // 3686\n      },                                                                                                               // 3687\n      extent: function(_) {                                                                                            // 3688\n        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];                                                      // 3689\n        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);                          // 3690\n        if (stream) stream.valid = false, stream = null;                                                               // 3691\n        return clipExtent;                                                                                             // 3692\n      }                                                                                                                // 3693\n    };                                                                                                                 // 3694\n    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);                                                              // 3695\n  };                                                                                                                   // 3696\n  function d3_geo_clipExtent(x0, y0, x1, y1) {                                                                         // 3697\n    return function(listener) {                                                                                        // 3698\n      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;\n      var clip = {                                                                                                     // 3700\n        point: point,                                                                                                  // 3701\n        lineStart: lineStart,                                                                                          // 3702\n        lineEnd: lineEnd,                                                                                              // 3703\n        polygonStart: function() {                                                                                     // 3704\n          listener = bufferListener;                                                                                   // 3705\n          segments = [];                                                                                               // 3706\n          polygon = [];                                                                                                // 3707\n          clean = true;                                                                                                // 3708\n        },                                                                                                             // 3709\n        polygonEnd: function() {                                                                                       // 3710\n          listener = listener_;                                                                                        // 3711\n          segments = d3.merge(segments);                                                                               // 3712\n          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;\n          if (inside || visible) {                                                                                     // 3714\n            listener.polygonStart();                                                                                   // 3715\n            if (inside) {                                                                                              // 3716\n              listener.lineStart();                                                                                    // 3717\n              interpolate(null, null, 1, listener);                                                                    // 3718\n              listener.lineEnd();                                                                                      // 3719\n            }                                                                                                          // 3720\n            if (visible) {                                                                                             // 3721\n              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);                           // 3722\n            }                                                                                                          // 3723\n            listener.polygonEnd();                                                                                     // 3724\n          }                                                                                                            // 3725\n          segments = polygon = ring = null;                                                                            // 3726\n        }                                                                                                              // 3727\n      };                                                                                                               // 3728\n      function insidePolygon(p) {                                                                                      // 3729\n        var wn = 0, n = polygon.length, y = p[1];                                                                      // 3730\n        for (var i = 0; i < n; ++i) {                                                                                  // 3731\n          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {                                     // 3732\n            b = v[j];                                                                                                  // 3733\n            if (a[1] <= y) {                                                                                           // 3734\n              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;                                                           // 3735\n            } else {                                                                                                   // 3736\n              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;                                                          // 3737\n            }                                                                                                          // 3738\n            a = b;                                                                                                     // 3739\n          }                                                                                                            // 3740\n        }                                                                                                              // 3741\n        return wn !== 0;                                                                                               // 3742\n      }                                                                                                                // 3743\n      function interpolate(from, to, direction, listener) {                                                            // 3744\n        var a = 0, a1 = 0;                                                                                             // 3745\n        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {\n          do {                                                                                                         // 3747\n            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);                                             // 3748\n          } while ((a = (a + direction + 4) % 4) !== a1);                                                              // 3749\n        } else {                                                                                                       // 3750\n          listener.point(to[0], to[1]);                                                                                // 3751\n        }                                                                                                              // 3752\n      }                                                                                                                // 3753\n      function pointVisible(x, y) {                                                                                    // 3754\n        return x0 <= x && x <= x1 && y0 <= y && y <= y1;                                                               // 3755\n      }                                                                                                                // 3756\n      function point(x, y) {                                                                                           // 3757\n        if (pointVisible(x, y)) listener.point(x, y);                                                                  // 3758\n      }                                                                                                                // 3759\n      var x__, y__, v__, x_, y_, v_, first, clean;                                                                     // 3760\n      function lineStart() {                                                                                           // 3761\n        clip.point = linePoint;                                                                                        // 3762\n        if (polygon) polygon.push(ring = []);                                                                          // 3763\n        first = true;                                                                                                  // 3764\n        v_ = false;                                                                                                    // 3765\n        x_ = y_ = NaN;                                                                                                 // 3766\n      }                                                                                                                // 3767\n      function lineEnd() {                                                                                             // 3768\n        if (segments) {                                                                                                // 3769\n          linePoint(x__, y__);                                                                                         // 3770\n          if (v__ && v_) bufferListener.rejoin();                                                                      // 3771\n          segments.push(bufferListener.buffer());                                                                      // 3772\n        }                                                                                                              // 3773\n        clip.point = point;                                                                                            // 3774\n        if (v_) listener.lineEnd();                                                                                    // 3775\n      }                                                                                                                // 3776\n      function linePoint(x, y) {                                                                                       // 3777\n        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));                                        // 3778\n        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));                                        // 3779\n        var v = pointVisible(x, y);                                                                                    // 3780\n        if (polygon) ring.push([ x, y ]);                                                                              // 3781\n        if (first) {                                                                                                   // 3782\n          x__ = x, y__ = y, v__ = v;                                                                                   // 3783\n          first = false;                                                                                               // 3784\n          if (v) {                                                                                                     // 3785\n            listener.lineStart();                                                                                      // 3786\n            listener.point(x, y);                                                                                      // 3787\n          }                                                                                                            // 3788\n        } else {                                                                                                       // 3789\n          if (v && v_) listener.point(x, y); else {                                                                    // 3790\n            var l = {                                                                                                  // 3791\n              a: {                                                                                                     // 3792\n                x: x_,                                                                                                 // 3793\n                y: y_                                                                                                  // 3794\n              },                                                                                                       // 3795\n              b: {                                                                                                     // 3796\n                x: x,                                                                                                  // 3797\n                y: y                                                                                                   // 3798\n              }                                                                                                        // 3799\n            };                                                                                                         // 3800\n            if (clipLine(l)) {                                                                                         // 3801\n              if (!v_) {                                                                                               // 3802\n                listener.lineStart();                                                                                  // 3803\n                listener.point(l.a.x, l.a.y);                                                                          // 3804\n              }                                                                                                        // 3805\n              listener.point(l.b.x, l.b.y);                                                                            // 3806\n              if (!v) listener.lineEnd();                                                                              // 3807\n              clean = false;                                                                                           // 3808\n            } else if (v) {                                                                                            // 3809\n              listener.lineStart();                                                                                    // 3810\n              listener.point(x, y);                                                                                    // 3811\n              clean = false;                                                                                           // 3812\n            }                                                                                                          // 3813\n          }                                                                                                            // 3814\n        }                                                                                                              // 3815\n        x_ = x, y_ = y, v_ = v;                                                                                        // 3816\n      }                                                                                                                // 3817\n      return clip;                                                                                                     // 3818\n    };                                                                                                                 // 3819\n    function corner(p, direction) {                                                                                    // 3820\n      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;\n    }                                                                                                                  // 3822\n    function compare(a, b) {                                                                                           // 3823\n      return comparePoints(a.x, b.x);                                                                                  // 3824\n    }                                                                                                                  // 3825\n    function comparePoints(a, b) {                                                                                     // 3826\n      var ca = corner(a, 1), cb = corner(b, 1);                                                                        // 3827\n      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];\n    }                                                                                                                  // 3829\n  }                                                                                                                    // 3830\n  function d3_geo_conic(projectAt) {                                                                                   // 3831\n    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);                                    // 3832\n    p.parallels = function(_) {                                                                                        // 3833\n      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];                                                    // 3834\n      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);                                                              // 3835\n    };                                                                                                                 // 3836\n    return p;                                                                                                          // 3837\n  }                                                                                                                    // 3838\n  function d3_geo_conicEqualArea(φ0, φ1) {                                                                             // 3839\n    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;  // 3840\n    function forward(λ, φ) {                                                                                           // 3841\n      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;                                                                  // 3842\n      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];                                                           // 3843\n    }                                                                                                                  // 3844\n    forward.invert = function(x, y) {                                                                                  // 3845\n      var ρ0_y = ρ0 - y;                                                                                               // 3846\n      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];                      // 3847\n    };                                                                                                                 // 3848\n    return forward;                                                                                                    // 3849\n  }                                                                                                                    // 3850\n  (d3.geo.conicEqualArea = function() {                                                                                // 3851\n    return d3_geo_conic(d3_geo_conicEqualArea);                                                                        // 3852\n  }).raw = d3_geo_conicEqualArea;                                                                                      // 3853\n  d3.geo.albers = function() {                                                                                         // 3854\n    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);      // 3855\n  };                                                                                                                   // 3856\n  d3.geo.albersUsa = function() {                                                                                      // 3857\n    var lower48 = d3.geo.albers();                                                                                     // 3858\n    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);                // 3859\n    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);                 // 3860\n    var point, pointStream = {                                                                                         // 3861\n      point: function(x, y) {                                                                                          // 3862\n        point = [ x, y ];                                                                                              // 3863\n      }                                                                                                                // 3864\n    }, lower48Point, alaskaPoint, hawaiiPoint;                                                                         // 3865\n    function albersUsa(coordinates) {                                                                                  // 3866\n      var x = coordinates[0], y = coordinates[1];                                                                      // 3867\n      point = null;                                                                                                    // 3868\n      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);                                  // 3869\n      return point;                                                                                                    // 3870\n    }                                                                                                                  // 3871\n    albersUsa.invert = function(coordinates) {                                                                         // 3872\n      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;\n      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);\n    };                                                                                                                 // 3875\n    albersUsa.stream = function(stream) {                                                                              // 3876\n      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);\n      return {                                                                                                         // 3878\n        point: function(x, y) {                                                                                        // 3879\n          lower48Stream.point(x, y);                                                                                   // 3880\n          alaskaStream.point(x, y);                                                                                    // 3881\n          hawaiiStream.point(x, y);                                                                                    // 3882\n        },                                                                                                             // 3883\n        sphere: function() {                                                                                           // 3884\n          lower48Stream.sphere();                                                                                      // 3885\n          alaskaStream.sphere();                                                                                       // 3886\n          hawaiiStream.sphere();                                                                                       // 3887\n        },                                                                                                             // 3888\n        lineStart: function() {                                                                                        // 3889\n          lower48Stream.lineStart();                                                                                   // 3890\n          alaskaStream.lineStart();                                                                                    // 3891\n          hawaiiStream.lineStart();                                                                                    // 3892\n        },                                                                                                             // 3893\n        lineEnd: function() {                                                                                          // 3894\n          lower48Stream.lineEnd();                                                                                     // 3895\n          alaskaStream.lineEnd();                                                                                      // 3896\n          hawaiiStream.lineEnd();                                                                                      // 3897\n        },                                                                                                             // 3898\n        polygonStart: function() {                                                                                     // 3899\n          lower48Stream.polygonStart();                                                                                // 3900\n          alaskaStream.polygonStart();                                                                                 // 3901\n          hawaiiStream.polygonStart();                                                                                 // 3902\n        },                                                                                                             // 3903\n        polygonEnd: function() {                                                                                       // 3904\n          lower48Stream.polygonEnd();                                                                                  // 3905\n          alaskaStream.polygonEnd();                                                                                   // 3906\n          hawaiiStream.polygonEnd();                                                                                   // 3907\n        }                                                                                                              // 3908\n      };                                                                                                               // 3909\n    };                                                                                                                 // 3910\n    albersUsa.precision = function(_) {                                                                                // 3911\n      if (!arguments.length) return lower48.precision();                                                               // 3912\n      lower48.precision(_);                                                                                            // 3913\n      alaska.precision(_);                                                                                             // 3914\n      hawaii.precision(_);                                                                                             // 3915\n      return albersUsa;                                                                                                // 3916\n    };                                                                                                                 // 3917\n    albersUsa.scale = function(_) {                                                                                    // 3918\n      if (!arguments.length) return lower48.scale();                                                                   // 3919\n      lower48.scale(_);                                                                                                // 3920\n      alaska.scale(_ * .35);                                                                                           // 3921\n      hawaii.scale(_);                                                                                                 // 3922\n      return albersUsa.translate(lower48.translate());                                                                 // 3923\n    };                                                                                                                 // 3924\n    albersUsa.translate = function(_) {                                                                                // 3925\n      if (!arguments.length) return lower48.translate();                                                               // 3926\n      var k = lower48.scale(), x = +_[0], y = +_[1];                                                                   // 3927\n      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;\n      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      return albersUsa;                                                                                                // 3931\n    };                                                                                                                 // 3932\n    return albersUsa.scale(1070);                                                                                      // 3933\n  };                                                                                                                   // 3934\n  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {                                                  // 3935\n    point: d3_noop,                                                                                                    // 3936\n    lineStart: d3_noop,                                                                                                // 3937\n    lineEnd: d3_noop,                                                                                                  // 3938\n    polygonStart: function() {                                                                                         // 3939\n      d3_geo_pathAreaPolygon = 0;                                                                                      // 3940\n      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;                                                            // 3941\n    },                                                                                                                 // 3942\n    polygonEnd: function() {                                                                                           // 3943\n      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;                           // 3944\n      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);                                                           // 3945\n    }                                                                                                                  // 3946\n  };                                                                                                                   // 3947\n  function d3_geo_pathAreaRingStart() {                                                                                // 3948\n    var x00, y00, x0, y0;                                                                                              // 3949\n    d3_geo_pathArea.point = function(x, y) {                                                                           // 3950\n      d3_geo_pathArea.point = nextPoint;                                                                               // 3951\n      x00 = x0 = x, y00 = y0 = y;                                                                                      // 3952\n    };                                                                                                                 // 3953\n    function nextPoint(x, y) {                                                                                         // 3954\n      d3_geo_pathAreaPolygon += y0 * x - x0 * y;                                                                       // 3955\n      x0 = x, y0 = y;                                                                                                  // 3956\n    }                                                                                                                  // 3957\n    d3_geo_pathArea.lineEnd = function() {                                                                             // 3958\n      nextPoint(x00, y00);                                                                                             // 3959\n    };                                                                                                                 // 3960\n  }                                                                                                                    // 3961\n  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;                              // 3962\n  var d3_geo_pathBounds = {                                                                                            // 3963\n    point: d3_geo_pathBoundsPoint,                                                                                     // 3964\n    lineStart: d3_noop,                                                                                                // 3965\n    lineEnd: d3_noop,                                                                                                  // 3966\n    polygonStart: d3_noop,                                                                                             // 3967\n    polygonEnd: d3_noop                                                                                                // 3968\n  };                                                                                                                   // 3969\n  function d3_geo_pathBoundsPoint(x, y) {                                                                              // 3970\n    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;                                                              // 3971\n    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;                                                              // 3972\n    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;                                                              // 3973\n    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;                                                              // 3974\n  }                                                                                                                    // 3975\n  function d3_geo_pathBuffer() {                                                                                       // 3976\n    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];                                                       // 3977\n    var stream = {                                                                                                     // 3978\n      point: point,                                                                                                    // 3979\n      lineStart: function() {                                                                                          // 3980\n        stream.point = pointLineStart;                                                                                 // 3981\n      },                                                                                                               // 3982\n      lineEnd: lineEnd,                                                                                                // 3983\n      polygonStart: function() {                                                                                       // 3984\n        stream.lineEnd = lineEndPolygon;                                                                               // 3985\n      },                                                                                                               // 3986\n      polygonEnd: function() {                                                                                         // 3987\n        stream.lineEnd = lineEnd;                                                                                      // 3988\n        stream.point = point;                                                                                          // 3989\n      },                                                                                                               // 3990\n      pointRadius: function(_) {                                                                                       // 3991\n        pointCircle = d3_geo_pathBufferCircle(_);                                                                      // 3992\n        return stream;                                                                                                 // 3993\n      },                                                                                                               // 3994\n      result: function() {                                                                                             // 3995\n        if (buffer.length) {                                                                                           // 3996\n          var result = buffer.join(\"\");                                                                                // 3997\n          buffer = [];                                                                                                 // 3998\n          return result;                                                                                               // 3999\n        }                                                                                                              // 4000\n      }                                                                                                                // 4001\n    };                                                                                                                 // 4002\n    function point(x, y) {                                                                                             // 4003\n      buffer.push(\"M\", x, \",\", y, pointCircle);                                                                        // 4004\n    }                                                                                                                  // 4005\n    function pointLineStart(x, y) {                                                                                    // 4006\n      buffer.push(\"M\", x, \",\", y);                                                                                     // 4007\n      stream.point = pointLine;                                                                                        // 4008\n    }                                                                                                                  // 4009\n    function pointLine(x, y) {                                                                                         // 4010\n      buffer.push(\"L\", x, \",\", y);                                                                                     // 4011\n    }                                                                                                                  // 4012\n    function lineEnd() {                                                                                               // 4013\n      stream.point = point;                                                                                            // 4014\n    }                                                                                                                  // 4015\n    function lineEndPolygon() {                                                                                        // 4016\n      buffer.push(\"Z\");                                                                                                // 4017\n    }                                                                                                                  // 4018\n    return stream;                                                                                                     // 4019\n  }                                                                                                                    // 4020\n  function d3_geo_pathBufferCircle(radius) {                                                                           // 4021\n    return \"m0,\" + radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius + \"z\";\n  }                                                                                                                    // 4023\n  var d3_geo_pathCentroid = {                                                                                          // 4024\n    point: d3_geo_pathCentroidPoint,                                                                                   // 4025\n    lineStart: d3_geo_pathCentroidLineStart,                                                                           // 4026\n    lineEnd: d3_geo_pathCentroidLineEnd,                                                                               // 4027\n    polygonStart: function() {                                                                                         // 4028\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;                                                    // 4029\n    },                                                                                                                 // 4030\n    polygonEnd: function() {                                                                                           // 4031\n      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;                                                            // 4032\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;                                                    // 4033\n      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;                                                        // 4034\n    }                                                                                                                  // 4035\n  };                                                                                                                   // 4036\n  function d3_geo_pathCentroidPoint(x, y) {                                                                            // 4037\n    d3_geo_centroidX0 += x;                                                                                            // 4038\n    d3_geo_centroidY0 += y;                                                                                            // 4039\n    ++d3_geo_centroidZ0;                                                                                               // 4040\n  }                                                                                                                    // 4041\n  function d3_geo_pathCentroidLineStart() {                                                                            // 4042\n    var x0, y0;                                                                                                        // 4043\n    d3_geo_pathCentroid.point = function(x, y) {                                                                       // 4044\n      d3_geo_pathCentroid.point = nextPoint;                                                                           // 4045\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);                                                                        // 4046\n    };                                                                                                                 // 4047\n    function nextPoint(x, y) {                                                                                         // 4048\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);                                                  // 4049\n      d3_geo_centroidX1 += z * (x0 + x) / 2;                                                                           // 4050\n      d3_geo_centroidY1 += z * (y0 + y) / 2;                                                                           // 4051\n      d3_geo_centroidZ1 += z;                                                                                          // 4052\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);                                                                        // 4053\n    }                                                                                                                  // 4054\n  }                                                                                                                    // 4055\n  function d3_geo_pathCentroidLineEnd() {                                                                              // 4056\n    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;                                                              // 4057\n  }                                                                                                                    // 4058\n  function d3_geo_pathCentroidRingStart() {                                                                            // 4059\n    var x00, y00, x0, y0;                                                                                              // 4060\n    d3_geo_pathCentroid.point = function(x, y) {                                                                       // 4061\n      d3_geo_pathCentroid.point = nextPoint;                                                                           // 4062\n      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);                                                            // 4063\n    };                                                                                                                 // 4064\n    function nextPoint(x, y) {                                                                                         // 4065\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);                                                  // 4066\n      d3_geo_centroidX1 += z * (x0 + x) / 2;                                                                           // 4067\n      d3_geo_centroidY1 += z * (y0 + y) / 2;                                                                           // 4068\n      d3_geo_centroidZ1 += z;                                                                                          // 4069\n      z = y0 * x - x0 * y;                                                                                             // 4070\n      d3_geo_centroidX2 += z * (x0 + x);                                                                               // 4071\n      d3_geo_centroidY2 += z * (y0 + y);                                                                               // 4072\n      d3_geo_centroidZ2 += z * 3;                                                                                      // 4073\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);                                                                        // 4074\n    }                                                                                                                  // 4075\n    d3_geo_pathCentroid.lineEnd = function() {                                                                         // 4076\n      nextPoint(x00, y00);                                                                                             // 4077\n    };                                                                                                                 // 4078\n  }                                                                                                                    // 4079\n  function d3_geo_pathContext(context) {                                                                               // 4080\n    var pointRadius = 4.5;                                                                                             // 4081\n    var stream = {                                                                                                     // 4082\n      point: point,                                                                                                    // 4083\n      lineStart: function() {                                                                                          // 4084\n        stream.point = pointLineStart;                                                                                 // 4085\n      },                                                                                                               // 4086\n      lineEnd: lineEnd,                                                                                                // 4087\n      polygonStart: function() {                                                                                       // 4088\n        stream.lineEnd = lineEndPolygon;                                                                               // 4089\n      },                                                                                                               // 4090\n      polygonEnd: function() {                                                                                         // 4091\n        stream.lineEnd = lineEnd;                                                                                      // 4092\n        stream.point = point;                                                                                          // 4093\n      },                                                                                                               // 4094\n      pointRadius: function(_) {                                                                                       // 4095\n        pointRadius = _;                                                                                               // 4096\n        return stream;                                                                                                 // 4097\n      },                                                                                                               // 4098\n      result: d3_noop                                                                                                  // 4099\n    };                                                                                                                 // 4100\n    function point(x, y) {                                                                                             // 4101\n      context.moveTo(x + pointRadius, y);                                                                              // 4102\n      context.arc(x, y, pointRadius, 0, τ);                                                                            // 4103\n    }                                                                                                                  // 4104\n    function pointLineStart(x, y) {                                                                                    // 4105\n      context.moveTo(x, y);                                                                                            // 4106\n      stream.point = pointLine;                                                                                        // 4107\n    }                                                                                                                  // 4108\n    function pointLine(x, y) {                                                                                         // 4109\n      context.lineTo(x, y);                                                                                            // 4110\n    }                                                                                                                  // 4111\n    function lineEnd() {                                                                                               // 4112\n      stream.point = point;                                                                                            // 4113\n    }                                                                                                                  // 4114\n    function lineEndPolygon() {                                                                                        // 4115\n      context.closePath();                                                                                             // 4116\n    }                                                                                                                  // 4117\n    return stream;                                                                                                     // 4118\n  }                                                                                                                    // 4119\n  function d3_geo_resample(project) {                                                                                  // 4120\n    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;                                            // 4121\n    function resample(stream) {                                                                                        // 4122\n      return (maxDepth ? resampleRecursive : resampleNone)(stream);                                                    // 4123\n    }                                                                                                                  // 4124\n    function resampleNone(stream) {                                                                                    // 4125\n      return d3_geo_transformPoint(stream, function(x, y) {                                                            // 4126\n        x = project(x, y);                                                                                             // 4127\n        stream.point(x[0], x[1]);                                                                                      // 4128\n      });                                                                                                              // 4129\n    }                                                                                                                  // 4130\n    function resampleRecursive(stream) {                                                                               // 4131\n      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;                                                   // 4132\n      var resample = {                                                                                                 // 4133\n        point: point,                                                                                                  // 4134\n        lineStart: lineStart,                                                                                          // 4135\n        lineEnd: lineEnd,                                                                                              // 4136\n        polygonStart: function() {                                                                                     // 4137\n          stream.polygonStart();                                                                                       // 4138\n          resample.lineStart = ringStart;                                                                              // 4139\n        },                                                                                                             // 4140\n        polygonEnd: function() {                                                                                       // 4141\n          stream.polygonEnd();                                                                                         // 4142\n          resample.lineStart = lineStart;                                                                              // 4143\n        }                                                                                                              // 4144\n      };                                                                                                               // 4145\n      function point(x, y) {                                                                                           // 4146\n        x = project(x, y);                                                                                             // 4147\n        stream.point(x[0], x[1]);                                                                                      // 4148\n      }                                                                                                                // 4149\n      function lineStart() {                                                                                           // 4150\n        x0 = NaN;                                                                                                      // 4151\n        resample.point = linePoint;                                                                                    // 4152\n        stream.lineStart();                                                                                            // 4153\n      }                                                                                                                // 4154\n      function linePoint(λ, φ) {                                                                                       // 4155\n        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);                                                         // 4156\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n        stream.point(x0, y0);                                                                                          // 4158\n      }                                                                                                                // 4159\n      function lineEnd() {                                                                                             // 4160\n        resample.point = point;                                                                                        // 4161\n        stream.lineEnd();                                                                                              // 4162\n      }                                                                                                                // 4163\n      function ringStart() {                                                                                           // 4164\n        lineStart();                                                                                                   // 4165\n        resample.point = ringPoint;                                                                                    // 4166\n        resample.lineEnd = ringEnd;                                                                                    // 4167\n      }                                                                                                                // 4168\n      function ringPoint(λ, φ) {                                                                                       // 4169\n        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;                                 // 4170\n        resample.point = linePoint;                                                                                    // 4171\n      }                                                                                                                // 4172\n      function ringEnd() {                                                                                             // 4173\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);                        // 4174\n        resample.lineEnd = lineEnd;                                                                                    // 4175\n        lineEnd();                                                                                                     // 4176\n      }                                                                                                                // 4177\n      return resample;                                                                                                 // 4178\n    }                                                                                                                  // 4179\n    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {                           // 4180\n      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;                                                          // 4181\n      if (d2 > 4 * δ2 && depth--) {                                                                                    // 4182\n        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;\n        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {\n          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);                        // 4185\n          stream.point(x2, y2);                                                                                        // 4186\n          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);                                  // 4187\n        }                                                                                                              // 4188\n      }                                                                                                                // 4189\n    }                                                                                                                  // 4190\n    resample.precision = function(_) {                                                                                 // 4191\n      if (!arguments.length) return Math.sqrt(δ2);                                                                     // 4192\n      maxDepth = (δ2 = _ * _) > 0 && 16;                                                                               // 4193\n      return resample;                                                                                                 // 4194\n    };                                                                                                                 // 4195\n    return resample;                                                                                                   // 4196\n  }                                                                                                                    // 4197\n  d3.geo.path = function() {                                                                                           // 4198\n    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;                             // 4199\n    function path(object) {                                                                                            // 4200\n      if (object) {                                                                                                    // 4201\n        if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));         // 4202\n        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);                            // 4203\n        d3.geo.stream(object, cacheStream);                                                                            // 4204\n      }                                                                                                                // 4205\n      return contextStream.result();                                                                                   // 4206\n    }                                                                                                                  // 4207\n    path.area = function(object) {                                                                                     // 4208\n      d3_geo_pathAreaSum = 0;                                                                                          // 4209\n      d3.geo.stream(object, projectStream(d3_geo_pathArea));                                                           // 4210\n      return d3_geo_pathAreaSum;                                                                                       // 4211\n    };                                                                                                                 // 4212\n    path.centroid = function(object) {                                                                                 // 4213\n      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));                                                       // 4215\n      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];\n    };                                                                                                                 // 4217\n    path.bounds = function(object) {                                                                                   // 4218\n      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);             // 4219\n      d3.geo.stream(object, projectStream(d3_geo_pathBounds));                                                         // 4220\n      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];           // 4221\n    };                                                                                                                 // 4222\n    path.projection = function(_) {                                                                                    // 4223\n      if (!arguments.length) return projection;                                                                        // 4224\n      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;                        // 4225\n      return reset();                                                                                                  // 4226\n    };                                                                                                                 // 4227\n    path.context = function(_) {                                                                                       // 4228\n      if (!arguments.length) return context;                                                                           // 4229\n      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);                     // 4230\n      if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);                                   // 4231\n      return reset();                                                                                                  // 4232\n    };                                                                                                                 // 4233\n    path.pointRadius = function(_) {                                                                                   // 4234\n      if (!arguments.length) return pointRadius;                                                                       // 4235\n      pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);                                 // 4236\n      return path;                                                                                                     // 4237\n    };                                                                                                                 // 4238\n    function reset() {                                                                                                 // 4239\n      cacheStream = null;                                                                                              // 4240\n      return path;                                                                                                     // 4241\n    }                                                                                                                  // 4242\n    return path.projection(d3.geo.albersUsa()).context(null);                                                          // 4243\n  };                                                                                                                   // 4244\n  function d3_geo_pathProjectStream(project) {                                                                         // 4245\n    var resample = d3_geo_resample(function(x, y) {                                                                    // 4246\n      return project([ x * d3_degrees, y * d3_degrees ]);                                                              // 4247\n    });                                                                                                                // 4248\n    return function(stream) {                                                                                          // 4249\n      return d3_geo_projectionRadians(resample(stream));                                                               // 4250\n    };                                                                                                                 // 4251\n  }                                                                                                                    // 4252\n  d3.geo.transform = function(methods) {                                                                               // 4253\n    return {                                                                                                           // 4254\n      stream: function(stream) {                                                                                       // 4255\n        var transform = new d3_geo_transform(stream);                                                                  // 4256\n        for (var k in methods) transform[k] = methods[k];                                                              // 4257\n        return transform;                                                                                              // 4258\n      }                                                                                                                // 4259\n    };                                                                                                                 // 4260\n  };                                                                                                                   // 4261\n  function d3_geo_transform(stream) {                                                                                  // 4262\n    this.stream = stream;                                                                                              // 4263\n  }                                                                                                                    // 4264\n  d3_geo_transform.prototype = {                                                                                       // 4265\n    point: function(x, y) {                                                                                            // 4266\n      this.stream.point(x, y);                                                                                         // 4267\n    },                                                                                                                 // 4268\n    sphere: function() {                                                                                               // 4269\n      this.stream.sphere();                                                                                            // 4270\n    },                                                                                                                 // 4271\n    lineStart: function() {                                                                                            // 4272\n      this.stream.lineStart();                                                                                         // 4273\n    },                                                                                                                 // 4274\n    lineEnd: function() {                                                                                              // 4275\n      this.stream.lineEnd();                                                                                           // 4276\n    },                                                                                                                 // 4277\n    polygonStart: function() {                                                                                         // 4278\n      this.stream.polygonStart();                                                                                      // 4279\n    },                                                                                                                 // 4280\n    polygonEnd: function() {                                                                                           // 4281\n      this.stream.polygonEnd();                                                                                        // 4282\n    }                                                                                                                  // 4283\n  };                                                                                                                   // 4284\n  function d3_geo_transformPoint(stream, point) {                                                                      // 4285\n    return {                                                                                                           // 4286\n      point: point,                                                                                                    // 4287\n      sphere: function() {                                                                                             // 4288\n        stream.sphere();                                                                                               // 4289\n      },                                                                                                               // 4290\n      lineStart: function() {                                                                                          // 4291\n        stream.lineStart();                                                                                            // 4292\n      },                                                                                                               // 4293\n      lineEnd: function() {                                                                                            // 4294\n        stream.lineEnd();                                                                                              // 4295\n      },                                                                                                               // 4296\n      polygonStart: function() {                                                                                       // 4297\n        stream.polygonStart();                                                                                         // 4298\n      },                                                                                                               // 4299\n      polygonEnd: function() {                                                                                         // 4300\n        stream.polygonEnd();                                                                                           // 4301\n      }                                                                                                                // 4302\n    };                                                                                                                 // 4303\n  }                                                                                                                    // 4304\n  d3.geo.projection = d3_geo_projection;                                                                               // 4305\n  d3.geo.projectionMutator = d3_geo_projectionMutator;                                                                 // 4306\n  function d3_geo_projection(project) {                                                                                // 4307\n    return d3_geo_projectionMutator(function() {                                                                       // 4308\n      return project;                                                                                                  // 4309\n    })();                                                                                                              // 4310\n  }                                                                                                                    // 4311\n  function d3_geo_projectionMutator(projectAt) {                                                                       // 4312\n    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {                             // 4313\n      x = project(x, y);                                                                                               // 4314\n      return [ x[0] * k + δx, δy - x[1] * k ];                                                                         // 4315\n    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;\n    function projection(point) {                                                                                       // 4317\n      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);                                             // 4318\n      return [ point[0] * k + δx, δy - point[1] * k ];                                                                 // 4319\n    }                                                                                                                  // 4320\n    function invert(point) {                                                                                           // 4321\n      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);                                          // 4322\n      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];                                                // 4323\n    }                                                                                                                  // 4324\n    projection.stream = function(output) {                                                                             // 4325\n      if (stream) stream.valid = false;                                                                                // 4326\n      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));                           // 4327\n      stream.valid = true;                                                                                             // 4328\n      return stream;                                                                                                   // 4329\n    };                                                                                                                 // 4330\n    projection.clipAngle = function(_) {                                                                               // 4331\n      if (!arguments.length) return clipAngle;                                                                         // 4332\n      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);\n      return invalidate();                                                                                             // 4334\n    };                                                                                                                 // 4335\n    projection.clipExtent = function(_) {                                                                              // 4336\n      if (!arguments.length) return clipExtent;                                                                        // 4337\n      clipExtent = _;                                                                                                  // 4338\n      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;                              // 4339\n      return invalidate();                                                                                             // 4340\n    };                                                                                                                 // 4341\n    projection.scale = function(_) {                                                                                   // 4342\n      if (!arguments.length) return k;                                                                                 // 4343\n      k = +_;                                                                                                          // 4344\n      return reset();                                                                                                  // 4345\n    };                                                                                                                 // 4346\n    projection.translate = function(_) {                                                                               // 4347\n      if (!arguments.length) return [ x, y ];                                                                          // 4348\n      x = +_[0];                                                                                                       // 4349\n      y = +_[1];                                                                                                       // 4350\n      return reset();                                                                                                  // 4351\n    };                                                                                                                 // 4352\n    projection.center = function(_) {                                                                                  // 4353\n      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];                                                // 4354\n      λ = _[0] % 360 * d3_radians;                                                                                     // 4355\n      φ = _[1] % 360 * d3_radians;                                                                                     // 4356\n      return reset();                                                                                                  // 4357\n    };                                                                                                                 // 4358\n    projection.rotate = function(_) {                                                                                  // 4359\n      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];                             // 4360\n      δλ = _[0] % 360 * d3_radians;                                                                                    // 4361\n      δφ = _[1] % 360 * d3_radians;                                                                                    // 4362\n      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;                                                                 // 4363\n      return reset();                                                                                                  // 4364\n    };                                                                                                                 // 4365\n    d3.rebind(projection, projectResample, \"precision\");                                                               // 4366\n    function reset() {                                                                                                 // 4367\n      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);                                   // 4368\n      var center = project(λ, φ);                                                                                      // 4369\n      δx = x - center[0] * k;                                                                                          // 4370\n      δy = y + center[1] * k;                                                                                          // 4371\n      return invalidate();                                                                                             // 4372\n    }                                                                                                                  // 4373\n    function invalidate() {                                                                                            // 4374\n      if (stream) stream.valid = false, stream = null;                                                                 // 4375\n      return projection;                                                                                               // 4376\n    }                                                                                                                  // 4377\n    return function() {                                                                                                // 4378\n      project = projectAt.apply(this, arguments);                                                                      // 4379\n      projection.invert = project.invert && invert;                                                                    // 4380\n      return reset();                                                                                                  // 4381\n    };                                                                                                                 // 4382\n  }                                                                                                                    // 4383\n  function d3_geo_projectionRadians(stream) {                                                                          // 4384\n    return d3_geo_transformPoint(stream, function(x, y) {                                                              // 4385\n      stream.point(x * d3_radians, y * d3_radians);                                                                    // 4386\n    });                                                                                                                // 4387\n  }                                                                                                                    // 4388\n  function d3_geo_equirectangular(λ, φ) {                                                                              // 4389\n    return [ λ, φ ];                                                                                                   // 4390\n  }                                                                                                                    // 4391\n  (d3.geo.equirectangular = function() {                                                                               // 4392\n    return d3_geo_projection(d3_geo_equirectangular);                                                                  // 4393\n  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;                                                     // 4394\n  d3.geo.rotation = function(rotate) {                                                                                 // 4395\n    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);\n    function forward(coordinates) {                                                                                    // 4397\n      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);                                  // 4398\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;                                  // 4399\n    }                                                                                                                  // 4400\n    forward.invert = function(coordinates) {                                                                           // 4401\n      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);                           // 4402\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;                                  // 4403\n    };                                                                                                                 // 4404\n    return forward;                                                                                                    // 4405\n  };                                                                                                                   // 4406\n  function d3_geo_identityRotation(λ, φ) {                                                                             // 4407\n    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];                                                                  // 4408\n  }                                                                                                                    // 4409\n  d3_geo_identityRotation.invert = d3_geo_equirectangular;                                                             // 4410\n  function d3_geo_rotation(δλ, δφ, δγ) {                                                                               // 4411\n    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;\n  }                                                                                                                    // 4413\n  function d3_geo_forwardRotationλ(δλ) {                                                                               // 4414\n    return function(λ, φ) {                                                                                            // 4415\n      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];                                                       // 4416\n    };                                                                                                                 // 4417\n  }                                                                                                                    // 4418\n  function d3_geo_rotationλ(δλ) {                                                                                      // 4419\n    var rotation = d3_geo_forwardRotationλ(δλ);                                                                        // 4420\n    rotation.invert = d3_geo_forwardRotationλ(-δλ);                                                                    // 4421\n    return rotation;                                                                                                   // 4422\n  }                                                                                                                    // 4423\n  function d3_geo_rotationφγ(δφ, δγ) {                                                                                 // 4424\n    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);                        // 4425\n    function rotation(λ, φ) {                                                                                          // 4426\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;\n      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];             // 4428\n    }                                                                                                                  // 4429\n    rotation.invert = function(λ, φ) {                                                                                 // 4430\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;\n      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];             // 4432\n    };                                                                                                                 // 4433\n    return rotation;                                                                                                   // 4434\n  }                                                                                                                    // 4435\n  d3.geo.circle = function() {                                                                                         // 4436\n    var origin = [ 0, 0 ], angle, precision = 6, interpolate;                                                          // 4437\n    function circle() {                                                                                                // 4438\n      var center = typeof origin === \"function\" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];\n      interpolate(null, null, 1, {                                                                                     // 4440\n        point: function(x, y) {                                                                                        // 4441\n          ring.push(x = rotate(x, y));                                                                                 // 4442\n          x[0] *= d3_degrees, x[1] *= d3_degrees;                                                                      // 4443\n        }                                                                                                              // 4444\n      });                                                                                                              // 4445\n      return {                                                                                                         // 4446\n        type: \"Polygon\",                                                                                               // 4447\n        coordinates: [ ring ]                                                                                          // 4448\n      };                                                                                                               // 4449\n    }                                                                                                                  // 4450\n    circle.origin = function(x) {                                                                                      // 4451\n      if (!arguments.length) return origin;                                                                            // 4452\n      origin = x;                                                                                                      // 4453\n      return circle;                                                                                                   // 4454\n    };                                                                                                                 // 4455\n    circle.angle = function(x) {                                                                                       // 4456\n      if (!arguments.length) return angle;                                                                             // 4457\n      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);                       // 4458\n      return circle;                                                                                                   // 4459\n    };                                                                                                                 // 4460\n    circle.precision = function(_) {                                                                                   // 4461\n      if (!arguments.length) return precision;                                                                         // 4462\n      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);                       // 4463\n      return circle;                                                                                                   // 4464\n    };                                                                                                                 // 4465\n    return circle.angle(90);                                                                                           // 4466\n  };                                                                                                                   // 4467\n  function d3_geo_circleInterpolate(radius, precision) {                                                               // 4468\n    var cr = Math.cos(radius), sr = Math.sin(radius);                                                                  // 4469\n    return function(from, to, direction, listener) {                                                                   // 4470\n      var step = direction * precision;                                                                                // 4471\n      if (from != null) {                                                                                              // 4472\n        from = d3_geo_circleAngle(cr, from);                                                                           // 4473\n        to = d3_geo_circleAngle(cr, to);                                                                               // 4474\n        if (direction > 0 ? from < to : from > to) from += direction * τ;                                              // 4475\n      } else {                                                                                                         // 4476\n        from = radius + direction * τ;                                                                                 // 4477\n        to = radius - .5 * step;                                                                                       // 4478\n      }                                                                                                                // 4479\n      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {                                          // 4480\n        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);         // 4481\n      }                                                                                                                // 4482\n    };                                                                                                                 // 4483\n  }                                                                                                                    // 4484\n  function d3_geo_circleAngle(cr, point) {                                                                             // 4485\n    var a = d3_geo_cartesian(point);                                                                                   // 4486\n    a[0] -= cr;                                                                                                        // 4487\n    d3_geo_cartesianNormalize(a);                                                                                      // 4488\n    var angle = d3_acos(-a[1]);                                                                                        // 4489\n    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);                                           // 4490\n  }                                                                                                                    // 4491\n  d3.geo.distance = function(a, b) {                                                                                   // 4492\n    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;\n    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);\n  };                                                                                                                   // 4495\n  d3.geo.graticule = function() {                                                                                      // 4496\n    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;              // 4497\n    function graticule() {                                                                                             // 4498\n      return {                                                                                                         // 4499\n        type: \"MultiLineString\",                                                                                       // 4500\n        coordinates: lines()                                                                                           // 4501\n      };                                                                                                               // 4502\n    }                                                                                                                  // 4503\n    function lines() {                                                                                                 // 4504\n      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {\n        return abs(x % DX) > ε;                                                                                        // 4506\n      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {                                 // 4507\n        return abs(y % DY) > ε;                                                                                        // 4508\n      }).map(y));                                                                                                      // 4509\n    }                                                                                                                  // 4510\n    graticule.lines = function() {                                                                                     // 4511\n      return lines().map(function(coordinates) {                                                                       // 4512\n        return {                                                                                                       // 4513\n          type: \"LineString\",                                                                                          // 4514\n          coordinates: coordinates                                                                                     // 4515\n        };                                                                                                             // 4516\n      });                                                                                                              // 4517\n    };                                                                                                                 // 4518\n    graticule.outline = function() {                                                                                   // 4519\n      return {                                                                                                         // 4520\n        type: \"Polygon\",                                                                                               // 4521\n        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]              // 4522\n      };                                                                                                               // 4523\n    };                                                                                                                 // 4524\n    graticule.extent = function(_) {                                                                                   // 4525\n      if (!arguments.length) return graticule.minorExtent();                                                           // 4526\n      return graticule.majorExtent(_).minorExtent(_);                                                                  // 4527\n    };                                                                                                                 // 4528\n    graticule.majorExtent = function(_) {                                                                              // 4529\n      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];                                                        // 4530\n      X0 = +_[0][0], X1 = +_[1][0];                                                                                    // 4531\n      Y0 = +_[0][1], Y1 = +_[1][1];                                                                                    // 4532\n      if (X0 > X1) _ = X0, X0 = X1, X1 = _;                                                                            // 4533\n      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;                                                                            // 4534\n      return graticule.precision(precision);                                                                           // 4535\n    };                                                                                                                 // 4536\n    graticule.minorExtent = function(_) {                                                                              // 4537\n      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];                                                        // 4538\n      x0 = +_[0][0], x1 = +_[1][0];                                                                                    // 4539\n      y0 = +_[0][1], y1 = +_[1][1];                                                                                    // 4540\n      if (x0 > x1) _ = x0, x0 = x1, x1 = _;                                                                            // 4541\n      if (y0 > y1) _ = y0, y0 = y1, y1 = _;                                                                            // 4542\n      return graticule.precision(precision);                                                                           // 4543\n    };                                                                                                                 // 4544\n    graticule.step = function(_) {                                                                                     // 4545\n      if (!arguments.length) return graticule.minorStep();                                                             // 4546\n      return graticule.majorStep(_).minorStep(_);                                                                      // 4547\n    };                                                                                                                 // 4548\n    graticule.majorStep = function(_) {                                                                                // 4549\n      if (!arguments.length) return [ DX, DY ];                                                                        // 4550\n      DX = +_[0], DY = +_[1];                                                                                          // 4551\n      return graticule;                                                                                                // 4552\n    };                                                                                                                 // 4553\n    graticule.minorStep = function(_) {                                                                                // 4554\n      if (!arguments.length) return [ dx, dy ];                                                                        // 4555\n      dx = +_[0], dy = +_[1];                                                                                          // 4556\n      return graticule;                                                                                                // 4557\n    };                                                                                                                 // 4558\n    graticule.precision = function(_) {                                                                                // 4559\n      if (!arguments.length) return precision;                                                                         // 4560\n      precision = +_;                                                                                                  // 4561\n      x = d3_geo_graticuleX(y0, y1, 90);                                                                               // 4562\n      y = d3_geo_graticuleY(x0, x1, precision);                                                                        // 4563\n      X = d3_geo_graticuleX(Y0, Y1, 90);                                                                               // 4564\n      Y = d3_geo_graticuleY(X0, X1, precision);                                                                        // 4565\n      return graticule;                                                                                                // 4566\n    };                                                                                                                 // 4567\n    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);\n  };                                                                                                                   // 4569\n  function d3_geo_graticuleX(y0, y1, dy) {                                                                             // 4570\n    var y = d3.range(y0, y1 - ε, dy).concat(y1);                                                                       // 4571\n    return function(x) {                                                                                               // 4572\n      return y.map(function(y) {                                                                                       // 4573\n        return [ x, y ];                                                                                               // 4574\n      });                                                                                                              // 4575\n    };                                                                                                                 // 4576\n  }                                                                                                                    // 4577\n  function d3_geo_graticuleY(x0, x1, dx) {                                                                             // 4578\n    var x = d3.range(x0, x1 - ε, dx).concat(x1);                                                                       // 4579\n    return function(y) {                                                                                               // 4580\n      return x.map(function(x) {                                                                                       // 4581\n        return [ x, y ];                                                                                               // 4582\n      });                                                                                                              // 4583\n    };                                                                                                                 // 4584\n  }                                                                                                                    // 4585\n  function d3_source(d) {                                                                                              // 4586\n    return d.source;                                                                                                   // 4587\n  }                                                                                                                    // 4588\n  function d3_target(d) {                                                                                              // 4589\n    return d.target;                                                                                                   // 4590\n  }                                                                                                                    // 4591\n  d3.geo.greatArc = function() {                                                                                       // 4592\n    var source = d3_source, source_, target = d3_target, target_;                                                      // 4593\n    function greatArc() {                                                                                              // 4594\n      return {                                                                                                         // 4595\n        type: \"LineString\",                                                                                            // 4596\n        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]            // 4597\n      };                                                                                                               // 4598\n    }                                                                                                                  // 4599\n    greatArc.distance = function() {                                                                                   // 4600\n      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));      // 4601\n    };                                                                                                                 // 4602\n    greatArc.source = function(_) {                                                                                    // 4603\n      if (!arguments.length) return source;                                                                            // 4604\n      source = _, source_ = typeof _ === \"function\" ? null : _;                                                        // 4605\n      return greatArc;                                                                                                 // 4606\n    };                                                                                                                 // 4607\n    greatArc.target = function(_) {                                                                                    // 4608\n      if (!arguments.length) return target;                                                                            // 4609\n      target = _, target_ = typeof _ === \"function\" ? null : _;                                                        // 4610\n      return greatArc;                                                                                                 // 4611\n    };                                                                                                                 // 4612\n    greatArc.precision = function() {                                                                                  // 4613\n      return arguments.length ? greatArc : 0;                                                                          // 4614\n    };                                                                                                                 // 4615\n    return greatArc;                                                                                                   // 4616\n  };                                                                                                                   // 4617\n  d3.geo.interpolate = function(source, target) {                                                                      // 4618\n    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);\n  };                                                                                                                   // 4620\n  function d3_geo_interpolate(x0, y0, x1, y1) {                                                                        // 4621\n    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);\n    var interpolate = d ? function(t) {                                                                                // 4623\n      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;\n      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];                  // 4625\n    } : function() {                                                                                                   // 4626\n      return [ x0 * d3_degrees, y0 * d3_degrees ];                                                                     // 4627\n    };                                                                                                                 // 4628\n    interpolate.distance = d;                                                                                          // 4629\n    return interpolate;                                                                                                // 4630\n  }                                                                                                                    // 4631\n  d3.geo.length = function(object) {                                                                                   // 4632\n    d3_geo_lengthSum = 0;                                                                                              // 4633\n    d3.geo.stream(object, d3_geo_length);                                                                              // 4634\n    return d3_geo_lengthSum;                                                                                           // 4635\n  };                                                                                                                   // 4636\n  var d3_geo_lengthSum;                                                                                                // 4637\n  var d3_geo_length = {                                                                                                // 4638\n    sphere: d3_noop,                                                                                                   // 4639\n    point: d3_noop,                                                                                                    // 4640\n    lineStart: d3_geo_lengthLineStart,                                                                                 // 4641\n    lineEnd: d3_noop,                                                                                                  // 4642\n    polygonStart: d3_noop,                                                                                             // 4643\n    polygonEnd: d3_noop                                                                                                // 4644\n  };                                                                                                                   // 4645\n  function d3_geo_lengthLineStart() {                                                                                  // 4646\n    var λ0, sinφ0, cosφ0;                                                                                              // 4647\n    d3_geo_length.point = function(λ, φ) {                                                                             // 4648\n      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);                                     // 4649\n      d3_geo_length.point = nextPoint;                                                                                 // 4650\n    };                                                                                                                 // 4651\n    d3_geo_length.lineEnd = function() {                                                                               // 4652\n      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;                                                           // 4653\n    };                                                                                                                 // 4654\n    function nextPoint(λ, φ) {                                                                                         // 4655\n      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);  // 4656\n      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);\n      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;                                                                              // 4658\n    }                                                                                                                  // 4659\n  }                                                                                                                    // 4660\n  function d3_geo_azimuthal(scale, angle) {                                                                            // 4661\n    function azimuthal(λ, φ) {                                                                                         // 4662\n      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);                                              // 4663\n      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];                                                              // 4664\n    }                                                                                                                  // 4665\n    azimuthal.invert = function(x, y) {                                                                                // 4666\n      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);                          // 4667\n      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];                                         // 4668\n    };                                                                                                                 // 4669\n    return azimuthal;                                                                                                  // 4670\n  }                                                                                                                    // 4671\n  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {                                                // 4672\n    return Math.sqrt(2 / (1 + cosλcosφ));                                                                              // 4673\n  }, function(ρ) {                                                                                                     // 4674\n    return 2 * Math.asin(ρ / 2);                                                                                       // 4675\n  });                                                                                                                  // 4676\n  (d3.geo.azimuthalEqualArea = function() {                                                                            // 4677\n    return d3_geo_projection(d3_geo_azimuthalEqualArea);                                                               // 4678\n  }).raw = d3_geo_azimuthalEqualArea;                                                                                  // 4679\n  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {                                              // 4680\n    var c = Math.acos(cosλcosφ);                                                                                       // 4681\n    return c && c / Math.sin(c);                                                                                       // 4682\n  }, d3_identity);                                                                                                     // 4683\n  (d3.geo.azimuthalEquidistant = function() {                                                                          // 4684\n    return d3_geo_projection(d3_geo_azimuthalEquidistant);                                                             // 4685\n  }).raw = d3_geo_azimuthalEquidistant;                                                                                // 4686\n  function d3_geo_conicConformal(φ0, φ1) {                                                                             // 4687\n    var cosφ0 = Math.cos(φ0), t = function(φ) {                                                                        // 4688\n      return Math.tan(π / 4 + φ / 2);                                                                                  // 4689\n    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;\n    if (!n) return d3_geo_mercator;                                                                                    // 4691\n    function forward(λ, φ) {                                                                                           // 4692\n      if (F > 0) {                                                                                                     // 4693\n        if (φ < -halfπ + ε) φ = -halfπ + ε;                                                                            // 4694\n      } else {                                                                                                         // 4695\n        if (φ > halfπ - ε) φ = halfπ - ε;                                                                              // 4696\n      }                                                                                                                // 4697\n      var ρ = F / Math.pow(t(φ), n);                                                                                   // 4698\n      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];                                                         // 4699\n    }                                                                                                                  // 4700\n    forward.invert = function(x, y) {                                                                                  // 4701\n      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);                                                // 4702\n      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];                               // 4703\n    };                                                                                                                 // 4704\n    return forward;                                                                                                    // 4705\n  }                                                                                                                    // 4706\n  (d3.geo.conicConformal = function() {                                                                                // 4707\n    return d3_geo_conic(d3_geo_conicConformal);                                                                        // 4708\n  }).raw = d3_geo_conicConformal;                                                                                      // 4709\n  function d3_geo_conicEquidistant(φ0, φ1) {                                                                           // 4710\n    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;   // 4711\n    if (abs(n) < ε) return d3_geo_equirectangular;                                                                     // 4712\n    function forward(λ, φ) {                                                                                           // 4713\n      var ρ = G - φ;                                                                                                   // 4714\n      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];                                                         // 4715\n    }                                                                                                                  // 4716\n    forward.invert = function(x, y) {                                                                                  // 4717\n      var ρ0_y = G - y;                                                                                                // 4718\n      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];                              // 4719\n    };                                                                                                                 // 4720\n    return forward;                                                                                                    // 4721\n  }                                                                                                                    // 4722\n  (d3.geo.conicEquidistant = function() {                                                                              // 4723\n    return d3_geo_conic(d3_geo_conicEquidistant);                                                                      // 4724\n  }).raw = d3_geo_conicEquidistant;                                                                                    // 4725\n  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {                                                          // 4726\n    return 1 / cosλcosφ;                                                                                               // 4727\n  }, Math.atan);                                                                                                       // 4728\n  (d3.geo.gnomonic = function() {                                                                                      // 4729\n    return d3_geo_projection(d3_geo_gnomonic);                                                                         // 4730\n  }).raw = d3_geo_gnomonic;                                                                                            // 4731\n  function d3_geo_mercator(λ, φ) {                                                                                     // 4732\n    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];                                                                   // 4733\n  }                                                                                                                    // 4734\n  d3_geo_mercator.invert = function(x, y) {                                                                            // 4735\n    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];                                                                  // 4736\n  };                                                                                                                   // 4737\n  function d3_geo_mercatorProjection(project) {                                                                        // 4738\n    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto; // 4739\n    m.scale = function() {                                                                                             // 4740\n      var v = scale.apply(m, arguments);                                                                               // 4741\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;                                                          // 4742\n    };                                                                                                                 // 4743\n    m.translate = function() {                                                                                         // 4744\n      var v = translate.apply(m, arguments);                                                                           // 4745\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;                                                          // 4746\n    };                                                                                                                 // 4747\n    m.clipExtent = function(_) {                                                                                       // 4748\n      var v = clipExtent.apply(m, arguments);                                                                          // 4749\n      if (v === m) {                                                                                                   // 4750\n        if (clipAuto = _ == null) {                                                                                    // 4751\n          var k = π * scale(), t = translate();                                                                        // 4752\n          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);                                              // 4753\n        }                                                                                                              // 4754\n      } else if (clipAuto) {                                                                                           // 4755\n        v = null;                                                                                                      // 4756\n      }                                                                                                                // 4757\n      return v;                                                                                                        // 4758\n    };                                                                                                                 // 4759\n    return m.clipExtent(null);                                                                                         // 4760\n  }                                                                                                                    // 4761\n  (d3.geo.mercator = function() {                                                                                      // 4762\n    return d3_geo_mercatorProjection(d3_geo_mercator);                                                                 // 4763\n  }).raw = d3_geo_mercator;                                                                                            // 4764\n  var d3_geo_orthographic = d3_geo_azimuthal(function() {                                                              // 4765\n    return 1;                                                                                                          // 4766\n  }, Math.asin);                                                                                                       // 4767\n  (d3.geo.orthographic = function() {                                                                                  // 4768\n    return d3_geo_projection(d3_geo_orthographic);                                                                     // 4769\n  }).raw = d3_geo_orthographic;                                                                                        // 4770\n  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {                                                     // 4771\n    return 1 / (1 + cosλcosφ);                                                                                         // 4772\n  }, function(ρ) {                                                                                                     // 4773\n    return 2 * Math.atan(ρ);                                                                                           // 4774\n  });                                                                                                                  // 4775\n  (d3.geo.stereographic = function() {                                                                                 // 4776\n    return d3_geo_projection(d3_geo_stereographic);                                                                    // 4777\n  }).raw = d3_geo_stereographic;                                                                                       // 4778\n  function d3_geo_transverseMercator(λ, φ) {                                                                           // 4779\n    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];                                                                  // 4780\n  }                                                                                                                    // 4781\n  d3_geo_transverseMercator.invert = function(x, y) {                                                                  // 4782\n    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];                                                                 // 4783\n  };                                                                                                                   // 4784\n  (d3.geo.transverseMercator = function() {                                                                            // 4785\n    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;\n    projection.center = function(_) {                                                                                  // 4787\n      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);                                            // 4788\n    };                                                                                                                 // 4789\n    projection.rotate = function(_) {                                                                                  // 4790\n      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(),                                // 4791\n      [ _[0], _[1], _[2] - 90 ]);                                                                                      // 4792\n    };                                                                                                                 // 4793\n    return rotate([ 0, 0, 90 ]);                                                                                       // 4794\n  }).raw = d3_geo_transverseMercator;                                                                                  // 4795\n  d3.geom = {};                                                                                                        // 4796\n  function d3_geom_pointX(d) {                                                                                         // 4797\n    return d[0];                                                                                                       // 4798\n  }                                                                                                                    // 4799\n  function d3_geom_pointY(d) {                                                                                         // 4800\n    return d[1];                                                                                                       // 4801\n  }                                                                                                                    // 4802\n  d3.geom.hull = function(vertices) {                                                                                  // 4803\n    var x = d3_geom_pointX, y = d3_geom_pointY;                                                                        // 4804\n    if (arguments.length) return hull(vertices);                                                                       // 4805\n    function hull(data) {                                                                                              // 4806\n      if (data.length < 3) return [];                                                                                  // 4807\n      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];                 // 4808\n      for (i = 0; i < n; i++) {                                                                                        // 4809\n        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);                                    // 4810\n      }                                                                                                                // 4811\n      points.sort(d3_geom_hullOrder);                                                                                  // 4812\n      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);                                     // 4813\n      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);                                 // 4814\n      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];\n      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);                                 // 4816\n      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);                  // 4817\n      return polygon;                                                                                                  // 4818\n    }                                                                                                                  // 4819\n    hull.x = function(_) {                                                                                             // 4820\n      return arguments.length ? (x = _, hull) : x;                                                                     // 4821\n    };                                                                                                                 // 4822\n    hull.y = function(_) {                                                                                             // 4823\n      return arguments.length ? (y = _, hull) : y;                                                                     // 4824\n    };                                                                                                                 // 4825\n    return hull;                                                                                                       // 4826\n  };                                                                                                                   // 4827\n  function d3_geom_hullUpper(points) {                                                                                 // 4828\n    var n = points.length, hull = [ 0, 1 ], hs = 2;                                                                    // 4829\n    for (var i = 2; i < n; i++) {                                                                                      // 4830\n      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;                   // 4831\n      hull[hs++] = i;                                                                                                  // 4832\n    }                                                                                                                  // 4833\n    return hull.slice(0, hs);                                                                                          // 4834\n  }                                                                                                                    // 4835\n  function d3_geom_hullOrder(a, b) {                                                                                   // 4836\n    return a[0] - b[0] || a[1] - b[1];                                                                                 // 4837\n  }                                                                                                                    // 4838\n  d3.geom.polygon = function(coordinates) {                                                                            // 4839\n    d3_subclass(coordinates, d3_geom_polygonPrototype);                                                                // 4840\n    return coordinates;                                                                                                // 4841\n  };                                                                                                                   // 4842\n  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];                                                       // 4843\n  d3_geom_polygonPrototype.area = function() {                                                                         // 4844\n    var i = -1, n = this.length, a, b = this[n - 1], area = 0;                                                         // 4845\n    while (++i < n) {                                                                                                  // 4846\n      a = b;                                                                                                           // 4847\n      b = this[i];                                                                                                     // 4848\n      area += a[1] * b[0] - a[0] * b[1];                                                                               // 4849\n    }                                                                                                                  // 4850\n    return area * .5;                                                                                                  // 4851\n  };                                                                                                                   // 4852\n  d3_geom_polygonPrototype.centroid = function(k) {                                                                    // 4853\n    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;                                                  // 4854\n    if (!arguments.length) k = -1 / (6 * this.area());                                                                 // 4855\n    while (++i < n) {                                                                                                  // 4856\n      a = b;                                                                                                           // 4857\n      b = this[i];                                                                                                     // 4858\n      c = a[0] * b[1] - b[0] * a[1];                                                                                   // 4859\n      x += (a[0] + b[0]) * c;                                                                                          // 4860\n      y += (a[1] + b[1]) * c;                                                                                          // 4861\n    }                                                                                                                  // 4862\n    return [ x * k, y * k ];                                                                                           // 4863\n  };                                                                                                                   // 4864\n  d3_geom_polygonPrototype.clip = function(subject) {                                                                  // 4865\n    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;\n    while (++i < n) {                                                                                                  // 4867\n      input = subject.slice();                                                                                         // 4868\n      subject.length = 0;                                                                                              // 4869\n      b = this[i];                                                                                                     // 4870\n      c = input[(m = input.length - closed) - 1];                                                                      // 4871\n      j = -1;                                                                                                          // 4872\n      while (++j < m) {                                                                                                // 4873\n        d = input[j];                                                                                                  // 4874\n        if (d3_geom_polygonInside(d, a, b)) {                                                                          // 4875\n          if (!d3_geom_polygonInside(c, a, b)) {                                                                       // 4876\n            subject.push(d3_geom_polygonIntersect(c, d, a, b));                                                        // 4877\n          }                                                                                                            // 4878\n          subject.push(d);                                                                                             // 4879\n        } else if (d3_geom_polygonInside(c, a, b)) {                                                                   // 4880\n          subject.push(d3_geom_polygonIntersect(c, d, a, b));                                                          // 4881\n        }                                                                                                              // 4882\n        c = d;                                                                                                         // 4883\n      }                                                                                                                // 4884\n      if (closed) subject.push(subject[0]);                                                                            // 4885\n      a = b;                                                                                                           // 4886\n    }                                                                                                                  // 4887\n    return subject;                                                                                                    // 4888\n  };                                                                                                                   // 4889\n  function d3_geom_polygonInside(p, a, b) {                                                                            // 4890\n    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);                                              // 4891\n  }                                                                                                                    // 4892\n  function d3_geom_polygonIntersect(c, d, a, b) {                                                                      // 4893\n    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);\n    return [ x1 + ua * x21, y1 + ua * y21 ];                                                                           // 4895\n  }                                                                                                                    // 4896\n  function d3_geom_polygonClosed(coordinates) {                                                                        // 4897\n    var a = coordinates[0], b = coordinates[coordinates.length - 1];                                                   // 4898\n    return !(a[0] - b[0] || a[1] - b[1]);                                                                              // 4899\n  }                                                                                                                    // 4900\n  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];\n  function d3_geom_voronoiBeach() {                                                                                    // 4902\n    d3_geom_voronoiRedBlackNode(this);                                                                                 // 4903\n    this.edge = this.site = this.circle = null;                                                                        // 4904\n  }                                                                                                                    // 4905\n  function d3_geom_voronoiCreateBeach(site) {                                                                          // 4906\n    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();                                          // 4907\n    beach.site = site;                                                                                                 // 4908\n    return beach;                                                                                                      // 4909\n  }                                                                                                                    // 4910\n  function d3_geom_voronoiDetachBeach(beach) {                                                                         // 4911\n    d3_geom_voronoiDetachCircle(beach);                                                                                // 4912\n    d3_geom_voronoiBeaches.remove(beach);                                                                              // 4913\n    d3_geom_voronoiBeachPool.push(beach);                                                                              // 4914\n    d3_geom_voronoiRedBlackNode(beach);                                                                                // 4915\n  }                                                                                                                    // 4916\n  function d3_geom_voronoiRemoveBeach(beach) {                                                                         // 4917\n    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {                                                 // 4918\n      x: x,                                                                                                            // 4919\n      y: y                                                                                                             // 4920\n    }, previous = beach.P, next = beach.N, disappearing = [ beach ];                                                   // 4921\n    d3_geom_voronoiDetachBeach(beach);                                                                                 // 4922\n    var lArc = previous;                                                                                               // 4923\n    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {                                 // 4924\n      previous = lArc.P;                                                                                               // 4925\n      disappearing.unshift(lArc);                                                                                      // 4926\n      d3_geom_voronoiDetachBeach(lArc);                                                                                // 4927\n      lArc = previous;                                                                                                 // 4928\n    }                                                                                                                  // 4929\n    disappearing.unshift(lArc);                                                                                        // 4930\n    d3_geom_voronoiDetachCircle(lArc);                                                                                 // 4931\n    var rArc = next;                                                                                                   // 4932\n    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {                                 // 4933\n      next = rArc.N;                                                                                                   // 4934\n      disappearing.push(rArc);                                                                                         // 4935\n      d3_geom_voronoiDetachBeach(rArc);                                                                                // 4936\n      rArc = next;                                                                                                     // 4937\n    }                                                                                                                  // 4938\n    disappearing.push(rArc);                                                                                           // 4939\n    d3_geom_voronoiDetachCircle(rArc);                                                                                 // 4940\n    var nArcs = disappearing.length, iArc;                                                                             // 4941\n    for (iArc = 1; iArc < nArcs; ++iArc) {                                                                             // 4942\n      rArc = disappearing[iArc];                                                                                       // 4943\n      lArc = disappearing[iArc - 1];                                                                                   // 4944\n      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);                                              // 4945\n    }                                                                                                                  // 4946\n    lArc = disappearing[0];                                                                                            // 4947\n    rArc = disappearing[nArcs - 1];                                                                                    // 4948\n    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);                                         // 4949\n    d3_geom_voronoiAttachCircle(lArc);                                                                                 // 4950\n    d3_geom_voronoiAttachCircle(rArc);                                                                                 // 4951\n  }                                                                                                                    // 4952\n  function d3_geom_voronoiAddBeach(site) {                                                                             // 4953\n    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;                         // 4954\n    while (node) {                                                                                                     // 4955\n      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;                                                        // 4956\n      if (dxl > ε) node = node.L; else {                                                                               // 4957\n        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);                                                     // 4958\n        if (dxr > ε) {                                                                                                 // 4959\n          if (!node.R) {                                                                                               // 4960\n            lArc = node;                                                                                               // 4961\n            break;                                                                                                     // 4962\n          }                                                                                                            // 4963\n          node = node.R;                                                                                               // 4964\n        } else {                                                                                                       // 4965\n          if (dxl > -ε) {                                                                                              // 4966\n            lArc = node.P;                                                                                             // 4967\n            rArc = node;                                                                                               // 4968\n          } else if (dxr > -ε) {                                                                                       // 4969\n            lArc = node;                                                                                               // 4970\n            rArc = node.N;                                                                                             // 4971\n          } else {                                                                                                     // 4972\n            lArc = rArc = node;                                                                                        // 4973\n          }                                                                                                            // 4974\n          break;                                                                                                       // 4975\n        }                                                                                                              // 4976\n      }                                                                                                                // 4977\n    }                                                                                                                  // 4978\n    var newArc = d3_geom_voronoiCreateBeach(site);                                                                     // 4979\n    d3_geom_voronoiBeaches.insert(lArc, newArc);                                                                       // 4980\n    if (!lArc && !rArc) return;                                                                                        // 4981\n    if (lArc === rArc) {                                                                                               // 4982\n      d3_geom_voronoiDetachCircle(lArc);                                                                               // 4983\n      rArc = d3_geom_voronoiCreateBeach(lArc.site);                                                                    // 4984\n      d3_geom_voronoiBeaches.insert(newArc, rArc);                                                                     // 4985\n      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);                                     // 4986\n      d3_geom_voronoiAttachCircle(lArc);                                                                               // 4987\n      d3_geom_voronoiAttachCircle(rArc);                                                                               // 4988\n      return;                                                                                                          // 4989\n    }                                                                                                                  // 4990\n    if (!rArc) {                                                                                                       // 4991\n      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);                                                 // 4992\n      return;                                                                                                          // 4993\n    }                                                                                                                  // 4994\n    d3_geom_voronoiDetachCircle(lArc);                                                                                 // 4995\n    d3_geom_voronoiDetachCircle(rArc);                                                                                 // 4996\n    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {\n      x: (cy * hb - by * hc) / d + ax,                                                                                 // 4998\n      y: (bx * hc - cx * hb) / d + ay                                                                                  // 4999\n    };                                                                                                                 // 5000\n    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);                                                        // 5001\n    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);                                                // 5002\n    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);                                                  // 5003\n    d3_geom_voronoiAttachCircle(lArc);                                                                                 // 5004\n    d3_geom_voronoiAttachCircle(rArc);                                                                                 // 5005\n  }                                                                                                                    // 5006\n  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {                                                             // 5007\n    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;                                     // 5008\n    if (!pby2) return rfocx;                                                                                           // 5009\n    var lArc = arc.P;                                                                                                  // 5010\n    if (!lArc) return -Infinity;                                                                                       // 5011\n    site = lArc.site;                                                                                                  // 5012\n    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;                                                     // 5013\n    if (!plby2) return lfocx;                                                                                          // 5014\n    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;                                               // 5015\n    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n    return (rfocx + lfocx) / 2;                                                                                        // 5017\n  }                                                                                                                    // 5018\n  function d3_geom_voronoiRightBreakPoint(arc, directrix) {                                                            // 5019\n    var rArc = arc.N;                                                                                                  // 5020\n    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);                                                   // 5021\n    var site = arc.site;                                                                                               // 5022\n    return site.y === directrix ? site.x : Infinity;                                                                   // 5023\n  }                                                                                                                    // 5024\n  function d3_geom_voronoiCell(site) {                                                                                 // 5025\n    this.site = site;                                                                                                  // 5026\n    this.edges = [];                                                                                                   // 5027\n  }                                                                                                                    // 5028\n  d3_geom_voronoiCell.prototype.prepare = function() {                                                                 // 5029\n    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;                                                    // 5030\n    while (iHalfEdge--) {                                                                                              // 5031\n      edge = halfEdges[iHalfEdge].edge;                                                                                // 5032\n      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);                                                          // 5033\n    }                                                                                                                  // 5034\n    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);                                                                      // 5035\n    return halfEdges.length;                                                                                           // 5036\n  };                                                                                                                   // 5037\n  function d3_geom_voronoiCloseCells(extent) {                                                                         // 5038\n    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;\n    while (iCell--) {                                                                                                  // 5040\n      cell = cells[iCell];                                                                                             // 5041\n      if (!cell || !cell.prepare()) continue;                                                                          // 5042\n      halfEdges = cell.edges;                                                                                          // 5043\n      nHalfEdges = halfEdges.length;                                                                                   // 5044\n      iHalfEdge = 0;                                                                                                   // 5045\n      while (iHalfEdge < nHalfEdges) {                                                                                 // 5046\n        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;                                                      // 5047\n        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;                               // 5048\n        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {                                                                    // 5049\n          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {\n            x: x0,                                                                                                     // 5051\n            y: abs(x2 - x0) < ε ? y2 : y1                                                                              // 5052\n          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {                                                                      // 5053\n            x: abs(y2 - y1) < ε ? x2 : x1,                                                                             // 5054\n            y: y1                                                                                                      // 5055\n          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {                                                                      // 5056\n            x: x1,                                                                                                     // 5057\n            y: abs(x2 - x1) < ε ? y2 : y0                                                                              // 5058\n          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {                                                                      // 5059\n            x: abs(y2 - y0) < ε ? x2 : x0,                                                                             // 5060\n            y: y0                                                                                                      // 5061\n          } : null), cell.site, null));                                                                                // 5062\n          ++nHalfEdges;                                                                                                // 5063\n        }                                                                                                              // 5064\n      }                                                                                                                // 5065\n    }                                                                                                                  // 5066\n  }                                                                                                                    // 5067\n  function d3_geom_voronoiHalfEdgeOrder(a, b) {                                                                        // 5068\n    return b.angle - a.angle;                                                                                          // 5069\n  }                                                                                                                    // 5070\n  function d3_geom_voronoiCircle() {                                                                                   // 5071\n    d3_geom_voronoiRedBlackNode(this);                                                                                 // 5072\n    this.x = this.y = this.arc = this.site = this.cy = null;                                                           // 5073\n  }                                                                                                                    // 5074\n  function d3_geom_voronoiAttachCircle(arc) {                                                                          // 5075\n    var lArc = arc.P, rArc = arc.N;                                                                                    // 5076\n    if (!lArc || !rArc) return;                                                                                        // 5077\n    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;                                                        // 5078\n    if (lSite === rSite) return;                                                                                       // 5079\n    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;        // 5080\n    var d = 2 * (ax * cy - ay * cx);                                                                                   // 5081\n    if (d >= -ε2) return;                                                                                              // 5082\n    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;\n    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();                                       // 5084\n    circle.arc = arc;                                                                                                  // 5085\n    circle.site = cSite;                                                                                               // 5086\n    circle.x = x + bx;                                                                                                 // 5087\n    circle.y = cy + Math.sqrt(x * x + y * y);                                                                          // 5088\n    circle.cy = cy;                                                                                                    // 5089\n    arc.circle = circle;                                                                                               // 5090\n    var before = null, node = d3_geom_voronoiCircles._;                                                                // 5091\n    while (node) {                                                                                                     // 5092\n      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {                                            // 5093\n        if (node.L) node = node.L; else {                                                                              // 5094\n          before = node.P;                                                                                             // 5095\n          break;                                                                                                       // 5096\n        }                                                                                                              // 5097\n      } else {                                                                                                         // 5098\n        if (node.R) node = node.R; else {                                                                              // 5099\n          before = node;                                                                                               // 5100\n          break;                                                                                                       // 5101\n        }                                                                                                              // 5102\n      }                                                                                                                // 5103\n    }                                                                                                                  // 5104\n    d3_geom_voronoiCircles.insert(before, circle);                                                                     // 5105\n    if (!before) d3_geom_voronoiFirstCircle = circle;                                                                  // 5106\n  }                                                                                                                    // 5107\n  function d3_geom_voronoiDetachCircle(arc) {                                                                          // 5108\n    var circle = arc.circle;                                                                                           // 5109\n    if (circle) {                                                                                                      // 5110\n      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;                                                            // 5111\n      d3_geom_voronoiCircles.remove(circle);                                                                           // 5112\n      d3_geom_voronoiCirclePool.push(circle);                                                                          // 5113\n      d3_geom_voronoiRedBlackNode(circle);                                                                             // 5114\n      arc.circle = null;                                                                                               // 5115\n    }                                                                                                                  // 5116\n  }                                                                                                                    // 5117\n  function d3_geom_voronoiClipEdges(extent) {                                                                          // 5118\n    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;\n    while (i--) {                                                                                                      // 5120\n      e = edges[i];                                                                                                    // 5121\n      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {    // 5122\n        e.a = e.b = null;                                                                                              // 5123\n        edges.splice(i, 1);                                                                                            // 5124\n      }                                                                                                                // 5125\n    }                                                                                                                  // 5126\n  }                                                                                                                    // 5127\n  function d3_geom_voronoiConnectEdge(edge, extent) {                                                                  // 5128\n    var vb = edge.b;                                                                                                   // 5129\n    if (vb) return true;                                                                                               // 5130\n    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;\n    if (ry === ly) {                                                                                                   // 5132\n      if (fx < x0 || fx >= x1) return;                                                                                 // 5133\n      if (lx > rx) {                                                                                                   // 5134\n        if (!va) va = {                                                                                                // 5135\n          x: fx,                                                                                                       // 5136\n          y: y0                                                                                                        // 5137\n        }; else if (va.y >= y1) return;                                                                                // 5138\n        vb = {                                                                                                         // 5139\n          x: fx,                                                                                                       // 5140\n          y: y1                                                                                                        // 5141\n        };                                                                                                             // 5142\n      } else {                                                                                                         // 5143\n        if (!va) va = {                                                                                                // 5144\n          x: fx,                                                                                                       // 5145\n          y: y1                                                                                                        // 5146\n        }; else if (va.y < y0) return;                                                                                 // 5147\n        vb = {                                                                                                         // 5148\n          x: fx,                                                                                                       // 5149\n          y: y0                                                                                                        // 5150\n        };                                                                                                             // 5151\n      }                                                                                                                // 5152\n    } else {                                                                                                           // 5153\n      fm = (lx - rx) / (ry - ly);                                                                                      // 5154\n      fb = fy - fm * fx;                                                                                               // 5155\n      if (fm < -1 || fm > 1) {                                                                                         // 5156\n        if (lx > rx) {                                                                                                 // 5157\n          if (!va) va = {                                                                                              // 5158\n            x: (y0 - fb) / fm,                                                                                         // 5159\n            y: y0                                                                                                      // 5160\n          }; else if (va.y >= y1) return;                                                                              // 5161\n          vb = {                                                                                                       // 5162\n            x: (y1 - fb) / fm,                                                                                         // 5163\n            y: y1                                                                                                      // 5164\n          };                                                                                                           // 5165\n        } else {                                                                                                       // 5166\n          if (!va) va = {                                                                                              // 5167\n            x: (y1 - fb) / fm,                                                                                         // 5168\n            y: y1                                                                                                      // 5169\n          }; else if (va.y < y0) return;                                                                               // 5170\n          vb = {                                                                                                       // 5171\n            x: (y0 - fb) / fm,                                                                                         // 5172\n            y: y0                                                                                                      // 5173\n          };                                                                                                           // 5174\n        }                                                                                                              // 5175\n      } else {                                                                                                         // 5176\n        if (ly < ry) {                                                                                                 // 5177\n          if (!va) va = {                                                                                              // 5178\n            x: x0,                                                                                                     // 5179\n            y: fm * x0 + fb                                                                                            // 5180\n          }; else if (va.x >= x1) return;                                                                              // 5181\n          vb = {                                                                                                       // 5182\n            x: x1,                                                                                                     // 5183\n            y: fm * x1 + fb                                                                                            // 5184\n          };                                                                                                           // 5185\n        } else {                                                                                                       // 5186\n          if (!va) va = {                                                                                              // 5187\n            x: x1,                                                                                                     // 5188\n            y: fm * x1 + fb                                                                                            // 5189\n          }; else if (va.x < x0) return;                                                                               // 5190\n          vb = {                                                                                                       // 5191\n            x: x0,                                                                                                     // 5192\n            y: fm * x0 + fb                                                                                            // 5193\n          };                                                                                                           // 5194\n        }                                                                                                              // 5195\n      }                                                                                                                // 5196\n    }                                                                                                                  // 5197\n    edge.a = va;                                                                                                       // 5198\n    edge.b = vb;                                                                                                       // 5199\n    return true;                                                                                                       // 5200\n  }                                                                                                                    // 5201\n  function d3_geom_voronoiEdge(lSite, rSite) {                                                                         // 5202\n    this.l = lSite;                                                                                                    // 5203\n    this.r = rSite;                                                                                                    // 5204\n    this.a = this.b = null;                                                                                            // 5205\n  }                                                                                                                    // 5206\n  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {                                                           // 5207\n    var edge = new d3_geom_voronoiEdge(lSite, rSite);                                                                  // 5208\n    d3_geom_voronoiEdges.push(edge);                                                                                   // 5209\n    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);                                                         // 5210\n    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);                                                         // 5211\n    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));                         // 5212\n    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));                         // 5213\n    return edge;                                                                                                       // 5214\n  }                                                                                                                    // 5215\n  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {                                                            // 5216\n    var edge = new d3_geom_voronoiEdge(lSite, null);                                                                   // 5217\n    edge.a = va;                                                                                                       // 5218\n    edge.b = vb;                                                                                                       // 5219\n    d3_geom_voronoiEdges.push(edge);                                                                                   // 5220\n    return edge;                                                                                                       // 5221\n  }                                                                                                                    // 5222\n  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {                                                     // 5223\n    if (!edge.a && !edge.b) {                                                                                          // 5224\n      edge.a = vertex;                                                                                                 // 5225\n      edge.l = lSite;                                                                                                  // 5226\n      edge.r = rSite;                                                                                                  // 5227\n    } else if (edge.l === rSite) {                                                                                     // 5228\n      edge.b = vertex;                                                                                                 // 5229\n    } else {                                                                                                           // 5230\n      edge.a = vertex;                                                                                                 // 5231\n    }                                                                                                                  // 5232\n  }                                                                                                                    // 5233\n  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {                                                               // 5234\n    var va = edge.a, vb = edge.b;                                                                                      // 5235\n    this.edge = edge;                                                                                                  // 5236\n    this.site = lSite;                                                                                                 // 5237\n    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);\n  }                                                                                                                    // 5239\n  d3_geom_voronoiHalfEdge.prototype = {                                                                                // 5240\n    start: function() {                                                                                                // 5241\n      return this.edge.l === this.site ? this.edge.a : this.edge.b;                                                    // 5242\n    },                                                                                                                 // 5243\n    end: function() {                                                                                                  // 5244\n      return this.edge.l === this.site ? this.edge.b : this.edge.a;                                                    // 5245\n    }                                                                                                                  // 5246\n  };                                                                                                                   // 5247\n  function d3_geom_voronoiRedBlackTree() {                                                                             // 5248\n    this._ = null;                                                                                                     // 5249\n  }                                                                                                                    // 5250\n  function d3_geom_voronoiRedBlackNode(node) {                                                                         // 5251\n    node.U = node.C = node.L = node.R = node.P = node.N = null;                                                        // 5252\n  }                                                                                                                    // 5253\n  d3_geom_voronoiRedBlackTree.prototype = {                                                                            // 5254\n    insert: function(after, node) {                                                                                    // 5255\n      var parent, grandpa, uncle;                                                                                      // 5256\n      if (after) {                                                                                                     // 5257\n        node.P = after;                                                                                                // 5258\n        node.N = after.N;                                                                                              // 5259\n        if (after.N) after.N.P = node;                                                                                 // 5260\n        after.N = node;                                                                                                // 5261\n        if (after.R) {                                                                                                 // 5262\n          after = after.R;                                                                                             // 5263\n          while (after.L) after = after.L;                                                                             // 5264\n          after.L = node;                                                                                              // 5265\n        } else {                                                                                                       // 5266\n          after.R = node;                                                                                              // 5267\n        }                                                                                                              // 5268\n        parent = after;                                                                                                // 5269\n      } else if (this._) {                                                                                             // 5270\n        after = d3_geom_voronoiRedBlackFirst(this._);                                                                  // 5271\n        node.P = null;                                                                                                 // 5272\n        node.N = after;                                                                                                // 5273\n        after.P = after.L = node;                                                                                      // 5274\n        parent = after;                                                                                                // 5275\n      } else {                                                                                                         // 5276\n        node.P = node.N = null;                                                                                        // 5277\n        this._ = node;                                                                                                 // 5278\n        parent = null;                                                                                                 // 5279\n      }                                                                                                                // 5280\n      node.L = node.R = null;                                                                                          // 5281\n      node.U = parent;                                                                                                 // 5282\n      node.C = true;                                                                                                   // 5283\n      after = node;                                                                                                    // 5284\n      while (parent && parent.C) {                                                                                     // 5285\n        grandpa = parent.U;                                                                                            // 5286\n        if (parent === grandpa.L) {                                                                                    // 5287\n          uncle = grandpa.R;                                                                                           // 5288\n          if (uncle && uncle.C) {                                                                                      // 5289\n            parent.C = uncle.C = false;                                                                                // 5290\n            grandpa.C = true;                                                                                          // 5291\n            after = grandpa;                                                                                           // 5292\n          } else {                                                                                                     // 5293\n            if (after === parent.R) {                                                                                  // 5294\n              d3_geom_voronoiRedBlackRotateLeft(this, parent);                                                         // 5295\n              after = parent;                                                                                          // 5296\n              parent = after.U;                                                                                        // 5297\n            }                                                                                                          // 5298\n            parent.C = false;                                                                                          // 5299\n            grandpa.C = true;                                                                                          // 5300\n            d3_geom_voronoiRedBlackRotateRight(this, grandpa);                                                         // 5301\n          }                                                                                                            // 5302\n        } else {                                                                                                       // 5303\n          uncle = grandpa.L;                                                                                           // 5304\n          if (uncle && uncle.C) {                                                                                      // 5305\n            parent.C = uncle.C = false;                                                                                // 5306\n            grandpa.C = true;                                                                                          // 5307\n            after = grandpa;                                                                                           // 5308\n          } else {                                                                                                     // 5309\n            if (after === parent.L) {                                                                                  // 5310\n              d3_geom_voronoiRedBlackRotateRight(this, parent);                                                        // 5311\n              after = parent;                                                                                          // 5312\n              parent = after.U;                                                                                        // 5313\n            }                                                                                                          // 5314\n            parent.C = false;                                                                                          // 5315\n            grandpa.C = true;                                                                                          // 5316\n            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);                                                          // 5317\n          }                                                                                                            // 5318\n        }                                                                                                              // 5319\n        parent = after.U;                                                                                              // 5320\n      }                                                                                                                // 5321\n      this._.C = false;                                                                                                // 5322\n    },                                                                                                                 // 5323\n    remove: function(node) {                                                                                           // 5324\n      if (node.N) node.N.P = node.P;                                                                                   // 5325\n      if (node.P) node.P.N = node.N;                                                                                   // 5326\n      node.N = node.P = null;                                                                                          // 5327\n      var parent = node.U, sibling, left = node.L, right = node.R, next, red;                                          // 5328\n      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);          // 5329\n      if (parent) {                                                                                                    // 5330\n        if (parent.L === node) parent.L = next; else parent.R = next;                                                  // 5331\n      } else {                                                                                                         // 5332\n        this._ = next;                                                                                                 // 5333\n      }                                                                                                                // 5334\n      if (left && right) {                                                                                             // 5335\n        red = next.C;                                                                                                  // 5336\n        next.C = node.C;                                                                                               // 5337\n        next.L = left;                                                                                                 // 5338\n        left.U = next;                                                                                                 // 5339\n        if (next !== right) {                                                                                          // 5340\n          parent = next.U;                                                                                             // 5341\n          next.U = node.U;                                                                                             // 5342\n          node = next.R;                                                                                               // 5343\n          parent.L = node;                                                                                             // 5344\n          next.R = right;                                                                                              // 5345\n          right.U = next;                                                                                              // 5346\n        } else {                                                                                                       // 5347\n          next.U = parent;                                                                                             // 5348\n          parent = next;                                                                                               // 5349\n          node = next.R;                                                                                               // 5350\n        }                                                                                                              // 5351\n      } else {                                                                                                         // 5352\n        red = node.C;                                                                                                  // 5353\n        node = next;                                                                                                   // 5354\n      }                                                                                                                // 5355\n      if (node) node.U = parent;                                                                                       // 5356\n      if (red) return;                                                                                                 // 5357\n      if (node && node.C) {                                                                                            // 5358\n        node.C = false;                                                                                                // 5359\n        return;                                                                                                        // 5360\n      }                                                                                                                // 5361\n      do {                                                                                                             // 5362\n        if (node === this._) break;                                                                                    // 5363\n        if (node === parent.L) {                                                                                       // 5364\n          sibling = parent.R;                                                                                          // 5365\n          if (sibling.C) {                                                                                             // 5366\n            sibling.C = false;                                                                                         // 5367\n            parent.C = true;                                                                                           // 5368\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);                                                           // 5369\n            sibling = parent.R;                                                                                        // 5370\n          }                                                                                                            // 5371\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {                                                  // 5372\n            if (!sibling.R || !sibling.R.C) {                                                                          // 5373\n              sibling.L.C = false;                                                                                     // 5374\n              sibling.C = true;                                                                                        // 5375\n              d3_geom_voronoiRedBlackRotateRight(this, sibling);                                                       // 5376\n              sibling = parent.R;                                                                                      // 5377\n            }                                                                                                          // 5378\n            sibling.C = parent.C;                                                                                      // 5379\n            parent.C = sibling.R.C = false;                                                                            // 5380\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);                                                           // 5381\n            node = this._;                                                                                             // 5382\n            break;                                                                                                     // 5383\n          }                                                                                                            // 5384\n        } else {                                                                                                       // 5385\n          sibling = parent.L;                                                                                          // 5386\n          if (sibling.C) {                                                                                             // 5387\n            sibling.C = false;                                                                                         // 5388\n            parent.C = true;                                                                                           // 5389\n            d3_geom_voronoiRedBlackRotateRight(this, parent);                                                          // 5390\n            sibling = parent.L;                                                                                        // 5391\n          }                                                                                                            // 5392\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {                                                  // 5393\n            if (!sibling.L || !sibling.L.C) {                                                                          // 5394\n              sibling.R.C = false;                                                                                     // 5395\n              sibling.C = true;                                                                                        // 5396\n              d3_geom_voronoiRedBlackRotateLeft(this, sibling);                                                        // 5397\n              sibling = parent.L;                                                                                      // 5398\n            }                                                                                                          // 5399\n            sibling.C = parent.C;                                                                                      // 5400\n            parent.C = sibling.L.C = false;                                                                            // 5401\n            d3_geom_voronoiRedBlackRotateRight(this, parent);                                                          // 5402\n            node = this._;                                                                                             // 5403\n            break;                                                                                                     // 5404\n          }                                                                                                            // 5405\n        }                                                                                                              // 5406\n        sibling.C = true;                                                                                              // 5407\n        node = parent;                                                                                                 // 5408\n        parent = parent.U;                                                                                             // 5409\n      } while (!node.C);                                                                                               // 5410\n      if (node) node.C = false;                                                                                        // 5411\n    }                                                                                                                  // 5412\n  };                                                                                                                   // 5413\n  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {                                                             // 5414\n    var p = node, q = node.R, parent = p.U;                                                                            // 5415\n    if (parent) {                                                                                                      // 5416\n      if (parent.L === p) parent.L = q; else parent.R = q;                                                             // 5417\n    } else {                                                                                                           // 5418\n      tree._ = q;                                                                                                      // 5419\n    }                                                                                                                  // 5420\n    q.U = parent;                                                                                                      // 5421\n    p.U = q;                                                                                                           // 5422\n    p.R = q.L;                                                                                                         // 5423\n    if (p.R) p.R.U = p;                                                                                                // 5424\n    q.L = p;                                                                                                           // 5425\n  }                                                                                                                    // 5426\n  function d3_geom_voronoiRedBlackRotateRight(tree, node) {                                                            // 5427\n    var p = node, q = node.L, parent = p.U;                                                                            // 5428\n    if (parent) {                                                                                                      // 5429\n      if (parent.L === p) parent.L = q; else parent.R = q;                                                             // 5430\n    } else {                                                                                                           // 5431\n      tree._ = q;                                                                                                      // 5432\n    }                                                                                                                  // 5433\n    q.U = parent;                                                                                                      // 5434\n    p.U = q;                                                                                                           // 5435\n    p.L = q.R;                                                                                                         // 5436\n    if (p.L) p.L.U = p;                                                                                                // 5437\n    q.R = p;                                                                                                           // 5438\n  }                                                                                                                    // 5439\n  function d3_geom_voronoiRedBlackFirst(node) {                                                                        // 5440\n    while (node.L) node = node.L;                                                                                      // 5441\n    return node;                                                                                                       // 5442\n  }                                                                                                                    // 5443\n  function d3_geom_voronoi(sites, bbox) {                                                                              // 5444\n    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;                                           // 5445\n    d3_geom_voronoiEdges = [];                                                                                         // 5446\n    d3_geom_voronoiCells = new Array(sites.length);                                                                    // 5447\n    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();                                                        // 5448\n    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();                                                        // 5449\n    while (true) {                                                                                                     // 5450\n      circle = d3_geom_voronoiFirstCircle;                                                                             // 5451\n      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {                        // 5452\n        if (site.x !== x0 || site.y !== y0) {                                                                          // 5453\n          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);                                                // 5454\n          d3_geom_voronoiAddBeach(site);                                                                               // 5455\n          x0 = site.x, y0 = site.y;                                                                                    // 5456\n        }                                                                                                              // 5457\n        site = sites.pop();                                                                                            // 5458\n      } else if (circle) {                                                                                             // 5459\n        d3_geom_voronoiRemoveBeach(circle.arc);                                                                        // 5460\n      } else {                                                                                                         // 5461\n        break;                                                                                                         // 5462\n      }                                                                                                                // 5463\n    }                                                                                                                  // 5464\n    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);                                         // 5465\n    var diagram = {                                                                                                    // 5466\n      cells: d3_geom_voronoiCells,                                                                                     // 5467\n      edges: d3_geom_voronoiEdges                                                                                      // 5468\n    };                                                                                                                 // 5469\n    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;              // 5470\n    return diagram;                                                                                                    // 5471\n  }                                                                                                                    // 5472\n  function d3_geom_voronoiVertexOrder(a, b) {                                                                          // 5473\n    return b.y - a.y || b.x - a.x;                                                                                     // 5474\n  }                                                                                                                    // 5475\n  d3.geom.voronoi = function(points) {                                                                                 // 5476\n    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;                // 5477\n    if (points) return voronoi(points);                                                                                // 5478\n    function voronoi(data) {                                                                                           // 5479\n      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];\n      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {                                       // 5481\n        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {       // 5482\n          var s = e.start();                                                                                           // 5483\n          return [ s.x, s.y ];                                                                                         // 5484\n        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];\n        polygon.point = data[i];                                                                                       // 5486\n      });                                                                                                              // 5487\n      return polygons;                                                                                                 // 5488\n    }                                                                                                                  // 5489\n    function sites(data) {                                                                                             // 5490\n      return data.map(function(d, i) {                                                                                 // 5491\n        return {                                                                                                       // 5492\n          x: Math.round(fx(d, i) / ε) * ε,                                                                             // 5493\n          y: Math.round(fy(d, i) / ε) * ε,                                                                             // 5494\n          i: i                                                                                                         // 5495\n        };                                                                                                             // 5496\n      });                                                                                                              // 5497\n    }                                                                                                                  // 5498\n    voronoi.links = function(data) {                                                                                   // 5499\n      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {                                                // 5500\n        return edge.l && edge.r;                                                                                       // 5501\n      }).map(function(edge) {                                                                                          // 5502\n        return {                                                                                                       // 5503\n          source: data[edge.l.i],                                                                                      // 5504\n          target: data[edge.r.i]                                                                                       // 5505\n        };                                                                                                             // 5506\n      });                                                                                                              // 5507\n    };                                                                                                                 // 5508\n    voronoi.triangles = function(data) {                                                                               // 5509\n      var triangles = [];                                                                                              // 5510\n      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {                                                   // 5511\n        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;\n        while (++j < m) {                                                                                              // 5513\n          e0 = e1;                                                                                                     // 5514\n          s0 = s1;                                                                                                     // 5515\n          e1 = edges[j].edge;                                                                                          // 5516\n          s1 = e1.l === site ? e1.r : e1.l;                                                                            // 5517\n          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {                                 // 5518\n            triangles.push([ data[i], data[s0.i], data[s1.i] ]);                                                       // 5519\n          }                                                                                                            // 5520\n        }                                                                                                              // 5521\n      });                                                                                                              // 5522\n      return triangles;                                                                                                // 5523\n    };                                                                                                                 // 5524\n    voronoi.x = function(_) {                                                                                          // 5525\n      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;                                                 // 5526\n    };                                                                                                                 // 5527\n    voronoi.y = function(_) {                                                                                          // 5528\n      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;                                                 // 5529\n    };                                                                                                                 // 5530\n    voronoi.clipExtent = function(_) {                                                                                 // 5531\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;                      // 5532\n      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;                                                          // 5533\n      return voronoi;                                                                                                  // 5534\n    };                                                                                                                 // 5535\n    voronoi.size = function(_) {                                                                                       // 5536\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];     // 5537\n      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);                                                                 // 5538\n    };                                                                                                                 // 5539\n    return voronoi;                                                                                                    // 5540\n  };                                                                                                                   // 5541\n  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];                                                    // 5542\n  function d3_geom_voronoiTriangleArea(a, b, c) {                                                                      // 5543\n    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);                                                      // 5544\n  }                                                                                                                    // 5545\n  d3.geom.delaunay = function(vertices) {                                                                              // 5546\n    return d3.geom.voronoi().triangles(vertices);                                                                      // 5547\n  };                                                                                                                   // 5548\n  d3.geom.quadtree = function(points, x1, y1, x2, y2) {                                                                // 5549\n    var x = d3_geom_pointX, y = d3_geom_pointY, compat;                                                                // 5550\n    if (compat = arguments.length) {                                                                                   // 5551\n      x = d3_geom_quadtreeCompatX;                                                                                     // 5552\n      y = d3_geom_quadtreeCompatY;                                                                                     // 5553\n      if (compat === 3) {                                                                                              // 5554\n        y2 = y1;                                                                                                       // 5555\n        x2 = x1;                                                                                                       // 5556\n        y1 = x1 = 0;                                                                                                   // 5557\n      }                                                                                                                // 5558\n      return quadtree(points);                                                                                         // 5559\n    }                                                                                                                  // 5560\n    function quadtree(data) {                                                                                          // 5561\n      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;                                 // 5562\n      if (x1 != null) {                                                                                                // 5563\n        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;                                                                        // 5564\n      } else {                                                                                                         // 5565\n        x2_ = y2_ = -(x1_ = y1_ = Infinity);                                                                           // 5566\n        xs = [], ys = [];                                                                                              // 5567\n        n = data.length;                                                                                               // 5568\n        if (compat) for (i = 0; i < n; ++i) {                                                                          // 5569\n          d = data[i];                                                                                                 // 5570\n          if (d.x < x1_) x1_ = d.x;                                                                                    // 5571\n          if (d.y < y1_) y1_ = d.y;                                                                                    // 5572\n          if (d.x > x2_) x2_ = d.x;                                                                                    // 5573\n          if (d.y > y2_) y2_ = d.y;                                                                                    // 5574\n          xs.push(d.x);                                                                                                // 5575\n          ys.push(d.y);                                                                                                // 5576\n        } else for (i = 0; i < n; ++i) {                                                                               // 5577\n          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);                                                                // 5578\n          if (x_ < x1_) x1_ = x_;                                                                                      // 5579\n          if (y_ < y1_) y1_ = y_;                                                                                      // 5580\n          if (x_ > x2_) x2_ = x_;                                                                                      // 5581\n          if (y_ > y2_) y2_ = y_;                                                                                      // 5582\n          xs.push(x_);                                                                                                 // 5583\n          ys.push(y_);                                                                                                 // 5584\n        }                                                                                                              // 5585\n      }                                                                                                                // 5586\n      var dx = x2_ - x1_, dy = y2_ - y1_;                                                                              // 5587\n      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;                                                                // 5588\n      function insert(n, d, x, y, x1, y1, x2, y2) {                                                                    // 5589\n        if (isNaN(x) || isNaN(y)) return;                                                                              // 5590\n        if (n.leaf) {                                                                                                  // 5591\n          var nx = n.x, ny = n.y;                                                                                      // 5592\n          if (nx != null) {                                                                                            // 5593\n            if (abs(nx - x) + abs(ny - y) < .01) {                                                                     // 5594\n              insertChild(n, d, x, y, x1, y1, x2, y2);                                                                 // 5595\n            } else {                                                                                                   // 5596\n              var nPoint = n.point;                                                                                    // 5597\n              n.x = n.y = n.point = null;                                                                              // 5598\n              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);                                                          // 5599\n              insertChild(n, d, x, y, x1, y1, x2, y2);                                                                 // 5600\n            }                                                                                                          // 5601\n          } else {                                                                                                     // 5602\n            n.x = x, n.y = y, n.point = d;                                                                             // 5603\n          }                                                                                                            // 5604\n        } else {                                                                                                       // 5605\n          insertChild(n, d, x, y, x1, y1, x2, y2);                                                                     // 5606\n        }                                                                                                              // 5607\n      }                                                                                                                // 5608\n      function insertChild(n, d, x, y, x1, y1, x2, y2) {                                                               // 5609\n        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;        // 5610\n        n.leaf = false;                                                                                                // 5611\n        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());                                                       // 5612\n        if (right) x1 = xm; else x2 = xm;                                                                              // 5613\n        if (below) y1 = ym; else y2 = ym;                                                                              // 5614\n        insert(n, d, x, y, x1, y1, x2, y2);                                                                            // 5615\n      }                                                                                                                // 5616\n      var root = d3_geom_quadtreeNode();                                                                               // 5617\n      root.add = function(d) {                                                                                         // 5618\n        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);                                                   // 5619\n      };                                                                                                               // 5620\n      root.visit = function(f) {                                                                                       // 5621\n        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);                                                            // 5622\n      };                                                                                                               // 5623\n      root.find = function(point) {                                                                                    // 5624\n        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);                                     // 5625\n      };                                                                                                               // 5626\n      i = -1;                                                                                                          // 5627\n      if (x1 == null) {                                                                                                // 5628\n        while (++i < n) {                                                                                              // 5629\n          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);                                                     // 5630\n        }                                                                                                              // 5631\n        --i;                                                                                                           // 5632\n      } else data.forEach(root.add);                                                                                   // 5633\n      xs = ys = data = d = null;                                                                                       // 5634\n      return root;                                                                                                     // 5635\n    }                                                                                                                  // 5636\n    quadtree.x = function(_) {                                                                                         // 5637\n      return arguments.length ? (x = _, quadtree) : x;                                                                 // 5638\n    };                                                                                                                 // 5639\n    quadtree.y = function(_) {                                                                                         // 5640\n      return arguments.length ? (y = _, quadtree) : y;                                                                 // 5641\n    };                                                                                                                 // 5642\n    quadtree.extent = function(_) {                                                                                    // 5643\n      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];                                    // 5644\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0],                       // 5645\n      y2 = +_[1][1];                                                                                                   // 5646\n      return quadtree;                                                                                                 // 5647\n    };                                                                                                                 // 5648\n    quadtree.size = function(_) {                                                                                      // 5649\n      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];                                          // 5650\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];                               // 5651\n      return quadtree;                                                                                                 // 5652\n    };                                                                                                                 // 5653\n    return quadtree;                                                                                                   // 5654\n  };                                                                                                                   // 5655\n  function d3_geom_quadtreeCompatX(d) {                                                                                // 5656\n    return d.x;                                                                                                        // 5657\n  }                                                                                                                    // 5658\n  function d3_geom_quadtreeCompatY(d) {                                                                                // 5659\n    return d.y;                                                                                                        // 5660\n  }                                                                                                                    // 5661\n  function d3_geom_quadtreeNode() {                                                                                    // 5662\n    return {                                                                                                           // 5663\n      leaf: true,                                                                                                      // 5664\n      nodes: [],                                                                                                       // 5665\n      point: null,                                                                                                     // 5666\n      x: null,                                                                                                         // 5667\n      y: null                                                                                                          // 5668\n    };                                                                                                                 // 5669\n  }                                                                                                                    // 5670\n  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {                                                            // 5671\n    if (!f(node, x1, y1, x2, y2)) {                                                                                    // 5672\n      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;                                             // 5673\n      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);                                          // 5674\n      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);                                          // 5675\n      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);                                          // 5676\n      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);                                          // 5677\n    }                                                                                                                  // 5678\n  }                                                                                                                    // 5679\n  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {                                                          // 5680\n    var minDistance2 = Infinity, closestPoint;                                                                         // 5681\n    (function find(node, x1, y1, x2, y2) {                                                                             // 5682\n      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;                                                            // 5683\n      if (point = node.point) {                                                                                        // 5684\n        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;                                    // 5685\n        if (distance2 < minDistance2) {                                                                                // 5686\n          var distance = Math.sqrt(minDistance2 = distance2);                                                          // 5687\n          x0 = x - distance, y0 = y - distance;                                                                        // 5688\n          x3 = x + distance, y3 = y + distance;                                                                        // 5689\n          closestPoint = point;                                                                                        // 5690\n        }                                                                                                              // 5691\n      }                                                                                                                // 5692\n      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;           // 5693\n      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {                                                        // 5694\n        if (node = children[i & 3]) switch (i & 3) {                                                                   // 5695\n         case 0:                                                                                                       // 5696\n          find(node, x1, y1, xm, ym);                                                                                  // 5697\n          break;                                                                                                       // 5698\n                                                                                                                       // 5699\n         case 1:                                                                                                       // 5700\n          find(node, xm, y1, x2, ym);                                                                                  // 5701\n          break;                                                                                                       // 5702\n                                                                                                                       // 5703\n         case 2:                                                                                                       // 5704\n          find(node, x1, ym, xm, y2);                                                                                  // 5705\n          break;                                                                                                       // 5706\n                                                                                                                       // 5707\n         case 3:                                                                                                       // 5708\n          find(node, xm, ym, x2, y2);                                                                                  // 5709\n          break;                                                                                                       // 5710\n        }                                                                                                              // 5711\n      }                                                                                                                // 5712\n    })(root, x0, y0, x3, y3);                                                                                          // 5713\n    return closestPoint;                                                                                               // 5714\n  }                                                                                                                    // 5715\n  d3.interpolateRgb = d3_interpolateRgb;                                                                               // 5716\n  function d3_interpolateRgb(a, b) {                                                                                   // 5717\n    a = d3.rgb(a);                                                                                                     // 5718\n    b = d3.rgb(b);                                                                                                     // 5719\n    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;                                     // 5720\n    return function(t) {                                                                                               // 5721\n      return \"#\" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));\n    };                                                                                                                 // 5723\n  }                                                                                                                    // 5724\n  d3.interpolateObject = d3_interpolateObject;                                                                         // 5725\n  function d3_interpolateObject(a, b) {                                                                                // 5726\n    var i = {}, c = {}, k;                                                                                             // 5727\n    for (k in a) {                                                                                                     // 5728\n      if (k in b) {                                                                                                    // 5729\n        i[k] = d3_interpolate(a[k], b[k]);                                                                             // 5730\n      } else {                                                                                                         // 5731\n        c[k] = a[k];                                                                                                   // 5732\n      }                                                                                                                // 5733\n    }                                                                                                                  // 5734\n    for (k in b) {                                                                                                     // 5735\n      if (!(k in a)) {                                                                                                 // 5736\n        c[k] = b[k];                                                                                                   // 5737\n      }                                                                                                                // 5738\n    }                                                                                                                  // 5739\n    return function(t) {                                                                                               // 5740\n      for (k in i) c[k] = i[k](t);                                                                                     // 5741\n      return c;                                                                                                        // 5742\n    };                                                                                                                 // 5743\n  }                                                                                                                    // 5744\n  d3.interpolateNumber = d3_interpolateNumber;                                                                         // 5745\n  function d3_interpolateNumber(a, b) {                                                                                // 5746\n    a = +a, b = +b;                                                                                                    // 5747\n    return function(t) {                                                                                               // 5748\n      return a * (1 - t) + b * t;                                                                                      // 5749\n    };                                                                                                                 // 5750\n  }                                                                                                                    // 5751\n  d3.interpolateString = d3_interpolateString;                                                                         // 5752\n  function d3_interpolateString(a, b) {                                                                                // 5753\n    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];\n    a = a + \"\", b = b + \"\";                                                                                            // 5755\n    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {                           // 5756\n      if ((bs = bm.index) > bi) {                                                                                      // 5757\n        bs = b.slice(bi, bs);                                                                                          // 5758\n        if (s[i]) s[i] += bs; else s[++i] = bs;                                                                        // 5759\n      }                                                                                                                // 5760\n      if ((am = am[0]) === (bm = bm[0])) {                                                                             // 5761\n        if (s[i]) s[i] += bm; else s[++i] = bm;                                                                        // 5762\n      } else {                                                                                                         // 5763\n        s[++i] = null;                                                                                                 // 5764\n        q.push({                                                                                                       // 5765\n          i: i,                                                                                                        // 5766\n          x: d3_interpolateNumber(am, bm)                                                                              // 5767\n        });                                                                                                            // 5768\n      }                                                                                                                // 5769\n      bi = d3_interpolate_numberB.lastIndex;                                                                           // 5770\n    }                                                                                                                  // 5771\n    if (bi < b.length) {                                                                                               // 5772\n      bs = b.slice(bi);                                                                                                // 5773\n      if (s[i]) s[i] += bs; else s[++i] = bs;                                                                          // 5774\n    }                                                                                                                  // 5775\n    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {                                                            // 5776\n      return b(t) + \"\";                                                                                                // 5777\n    }) : function() {                                                                                                  // 5778\n      return b;                                                                                                        // 5779\n    } : (b = q.length, function(t) {                                                                                   // 5780\n      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);                                                         // 5781\n      return s.join(\"\");                                                                                               // 5782\n    });                                                                                                                // 5783\n  }                                                                                                                    // 5784\n  var d3_interpolate_numberA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, \"g\");\n  d3.interpolate = d3_interpolate;                                                                                     // 5786\n  function d3_interpolate(a, b) {                                                                                      // 5787\n    var i = d3.interpolators.length, f;                                                                                // 5788\n    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;                                                             // 5789\n    return f;                                                                                                          // 5790\n  }                                                                                                                    // 5791\n  d3.interpolators = [ function(a, b) {                                                                                // 5792\n    var t = typeof b;                                                                                                  // 5793\n    return (t === \"string\" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\\(|hsl\\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === \"object\" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);\n  } ];                                                                                                                 // 5795\n  d3.interpolateArray = d3_interpolateArray;                                                                           // 5796\n  function d3_interpolateArray(a, b) {                                                                                 // 5797\n    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;                            // 5798\n    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));                                                       // 5799\n    for (;i < na; ++i) c[i] = a[i];                                                                                    // 5800\n    for (;i < nb; ++i) c[i] = b[i];                                                                                    // 5801\n    return function(t) {                                                                                               // 5802\n      for (i = 0; i < n0; ++i) c[i] = x[i](t);                                                                         // 5803\n      return c;                                                                                                        // 5804\n    };                                                                                                                 // 5805\n  }                                                                                                                    // 5806\n  var d3_ease_default = function() {                                                                                   // 5807\n    return d3_identity;                                                                                                // 5808\n  };                                                                                                                   // 5809\n  var d3_ease = d3.map({                                                                                               // 5810\n    linear: d3_ease_default,                                                                                           // 5811\n    poly: d3_ease_poly,                                                                                                // 5812\n    quad: function() {                                                                                                 // 5813\n      return d3_ease_quad;                                                                                             // 5814\n    },                                                                                                                 // 5815\n    cubic: function() {                                                                                                // 5816\n      return d3_ease_cubic;                                                                                            // 5817\n    },                                                                                                                 // 5818\n    sin: function() {                                                                                                  // 5819\n      return d3_ease_sin;                                                                                              // 5820\n    },                                                                                                                 // 5821\n    exp: function() {                                                                                                  // 5822\n      return d3_ease_exp;                                                                                              // 5823\n    },                                                                                                                 // 5824\n    circle: function() {                                                                                               // 5825\n      return d3_ease_circle;                                                                                           // 5826\n    },                                                                                                                 // 5827\n    elastic: d3_ease_elastic,                                                                                          // 5828\n    back: d3_ease_back,                                                                                                // 5829\n    bounce: function() {                                                                                               // 5830\n      return d3_ease_bounce;                                                                                           // 5831\n    }                                                                                                                  // 5832\n  });                                                                                                                  // 5833\n  var d3_ease_mode = d3.map({                                                                                          // 5834\n    \"in\": d3_identity,                                                                                                 // 5835\n    out: d3_ease_reverse,                                                                                              // 5836\n    \"in-out\": d3_ease_reflect,                                                                                         // 5837\n    \"out-in\": function(f) {                                                                                            // 5838\n      return d3_ease_reflect(d3_ease_reverse(f));                                                                      // 5839\n    }                                                                                                                  // 5840\n  });                                                                                                                  // 5841\n  d3.ease = function(name) {                                                                                           // 5842\n    var i = name.indexOf(\"-\"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : \"in\";            // 5843\n    t = d3_ease.get(t) || d3_ease_default;                                                                             // 5844\n    m = d3_ease_mode.get(m) || d3_identity;                                                                            // 5845\n    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));                                          // 5846\n  };                                                                                                                   // 5847\n  function d3_ease_clamp(f) {                                                                                          // 5848\n    return function(t) {                                                                                               // 5849\n      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);                                                                           // 5850\n    };                                                                                                                 // 5851\n  }                                                                                                                    // 5852\n  function d3_ease_reverse(f) {                                                                                        // 5853\n    return function(t) {                                                                                               // 5854\n      return 1 - f(1 - t);                                                                                             // 5855\n    };                                                                                                                 // 5856\n  }                                                                                                                    // 5857\n  function d3_ease_reflect(f) {                                                                                        // 5858\n    return function(t) {                                                                                               // 5859\n      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));                                                              // 5860\n    };                                                                                                                 // 5861\n  }                                                                                                                    // 5862\n  function d3_ease_quad(t) {                                                                                           // 5863\n    return t * t;                                                                                                      // 5864\n  }                                                                                                                    // 5865\n  function d3_ease_cubic(t) {                                                                                          // 5866\n    return t * t * t;                                                                                                  // 5867\n  }                                                                                                                    // 5868\n  function d3_ease_cubicInOut(t) {                                                                                     // 5869\n    if (t <= 0) return 0;                                                                                              // 5870\n    if (t >= 1) return 1;                                                                                              // 5871\n    var t2 = t * t, t3 = t2 * t;                                                                                       // 5872\n    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);                                                                // 5873\n  }                                                                                                                    // 5874\n  function d3_ease_poly(e) {                                                                                           // 5875\n    return function(t) {                                                                                               // 5876\n      return Math.pow(t, e);                                                                                           // 5877\n    };                                                                                                                 // 5878\n  }                                                                                                                    // 5879\n  function d3_ease_sin(t) {                                                                                            // 5880\n    return 1 - Math.cos(t * halfπ);                                                                                    // 5881\n  }                                                                                                                    // 5882\n  function d3_ease_exp(t) {                                                                                            // 5883\n    return Math.pow(2, 10 * (t - 1));                                                                                  // 5884\n  }                                                                                                                    // 5885\n  function d3_ease_circle(t) {                                                                                         // 5886\n    return 1 - Math.sqrt(1 - t * t);                                                                                   // 5887\n  }                                                                                                                    // 5888\n  function d3_ease_elastic(a, p) {                                                                                     // 5889\n    var s;                                                                                                             // 5890\n    if (arguments.length < 2) p = .45;                                                                                 // 5891\n    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;                                         // 5892\n    return function(t) {                                                                                               // 5893\n      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);                                                 // 5894\n    };                                                                                                                 // 5895\n  }                                                                                                                    // 5896\n  function d3_ease_back(s) {                                                                                           // 5897\n    if (!s) s = 1.70158;                                                                                               // 5898\n    return function(t) {                                                                                               // 5899\n      return t * t * ((s + 1) * t - s);                                                                                // 5900\n    };                                                                                                                 // 5901\n  }                                                                                                                    // 5902\n  function d3_ease_bounce(t) {                                                                                         // 5903\n    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n  }                                                                                                                    // 5905\n  d3.interpolateHcl = d3_interpolateHcl;                                                                               // 5906\n  function d3_interpolateHcl(a, b) {                                                                                   // 5907\n    a = d3.hcl(a);                                                                                                     // 5908\n    b = d3.hcl(b);                                                                                                     // 5909\n    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;                                     // 5910\n    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;                                                                  // 5911\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;     // 5912\n    return function(t) {                                                                                               // 5913\n      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + \"\";                                                   // 5914\n    };                                                                                                                 // 5915\n  }                                                                                                                    // 5916\n  d3.interpolateHsl = d3_interpolateHsl;                                                                               // 5917\n  function d3_interpolateHsl(a, b) {                                                                                   // 5918\n    a = d3.hsl(a);                                                                                                     // 5919\n    b = d3.hsl(b);                                                                                                     // 5920\n    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;                                     // 5921\n    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;                                                                  // 5922\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;     // 5923\n    return function(t) {                                                                                               // 5924\n      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + \"\";                                                   // 5925\n    };                                                                                                                 // 5926\n  }                                                                                                                    // 5927\n  d3.interpolateLab = d3_interpolateLab;                                                                               // 5928\n  function d3_interpolateLab(a, b) {                                                                                   // 5929\n    a = d3.lab(a);                                                                                                     // 5930\n    b = d3.lab(b);                                                                                                     // 5931\n    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;                                     // 5932\n    return function(t) {                                                                                               // 5933\n      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + \"\";                                                   // 5934\n    };                                                                                                                 // 5935\n  }                                                                                                                    // 5936\n  d3.interpolateRound = d3_interpolateRound;                                                                           // 5937\n  function d3_interpolateRound(a, b) {                                                                                 // 5938\n    b -= a;                                                                                                            // 5939\n    return function(t) {                                                                                               // 5940\n      return Math.round(a + b * t);                                                                                    // 5941\n    };                                                                                                                 // 5942\n  }                                                                                                                    // 5943\n  d3.transform = function(string) {                                                                                    // 5944\n    var g = d3_document.createElementNS(d3.ns.prefix.svg, \"g\");                                                        // 5945\n    return (d3.transform = function(string) {                                                                          // 5946\n      if (string != null) {                                                                                            // 5947\n        g.setAttribute(\"transform\", string);                                                                           // 5948\n        var t = g.transform.baseVal.consolidate();                                                                     // 5949\n      }                                                                                                                // 5950\n      return new d3_transform(t ? t.matrix : d3_transformIdentity);                                                    // 5951\n    })(string);                                                                                                        // 5952\n  };                                                                                                                   // 5953\n  function d3_transform(m) {                                                                                           // 5954\n    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;\n    if (r0[0] * r1[1] < r1[0] * r0[1]) {                                                                               // 5956\n      r0[0] *= -1;                                                                                                     // 5957\n      r0[1] *= -1;                                                                                                     // 5958\n      kx *= -1;                                                                                                        // 5959\n      kz *= -1;                                                                                                        // 5960\n    }                                                                                                                  // 5961\n    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;                            // 5962\n    this.translate = [ m.e, m.f ];                                                                                     // 5963\n    this.scale = [ kx, ky ];                                                                                           // 5964\n    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;                                                              // 5965\n  }                                                                                                                    // 5966\n  d3_transform.prototype.toString = function() {                                                                       // 5967\n    return \"translate(\" + this.translate + \")rotate(\" + this.rotate + \")skewX(\" + this.skew + \")scale(\" + this.scale + \")\";\n  };                                                                                                                   // 5969\n  function d3_transformDot(a, b) {                                                                                     // 5970\n    return a[0] * b[0] + a[1] * b[1];                                                                                  // 5971\n  }                                                                                                                    // 5972\n  function d3_transformNormalize(a) {                                                                                  // 5973\n    var k = Math.sqrt(d3_transformDot(a, a));                                                                          // 5974\n    if (k) {                                                                                                           // 5975\n      a[0] /= k;                                                                                                       // 5976\n      a[1] /= k;                                                                                                       // 5977\n    }                                                                                                                  // 5978\n    return k;                                                                                                          // 5979\n  }                                                                                                                    // 5980\n  function d3_transformCombine(a, b, k) {                                                                              // 5981\n    a[0] += k * b[0];                                                                                                  // 5982\n    a[1] += k * b[1];                                                                                                  // 5983\n    return a;                                                                                                          // 5984\n  }                                                                                                                    // 5985\n  var d3_transformIdentity = {                                                                                         // 5986\n    a: 1,                                                                                                              // 5987\n    b: 0,                                                                                                              // 5988\n    c: 0,                                                                                                              // 5989\n    d: 1,                                                                                                              // 5990\n    e: 0,                                                                                                              // 5991\n    f: 0                                                                                                               // 5992\n  };                                                                                                                   // 5993\n  d3.interpolateTransform = d3_interpolateTransform;                                                                   // 5994\n  function d3_interpolateTransformPop(s) {                                                                             // 5995\n    return s.length ? s.pop() + \",\" : \"\";                                                                              // 5996\n  }                                                                                                                    // 5997\n  function d3_interpolateTranslate(ta, tb, s, q) {                                                                     // 5998\n    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {                                                                          // 5999\n      var i = s.push(\"translate(\", null, \",\", null, \")\");                                                              // 6000\n      q.push({                                                                                                         // 6001\n        i: i - 4,                                                                                                      // 6002\n        x: d3_interpolateNumber(ta[0], tb[0])                                                                          // 6003\n      }, {                                                                                                             // 6004\n        i: i - 2,                                                                                                      // 6005\n        x: d3_interpolateNumber(ta[1], tb[1])                                                                          // 6006\n      });                                                                                                              // 6007\n    } else if (tb[0] || tb[1]) {                                                                                       // 6008\n      s.push(\"translate(\" + tb + \")\");                                                                                 // 6009\n    }                                                                                                                  // 6010\n  }                                                                                                                    // 6011\n  function d3_interpolateRotate(ra, rb, s, q) {                                                                        // 6012\n    if (ra !== rb) {                                                                                                   // 6013\n      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;                                                 // 6014\n      q.push({                                                                                                         // 6015\n        i: s.push(d3_interpolateTransformPop(s) + \"rotate(\", null, \")\") - 2,                                           // 6016\n        x: d3_interpolateNumber(ra, rb)                                                                                // 6017\n      });                                                                                                              // 6018\n    } else if (rb) {                                                                                                   // 6019\n      s.push(d3_interpolateTransformPop(s) + \"rotate(\" + rb + \")\");                                                    // 6020\n    }                                                                                                                  // 6021\n  }                                                                                                                    // 6022\n  function d3_interpolateSkew(wa, wb, s, q) {                                                                          // 6023\n    if (wa !== wb) {                                                                                                   // 6024\n      q.push({                                                                                                         // 6025\n        i: s.push(d3_interpolateTransformPop(s) + \"skewX(\", null, \")\") - 2,                                            // 6026\n        x: d3_interpolateNumber(wa, wb)                                                                                // 6027\n      });                                                                                                              // 6028\n    } else if (wb) {                                                                                                   // 6029\n      s.push(d3_interpolateTransformPop(s) + \"skewX(\" + wb + \")\");                                                     // 6030\n    }                                                                                                                  // 6031\n  }                                                                                                                    // 6032\n  function d3_interpolateScale(ka, kb, s, q) {                                                                         // 6033\n    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {                                                                          // 6034\n      var i = s.push(d3_interpolateTransformPop(s) + \"scale(\", null, \",\", null, \")\");                                  // 6035\n      q.push({                                                                                                         // 6036\n        i: i - 4,                                                                                                      // 6037\n        x: d3_interpolateNumber(ka[0], kb[0])                                                                          // 6038\n      }, {                                                                                                             // 6039\n        i: i - 2,                                                                                                      // 6040\n        x: d3_interpolateNumber(ka[1], kb[1])                                                                          // 6041\n      });                                                                                                              // 6042\n    } else if (kb[0] !== 1 || kb[1] !== 1) {                                                                           // 6043\n      s.push(d3_interpolateTransformPop(s) + \"scale(\" + kb + \")\");                                                     // 6044\n    }                                                                                                                  // 6045\n  }                                                                                                                    // 6046\n  function d3_interpolateTransform(a, b) {                                                                             // 6047\n    var s = [], q = [];                                                                                                // 6048\n    a = d3.transform(a), b = d3.transform(b);                                                                          // 6049\n    d3_interpolateTranslate(a.translate, b.translate, s, q);                                                           // 6050\n    d3_interpolateRotate(a.rotate, b.rotate, s, q);                                                                    // 6051\n    d3_interpolateSkew(a.skew, b.skew, s, q);                                                                          // 6052\n    d3_interpolateScale(a.scale, b.scale, s, q);                                                                       // 6053\n    a = b = null;                                                                                                      // 6054\n    return function(t) {                                                                                               // 6055\n      var i = -1, n = q.length, o;                                                                                     // 6056\n      while (++i < n) s[(o = q[i]).i] = o.x(t);                                                                        // 6057\n      return s.join(\"\");                                                                                               // 6058\n    };                                                                                                                 // 6059\n  }                                                                                                                    // 6060\n  function d3_uninterpolateNumber(a, b) {                                                                              // 6061\n    b = (b -= a = +a) || 1 / b;                                                                                        // 6062\n    return function(x) {                                                                                               // 6063\n      return (x - a) / b;                                                                                              // 6064\n    };                                                                                                                 // 6065\n  }                                                                                                                    // 6066\n  function d3_uninterpolateClamp(a, b) {                                                                               // 6067\n    b = (b -= a = +a) || 1 / b;                                                                                        // 6068\n    return function(x) {                                                                                               // 6069\n      return Math.max(0, Math.min(1, (x - a) / b));                                                                    // 6070\n    };                                                                                                                 // 6071\n  }                                                                                                                    // 6072\n  d3.layout = {};                                                                                                      // 6073\n  d3.layout.bundle = function() {                                                                                      // 6074\n    return function(links) {                                                                                           // 6075\n      var paths = [], i = -1, n = links.length;                                                                        // 6076\n      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));                                                      // 6077\n      return paths;                                                                                                    // 6078\n    };                                                                                                                 // 6079\n  };                                                                                                                   // 6080\n  function d3_layout_bundlePath(link) {                                                                                // 6081\n    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];\n    while (start !== lca) {                                                                                            // 6083\n      start = start.parent;                                                                                            // 6084\n      points.push(start);                                                                                              // 6085\n    }                                                                                                                  // 6086\n    var k = points.length;                                                                                             // 6087\n    while (end !== lca) {                                                                                              // 6088\n      points.splice(k, 0, end);                                                                                        // 6089\n      end = end.parent;                                                                                                // 6090\n    }                                                                                                                  // 6091\n    return points;                                                                                                     // 6092\n  }                                                                                                                    // 6093\n  function d3_layout_bundleAncestors(node) {                                                                           // 6094\n    var ancestors = [], parent = node.parent;                                                                          // 6095\n    while (parent != null) {                                                                                           // 6096\n      ancestors.push(node);                                                                                            // 6097\n      node = parent;                                                                                                   // 6098\n      parent = parent.parent;                                                                                          // 6099\n    }                                                                                                                  // 6100\n    ancestors.push(node);                                                                                              // 6101\n    return ancestors;                                                                                                  // 6102\n  }                                                                                                                    // 6103\n  function d3_layout_bundleLeastCommonAncestor(a, b) {                                                                 // 6104\n    if (a === b) return a;                                                                                             // 6105\n    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;\n    while (aNode === bNode) {                                                                                          // 6107\n      sharedNode = aNode;                                                                                              // 6108\n      aNode = aNodes.pop();                                                                                            // 6109\n      bNode = bNodes.pop();                                                                                            // 6110\n    }                                                                                                                  // 6111\n    return sharedNode;                                                                                                 // 6112\n  }                                                                                                                    // 6113\n  d3.layout.chord = function() {                                                                                       // 6114\n    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;                     // 6115\n    function relayout() {                                                                                              // 6116\n      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;                // 6117\n      chords = [];                                                                                                     // 6118\n      groups = [];                                                                                                     // 6119\n      k = 0, i = -1;                                                                                                   // 6120\n      while (++i < n) {                                                                                                // 6121\n        x = 0, j = -1;                                                                                                 // 6122\n        while (++j < n) {                                                                                              // 6123\n          x += matrix[i][j];                                                                                           // 6124\n        }                                                                                                              // 6125\n        groupSums.push(x);                                                                                             // 6126\n        subgroupIndex.push(d3.range(n));                                                                               // 6127\n        k += x;                                                                                                        // 6128\n      }                                                                                                                // 6129\n      if (sortGroups) {                                                                                                // 6130\n        groupIndex.sort(function(a, b) {                                                                               // 6131\n          return sortGroups(groupSums[a], groupSums[b]);                                                               // 6132\n        });                                                                                                            // 6133\n      }                                                                                                                // 6134\n      if (sortSubgroups) {                                                                                             // 6135\n        subgroupIndex.forEach(function(d, i) {                                                                         // 6136\n          d.sort(function(a, b) {                                                                                      // 6137\n            return sortSubgroups(matrix[i][a], matrix[i][b]);                                                          // 6138\n          });                                                                                                          // 6139\n        });                                                                                                            // 6140\n      }                                                                                                                // 6141\n      k = (τ - padding * n) / k;                                                                                       // 6142\n      x = 0, i = -1;                                                                                                   // 6143\n      while (++i < n) {                                                                                                // 6144\n        x0 = x, j = -1;                                                                                                // 6145\n        while (++j < n) {                                                                                              // 6146\n          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;              // 6147\n          subgroups[di + \"-\" + dj] = {                                                                                 // 6148\n            index: di,                                                                                                 // 6149\n            subindex: dj,                                                                                              // 6150\n            startAngle: a0,                                                                                            // 6151\n            endAngle: a1,                                                                                              // 6152\n            value: v                                                                                                   // 6153\n          };                                                                                                           // 6154\n        }                                                                                                              // 6155\n        groups[di] = {                                                                                                 // 6156\n          index: di,                                                                                                   // 6157\n          startAngle: x0,                                                                                              // 6158\n          endAngle: x,                                                                                                 // 6159\n          value: (x - x0) / k                                                                                          // 6160\n        };                                                                                                             // 6161\n        x += padding;                                                                                                  // 6162\n      }                                                                                                                // 6163\n      i = -1;                                                                                                          // 6164\n      while (++i < n) {                                                                                                // 6165\n        j = i - 1;                                                                                                     // 6166\n        while (++j < n) {                                                                                              // 6167\n          var source = subgroups[i + \"-\" + j], target = subgroups[j + \"-\" + i];                                        // 6168\n          if (source.value || target.value) {                                                                          // 6169\n            chords.push(source.value < target.value ? {                                                                // 6170\n              source: target,                                                                                          // 6171\n              target: source                                                                                           // 6172\n            } : {                                                                                                      // 6173\n              source: source,                                                                                          // 6174\n              target: target                                                                                           // 6175\n            });                                                                                                        // 6176\n          }                                                                                                            // 6177\n        }                                                                                                              // 6178\n      }                                                                                                                // 6179\n      if (sortChords) resort();                                                                                        // 6180\n    }                                                                                                                  // 6181\n    function resort() {                                                                                                // 6182\n      chords.sort(function(a, b) {                                                                                     // 6183\n        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);               // 6184\n      });                                                                                                              // 6185\n    }                                                                                                                  // 6186\n    chord.matrix = function(x) {                                                                                       // 6187\n      if (!arguments.length) return matrix;                                                                            // 6188\n      n = (matrix = x) && matrix.length;                                                                               // 6189\n      chords = groups = null;                                                                                          // 6190\n      return chord;                                                                                                    // 6191\n    };                                                                                                                 // 6192\n    chord.padding = function(x) {                                                                                      // 6193\n      if (!arguments.length) return padding;                                                                           // 6194\n      padding = x;                                                                                                     // 6195\n      chords = groups = null;                                                                                          // 6196\n      return chord;                                                                                                    // 6197\n    };                                                                                                                 // 6198\n    chord.sortGroups = function(x) {                                                                                   // 6199\n      if (!arguments.length) return sortGroups;                                                                        // 6200\n      sortGroups = x;                                                                                                  // 6201\n      chords = groups = null;                                                                                          // 6202\n      return chord;                                                                                                    // 6203\n    };                                                                                                                 // 6204\n    chord.sortSubgroups = function(x) {                                                                                // 6205\n      if (!arguments.length) return sortSubgroups;                                                                     // 6206\n      sortSubgroups = x;                                                                                               // 6207\n      chords = null;                                                                                                   // 6208\n      return chord;                                                                                                    // 6209\n    };                                                                                                                 // 6210\n    chord.sortChords = function(x) {                                                                                   // 6211\n      if (!arguments.length) return sortChords;                                                                        // 6212\n      sortChords = x;                                                                                                  // 6213\n      if (chords) resort();                                                                                            // 6214\n      return chord;                                                                                                    // 6215\n    };                                                                                                                 // 6216\n    chord.chords = function() {                                                                                        // 6217\n      if (!chords) relayout();                                                                                         // 6218\n      return chords;                                                                                                   // 6219\n    };                                                                                                                 // 6220\n    chord.groups = function() {                                                                                        // 6221\n      if (!groups) relayout();                                                                                         // 6222\n      return groups;                                                                                                   // 6223\n    };                                                                                                                 // 6224\n    return chord;                                                                                                      // 6225\n  };                                                                                                                   // 6226\n  d3.layout.force = function() {                                                                                       // 6227\n    var force = {}, event = d3.dispatch(\"start\", \"tick\", \"end\"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;\n    function repulse(node) {                                                                                           // 6229\n      return function(quad, x1, _, x2) {                                                                               // 6230\n        if (quad.point !== node) {                                                                                     // 6231\n          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;                      // 6232\n          if (dw * dw / theta2 < dn) {                                                                                 // 6233\n            if (dn < chargeDistance2) {                                                                                // 6234\n              var k = quad.charge / dn;                                                                                // 6235\n              node.px -= dx * k;                                                                                       // 6236\n              node.py -= dy * k;                                                                                       // 6237\n            }                                                                                                          // 6238\n            return true;                                                                                               // 6239\n          }                                                                                                            // 6240\n          if (quad.point && dn && dn < chargeDistance2) {                                                              // 6241\n            var k = quad.pointCharge / dn;                                                                             // 6242\n            node.px -= dx * k;                                                                                         // 6243\n            node.py -= dy * k;                                                                                         // 6244\n          }                                                                                                            // 6245\n        }                                                                                                              // 6246\n        return !quad.charge;                                                                                           // 6247\n      };                                                                                                               // 6248\n    }                                                                                                                  // 6249\n    force.tick = function() {                                                                                          // 6250\n      if ((alpha *= .99) < .005) {                                                                                     // 6251\n        timer = null;                                                                                                  // 6252\n        event.end({                                                                                                    // 6253\n          type: \"end\",                                                                                                 // 6254\n          alpha: alpha = 0                                                                                             // 6255\n        });                                                                                                            // 6256\n        return true;                                                                                                   // 6257\n      }                                                                                                                // 6258\n      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;                                               // 6259\n      for (i = 0; i < m; ++i) {                                                                                        // 6260\n        o = links[i];                                                                                                  // 6261\n        s = o.source;                                                                                                  // 6262\n        t = o.target;                                                                                                  // 6263\n        x = t.x - s.x;                                                                                                 // 6264\n        y = t.y - s.y;                                                                                                 // 6265\n        if (l = x * x + y * y) {                                                                                       // 6266\n          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;                                          // 6267\n          x *= l;                                                                                                      // 6268\n          y *= l;                                                                                                      // 6269\n          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);                                // 6270\n          t.y -= y * k;                                                                                                // 6271\n          s.x += x * (k = 1 - k);                                                                                      // 6272\n          s.y += y * k;                                                                                                // 6273\n        }                                                                                                              // 6274\n      }                                                                                                                // 6275\n      if (k = alpha * gravity) {                                                                                       // 6276\n        x = size[0] / 2;                                                                                               // 6277\n        y = size[1] / 2;                                                                                               // 6278\n        i = -1;                                                                                                        // 6279\n        if (k) while (++i < n) {                                                                                       // 6280\n          o = nodes[i];                                                                                                // 6281\n          o.x += (x - o.x) * k;                                                                                        // 6282\n          o.y += (y - o.y) * k;                                                                                        // 6283\n        }                                                                                                              // 6284\n      }                                                                                                                // 6285\n      if (charge) {                                                                                                    // 6286\n        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);                                        // 6287\n        i = -1;                                                                                                        // 6288\n        while (++i < n) {                                                                                              // 6289\n          if (!(o = nodes[i]).fixed) {                                                                                 // 6290\n            q.visit(repulse(o));                                                                                       // 6291\n          }                                                                                                            // 6292\n        }                                                                                                              // 6293\n      }                                                                                                                // 6294\n      i = -1;                                                                                                          // 6295\n      while (++i < n) {                                                                                                // 6296\n        o = nodes[i];                                                                                                  // 6297\n        if (o.fixed) {                                                                                                 // 6298\n          o.x = o.px;                                                                                                  // 6299\n          o.y = o.py;                                                                                                  // 6300\n        } else {                                                                                                       // 6301\n          o.x -= (o.px - (o.px = o.x)) * friction;                                                                     // 6302\n          o.y -= (o.py - (o.py = o.y)) * friction;                                                                     // 6303\n        }                                                                                                              // 6304\n      }                                                                                                                // 6305\n      event.tick({                                                                                                     // 6306\n        type: \"tick\",                                                                                                  // 6307\n        alpha: alpha                                                                                                   // 6308\n      });                                                                                                              // 6309\n    };                                                                                                                 // 6310\n    force.nodes = function(x) {                                                                                        // 6311\n      if (!arguments.length) return nodes;                                                                             // 6312\n      nodes = x;                                                                                                       // 6313\n      return force;                                                                                                    // 6314\n    };                                                                                                                 // 6315\n    force.links = function(x) {                                                                                        // 6316\n      if (!arguments.length) return links;                                                                             // 6317\n      links = x;                                                                                                       // 6318\n      return force;                                                                                                    // 6319\n    };                                                                                                                 // 6320\n    force.size = function(x) {                                                                                         // 6321\n      if (!arguments.length) return size;                                                                              // 6322\n      size = x;                                                                                                        // 6323\n      return force;                                                                                                    // 6324\n    };                                                                                                                 // 6325\n    force.linkDistance = function(x) {                                                                                 // 6326\n      if (!arguments.length) return linkDistance;                                                                      // 6327\n      linkDistance = typeof x === \"function\" ? x : +x;                                                                 // 6328\n      return force;                                                                                                    // 6329\n    };                                                                                                                 // 6330\n    force.distance = force.linkDistance;                                                                               // 6331\n    force.linkStrength = function(x) {                                                                                 // 6332\n      if (!arguments.length) return linkStrength;                                                                      // 6333\n      linkStrength = typeof x === \"function\" ? x : +x;                                                                 // 6334\n      return force;                                                                                                    // 6335\n    };                                                                                                                 // 6336\n    force.friction = function(x) {                                                                                     // 6337\n      if (!arguments.length) return friction;                                                                          // 6338\n      friction = +x;                                                                                                   // 6339\n      return force;                                                                                                    // 6340\n    };                                                                                                                 // 6341\n    force.charge = function(x) {                                                                                       // 6342\n      if (!arguments.length) return charge;                                                                            // 6343\n      charge = typeof x === \"function\" ? x : +x;                                                                       // 6344\n      return force;                                                                                                    // 6345\n    };                                                                                                                 // 6346\n    force.chargeDistance = function(x) {                                                                               // 6347\n      if (!arguments.length) return Math.sqrt(chargeDistance2);                                                        // 6348\n      chargeDistance2 = x * x;                                                                                         // 6349\n      return force;                                                                                                    // 6350\n    };                                                                                                                 // 6351\n    force.gravity = function(x) {                                                                                      // 6352\n      if (!arguments.length) return gravity;                                                                           // 6353\n      gravity = +x;                                                                                                    // 6354\n      return force;                                                                                                    // 6355\n    };                                                                                                                 // 6356\n    force.theta = function(x) {                                                                                        // 6357\n      if (!arguments.length) return Math.sqrt(theta2);                                                                 // 6358\n      theta2 = x * x;                                                                                                  // 6359\n      return force;                                                                                                    // 6360\n    };                                                                                                                 // 6361\n    force.alpha = function(x) {                                                                                        // 6362\n      if (!arguments.length) return alpha;                                                                             // 6363\n      x = +x;                                                                                                          // 6364\n      if (alpha) {                                                                                                     // 6365\n        if (x > 0) {                                                                                                   // 6366\n          alpha = x;                                                                                                   // 6367\n        } else {                                                                                                       // 6368\n          timer.c = null, timer.t = NaN, timer = null;                                                                 // 6369\n          event.start({                                                                                                // 6370\n            type: \"end\",                                                                                               // 6371\n            alpha: alpha = 0                                                                                           // 6372\n          });                                                                                                          // 6373\n        }                                                                                                              // 6374\n      } else if (x > 0) {                                                                                              // 6375\n        event.start({                                                                                                  // 6376\n          type: \"start\",                                                                                               // 6377\n          alpha: alpha = x                                                                                             // 6378\n        });                                                                                                            // 6379\n        timer = d3_timer(force.tick);                                                                                  // 6380\n      }                                                                                                                // 6381\n      return force;                                                                                                    // 6382\n    };                                                                                                                 // 6383\n    force.start = function() {                                                                                         // 6384\n      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;                               // 6385\n      for (i = 0; i < n; ++i) {                                                                                        // 6386\n        (o = nodes[i]).index = i;                                                                                      // 6387\n        o.weight = 0;                                                                                                  // 6388\n      }                                                                                                                // 6389\n      for (i = 0; i < m; ++i) {                                                                                        // 6390\n        o = links[i];                                                                                                  // 6391\n        if (typeof o.source == \"number\") o.source = nodes[o.source];                                                   // 6392\n        if (typeof o.target == \"number\") o.target = nodes[o.target];                                                   // 6393\n        ++o.source.weight;                                                                                             // 6394\n        ++o.target.weight;                                                                                             // 6395\n      }                                                                                                                // 6396\n      for (i = 0; i < n; ++i) {                                                                                        // 6397\n        o = nodes[i];                                                                                                  // 6398\n        if (isNaN(o.x)) o.x = position(\"x\", w);                                                                        // 6399\n        if (isNaN(o.y)) o.y = position(\"y\", h);                                                                        // 6400\n        if (isNaN(o.px)) o.px = o.x;                                                                                   // 6401\n        if (isNaN(o.py)) o.py = o.y;                                                                                   // 6402\n      }                                                                                                                // 6403\n      distances = [];                                                                                                  // 6404\n      if (typeof linkDistance === \"function\") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;\n      strengths = [];                                                                                                  // 6406\n      if (typeof linkStrength === \"function\") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;\n      charges = [];                                                                                                    // 6408\n      if (typeof charge === \"function\") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;\n      function position(dimension, size) {                                                                             // 6410\n        if (!neighbors) {                                                                                              // 6411\n          neighbors = new Array(n);                                                                                    // 6412\n          for (j = 0; j < n; ++j) {                                                                                    // 6413\n            neighbors[j] = [];                                                                                         // 6414\n          }                                                                                                            // 6415\n          for (j = 0; j < m; ++j) {                                                                                    // 6416\n            var o = links[j];                                                                                          // 6417\n            neighbors[o.source.index].push(o.target);                                                                  // 6418\n            neighbors[o.target.index].push(o.source);                                                                  // 6419\n          }                                                                                                            // 6420\n        }                                                                                                              // 6421\n        var candidates = neighbors[i], j = -1, l = candidates.length, x;                                               // 6422\n        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;                                            // 6423\n        return Math.random() * size;                                                                                   // 6424\n      }                                                                                                                // 6425\n      return force.resume();                                                                                           // 6426\n    };                                                                                                                 // 6427\n    force.resume = function() {                                                                                        // 6428\n      return force.alpha(.1);                                                                                          // 6429\n    };                                                                                                                 // 6430\n    force.stop = function() {                                                                                          // 6431\n      return force.alpha(0);                                                                                           // 6432\n    };                                                                                                                 // 6433\n    force.drag = function() {                                                                                          // 6434\n      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on(\"dragstart.force\", d3_layout_forceDragstart).on(\"drag.force\", dragmove).on(\"dragend.force\", d3_layout_forceDragend);\n      if (!arguments.length) return drag;                                                                              // 6436\n      this.on(\"mouseover.force\", d3_layout_forceMouseover).on(\"mouseout.force\", d3_layout_forceMouseout).call(drag);   // 6437\n    };                                                                                                                 // 6438\n    function dragmove(d) {                                                                                             // 6439\n      d.px = d3.event.x, d.py = d3.event.y;                                                                            // 6440\n      force.resume();                                                                                                  // 6441\n    }                                                                                                                  // 6442\n    return d3.rebind(force, event, \"on\");                                                                              // 6443\n  };                                                                                                                   // 6444\n  function d3_layout_forceDragstart(d) {                                                                               // 6445\n    d.fixed |= 2;                                                                                                      // 6446\n  }                                                                                                                    // 6447\n  function d3_layout_forceDragend(d) {                                                                                 // 6448\n    d.fixed &= ~6;                                                                                                     // 6449\n  }                                                                                                                    // 6450\n  function d3_layout_forceMouseover(d) {                                                                               // 6451\n    d.fixed |= 4;                                                                                                      // 6452\n    d.px = d.x, d.py = d.y;                                                                                            // 6453\n  }                                                                                                                    // 6454\n  function d3_layout_forceMouseout(d) {                                                                                // 6455\n    d.fixed &= ~4;                                                                                                     // 6456\n  }                                                                                                                    // 6457\n  function d3_layout_forceAccumulate(quad, alpha, charges) {                                                           // 6458\n    var cx = 0, cy = 0;                                                                                                // 6459\n    quad.charge = 0;                                                                                                   // 6460\n    if (!quad.leaf) {                                                                                                  // 6461\n      var nodes = quad.nodes, n = nodes.length, i = -1, c;                                                             // 6462\n      while (++i < n) {                                                                                                // 6463\n        c = nodes[i];                                                                                                  // 6464\n        if (c == null) continue;                                                                                       // 6465\n        d3_layout_forceAccumulate(c, alpha, charges);                                                                  // 6466\n        quad.charge += c.charge;                                                                                       // 6467\n        cx += c.charge * c.cx;                                                                                         // 6468\n        cy += c.charge * c.cy;                                                                                         // 6469\n      }                                                                                                                // 6470\n    }                                                                                                                  // 6471\n    if (quad.point) {                                                                                                  // 6472\n      if (!quad.leaf) {                                                                                                // 6473\n        quad.point.x += Math.random() - .5;                                                                            // 6474\n        quad.point.y += Math.random() - .5;                                                                            // 6475\n      }                                                                                                                // 6476\n      var k = alpha * charges[quad.point.index];                                                                       // 6477\n      quad.charge += quad.pointCharge = k;                                                                             // 6478\n      cx += k * quad.point.x;                                                                                          // 6479\n      cy += k * quad.point.y;                                                                                          // 6480\n    }                                                                                                                  // 6481\n    quad.cx = cx / quad.charge;                                                                                        // 6482\n    quad.cy = cy / quad.charge;                                                                                        // 6483\n  }                                                                                                                    // 6484\n  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;    // 6485\n  d3.layout.hierarchy = function() {                                                                                   // 6486\n    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;      // 6487\n    function hierarchy(root) {                                                                                         // 6488\n      var stack = [ root ], nodes = [], node;                                                                          // 6489\n      root.depth = 0;                                                                                                  // 6490\n      while ((node = stack.pop()) != null) {                                                                           // 6491\n        nodes.push(node);                                                                                              // 6492\n        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {                            // 6493\n          var n, childs, child;                                                                                        // 6494\n          while (--n >= 0) {                                                                                           // 6495\n            stack.push(child = childs[n]);                                                                             // 6496\n            child.parent = node;                                                                                       // 6497\n            child.depth = node.depth + 1;                                                                              // 6498\n          }                                                                                                            // 6499\n          if (value) node.value = 0;                                                                                   // 6500\n          node.children = childs;                                                                                      // 6501\n        } else {                                                                                                       // 6502\n          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;                                       // 6503\n          delete node.children;                                                                                        // 6504\n        }                                                                                                              // 6505\n      }                                                                                                                // 6506\n      d3_layout_hierarchyVisitAfter(root, function(node) {                                                             // 6507\n        var childs, parent;                                                                                            // 6508\n        if (sort && (childs = node.children)) childs.sort(sort);                                                       // 6509\n        if (value && (parent = node.parent)) parent.value += node.value;                                               // 6510\n      });                                                                                                              // 6511\n      return nodes;                                                                                                    // 6512\n    }                                                                                                                  // 6513\n    hierarchy.sort = function(x) {                                                                                     // 6514\n      if (!arguments.length) return sort;                                                                              // 6515\n      sort = x;                                                                                                        // 6516\n      return hierarchy;                                                                                                // 6517\n    };                                                                                                                 // 6518\n    hierarchy.children = function(x) {                                                                                 // 6519\n      if (!arguments.length) return children;                                                                          // 6520\n      children = x;                                                                                                    // 6521\n      return hierarchy;                                                                                                // 6522\n    };                                                                                                                 // 6523\n    hierarchy.value = function(x) {                                                                                    // 6524\n      if (!arguments.length) return value;                                                                             // 6525\n      value = x;                                                                                                       // 6526\n      return hierarchy;                                                                                                // 6527\n    };                                                                                                                 // 6528\n    hierarchy.revalue = function(root) {                                                                               // 6529\n      if (value) {                                                                                                     // 6530\n        d3_layout_hierarchyVisitBefore(root, function(node) {                                                          // 6531\n          if (node.children) node.value = 0;                                                                           // 6532\n        });                                                                                                            // 6533\n        d3_layout_hierarchyVisitAfter(root, function(node) {                                                           // 6534\n          var parent;                                                                                                  // 6535\n          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;                              // 6536\n          if (parent = node.parent) parent.value += node.value;                                                        // 6537\n        });                                                                                                            // 6538\n      }                                                                                                                // 6539\n      return root;                                                                                                     // 6540\n    };                                                                                                                 // 6541\n    return hierarchy;                                                                                                  // 6542\n  };                                                                                                                   // 6543\n  function d3_layout_hierarchyRebind(object, hierarchy) {                                                              // 6544\n    d3.rebind(object, hierarchy, \"sort\", \"children\", \"value\");                                                         // 6545\n    object.nodes = object;                                                                                             // 6546\n    object.links = d3_layout_hierarchyLinks;                                                                           // 6547\n    return object;                                                                                                     // 6548\n  }                                                                                                                    // 6549\n  function d3_layout_hierarchyVisitBefore(node, callback) {                                                            // 6550\n    var nodes = [ node ];                                                                                              // 6551\n    while ((node = nodes.pop()) != null) {                                                                             // 6552\n      callback(node);                                                                                                  // 6553\n      if ((children = node.children) && (n = children.length)) {                                                       // 6554\n        var n, children;                                                                                               // 6555\n        while (--n >= 0) nodes.push(children[n]);                                                                      // 6556\n      }                                                                                                                // 6557\n    }                                                                                                                  // 6558\n  }                                                                                                                    // 6559\n  function d3_layout_hierarchyVisitAfter(node, callback) {                                                             // 6560\n    var nodes = [ node ], nodes2 = [];                                                                                 // 6561\n    while ((node = nodes.pop()) != null) {                                                                             // 6562\n      nodes2.push(node);                                                                                               // 6563\n      if ((children = node.children) && (n = children.length)) {                                                       // 6564\n        var i = -1, n, children;                                                                                       // 6565\n        while (++i < n) nodes.push(children[i]);                                                                       // 6566\n      }                                                                                                                // 6567\n    }                                                                                                                  // 6568\n    while ((node = nodes2.pop()) != null) {                                                                            // 6569\n      callback(node);                                                                                                  // 6570\n    }                                                                                                                  // 6571\n  }                                                                                                                    // 6572\n  function d3_layout_hierarchyChildren(d) {                                                                            // 6573\n    return d.children;                                                                                                 // 6574\n  }                                                                                                                    // 6575\n  function d3_layout_hierarchyValue(d) {                                                                               // 6576\n    return d.value;                                                                                                    // 6577\n  }                                                                                                                    // 6578\n  function d3_layout_hierarchySort(a, b) {                                                                             // 6579\n    return b.value - a.value;                                                                                          // 6580\n  }                                                                                                                    // 6581\n  function d3_layout_hierarchyLinks(nodes) {                                                                           // 6582\n    return d3.merge(nodes.map(function(parent) {                                                                       // 6583\n      return (parent.children || []).map(function(child) {                                                             // 6584\n        return {                                                                                                       // 6585\n          source: parent,                                                                                              // 6586\n          target: child                                                                                                // 6587\n        };                                                                                                             // 6588\n      });                                                                                                              // 6589\n    }));                                                                                                               // 6590\n  }                                                                                                                    // 6591\n  d3.layout.partition = function() {                                                                                   // 6592\n    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];                                                            // 6593\n    function position(node, x, dx, dy) {                                                                               // 6594\n      var children = node.children;                                                                                    // 6595\n      node.x = x;                                                                                                      // 6596\n      node.y = node.depth * dy;                                                                                        // 6597\n      node.dx = dx;                                                                                                    // 6598\n      node.dy = dy;                                                                                                    // 6599\n      if (children && (n = children.length)) {                                                                         // 6600\n        var i = -1, n, c, d;                                                                                           // 6601\n        dx = node.value ? dx / node.value : 0;                                                                         // 6602\n        while (++i < n) {                                                                                              // 6603\n          position(c = children[i], x, d = c.value * dx, dy);                                                          // 6604\n          x += d;                                                                                                      // 6605\n        }                                                                                                              // 6606\n      }                                                                                                                // 6607\n    }                                                                                                                  // 6608\n    function depth(node) {                                                                                             // 6609\n      var children = node.children, d = 0;                                                                             // 6610\n      if (children && (n = children.length)) {                                                                         // 6611\n        var i = -1, n;                                                                                                 // 6612\n        while (++i < n) d = Math.max(d, depth(children[i]));                                                           // 6613\n      }                                                                                                                // 6614\n      return 1 + d;                                                                                                    // 6615\n    }                                                                                                                  // 6616\n    function partition(d, i) {                                                                                         // 6617\n      var nodes = hierarchy.call(this, d, i);                                                                          // 6618\n      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));                                                       // 6619\n      return nodes;                                                                                                    // 6620\n    }                                                                                                                  // 6621\n    partition.size = function(x) {                                                                                     // 6622\n      if (!arguments.length) return size;                                                                              // 6623\n      size = x;                                                                                                        // 6624\n      return partition;                                                                                                // 6625\n    };                                                                                                                 // 6626\n    return d3_layout_hierarchyRebind(partition, hierarchy);                                                            // 6627\n  };                                                                                                                   // 6628\n  d3.layout.pie = function() {                                                                                         // 6629\n    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;                   // 6630\n    function pie(data) {                                                                                               // 6631\n      var n = data.length, values = data.map(function(d, i) {                                                          // 6632\n        return +value.call(pie, d, i);                                                                                 // 6633\n      }), a = +(typeof startAngle === \"function\" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === \"function\" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === \"function\" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;\n      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {                                // 6635\n        return values[j] - values[i];                                                                                  // 6636\n      } : function(i, j) {                                                                                             // 6637\n        return sort(data[i], data[j]);                                                                                 // 6638\n      });                                                                                                              // 6639\n      index.forEach(function(i) {                                                                                      // 6640\n        arcs[i] = {                                                                                                    // 6641\n          data: data[i],                                                                                               // 6642\n          value: v = values[i],                                                                                        // 6643\n          startAngle: a,                                                                                               // 6644\n          endAngle: a += v * k + pa,                                                                                   // 6645\n          padAngle: p                                                                                                  // 6646\n        };                                                                                                             // 6647\n      });                                                                                                              // 6648\n      return arcs;                                                                                                     // 6649\n    }                                                                                                                  // 6650\n    pie.value = function(_) {                                                                                          // 6651\n      if (!arguments.length) return value;                                                                             // 6652\n      value = _;                                                                                                       // 6653\n      return pie;                                                                                                      // 6654\n    };                                                                                                                 // 6655\n    pie.sort = function(_) {                                                                                           // 6656\n      if (!arguments.length) return sort;                                                                              // 6657\n      sort = _;                                                                                                        // 6658\n      return pie;                                                                                                      // 6659\n    };                                                                                                                 // 6660\n    pie.startAngle = function(_) {                                                                                     // 6661\n      if (!arguments.length) return startAngle;                                                                        // 6662\n      startAngle = _;                                                                                                  // 6663\n      return pie;                                                                                                      // 6664\n    };                                                                                                                 // 6665\n    pie.endAngle = function(_) {                                                                                       // 6666\n      if (!arguments.length) return endAngle;                                                                          // 6667\n      endAngle = _;                                                                                                    // 6668\n      return pie;                                                                                                      // 6669\n    };                                                                                                                 // 6670\n    pie.padAngle = function(_) {                                                                                       // 6671\n      if (!arguments.length) return padAngle;                                                                          // 6672\n      padAngle = _;                                                                                                    // 6673\n      return pie;                                                                                                      // 6674\n    };                                                                                                                 // 6675\n    return pie;                                                                                                        // 6676\n  };                                                                                                                   // 6677\n  var d3_layout_pieSortByValue = {};                                                                                   // 6678\n  d3.layout.stack = function() {                                                                                       // 6679\n    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;\n    function stack(data, index) {                                                                                      // 6681\n      if (!(n = data.length)) return data;                                                                             // 6682\n      var series = data.map(function(d, i) {                                                                           // 6683\n        return values.call(stack, d, i);                                                                               // 6684\n      });                                                                                                              // 6685\n      var points = series.map(function(d) {                                                                            // 6686\n        return d.map(function(v, i) {                                                                                  // 6687\n          return [ x.call(stack, v, i), y.call(stack, v, i) ];                                                         // 6688\n        });                                                                                                            // 6689\n      });                                                                                                              // 6690\n      var orders = order.call(stack, points, index);                                                                   // 6691\n      series = d3.permute(series, orders);                                                                             // 6692\n      points = d3.permute(points, orders);                                                                             // 6693\n      var offsets = offset.call(stack, points, index);                                                                 // 6694\n      var m = series[0].length, n, i, j, o;                                                                            // 6695\n      for (j = 0; j < m; ++j) {                                                                                        // 6696\n        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);                                                // 6697\n        for (i = 1; i < n; ++i) {                                                                                      // 6698\n          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);                                    // 6699\n        }                                                                                                              // 6700\n      }                                                                                                                // 6701\n      return data;                                                                                                     // 6702\n    }                                                                                                                  // 6703\n    stack.values = function(x) {                                                                                       // 6704\n      if (!arguments.length) return values;                                                                            // 6705\n      values = x;                                                                                                      // 6706\n      return stack;                                                                                                    // 6707\n    };                                                                                                                 // 6708\n    stack.order = function(x) {                                                                                        // 6709\n      if (!arguments.length) return order;                                                                             // 6710\n      order = typeof x === \"function\" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;               // 6711\n      return stack;                                                                                                    // 6712\n    };                                                                                                                 // 6713\n    stack.offset = function(x) {                                                                                       // 6714\n      if (!arguments.length) return offset;                                                                            // 6715\n      offset = typeof x === \"function\" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;               // 6716\n      return stack;                                                                                                    // 6717\n    };                                                                                                                 // 6718\n    stack.x = function(z) {                                                                                            // 6719\n      if (!arguments.length) return x;                                                                                 // 6720\n      x = z;                                                                                                           // 6721\n      return stack;                                                                                                    // 6722\n    };                                                                                                                 // 6723\n    stack.y = function(z) {                                                                                            // 6724\n      if (!arguments.length) return y;                                                                                 // 6725\n      y = z;                                                                                                           // 6726\n      return stack;                                                                                                    // 6727\n    };                                                                                                                 // 6728\n    stack.out = function(z) {                                                                                          // 6729\n      if (!arguments.length) return out;                                                                               // 6730\n      out = z;                                                                                                         // 6731\n      return stack;                                                                                                    // 6732\n    };                                                                                                                 // 6733\n    return stack;                                                                                                      // 6734\n  };                                                                                                                   // 6735\n  function d3_layout_stackX(d) {                                                                                       // 6736\n    return d.x;                                                                                                        // 6737\n  }                                                                                                                    // 6738\n  function d3_layout_stackY(d) {                                                                                       // 6739\n    return d.y;                                                                                                        // 6740\n  }                                                                                                                    // 6741\n  function d3_layout_stackOut(d, y0, y) {                                                                              // 6742\n    d.y0 = y0;                                                                                                         // 6743\n    d.y = y;                                                                                                           // 6744\n  }                                                                                                                    // 6745\n  var d3_layout_stackOrders = d3.map({                                                                                 // 6746\n    \"inside-out\": function(data) {                                                                                     // 6747\n      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {\n        return max[a] - max[b];                                                                                        // 6749\n      }), top = 0, bottom = 0, tops = [], bottoms = [];                                                                // 6750\n      for (i = 0; i < n; ++i) {                                                                                        // 6751\n        j = index[i];                                                                                                  // 6752\n        if (top < bottom) {                                                                                            // 6753\n          top += sums[j];                                                                                              // 6754\n          tops.push(j);                                                                                                // 6755\n        } else {                                                                                                       // 6756\n          bottom += sums[j];                                                                                           // 6757\n          bottoms.push(j);                                                                                             // 6758\n        }                                                                                                              // 6759\n      }                                                                                                                // 6760\n      return bottoms.reverse().concat(tops);                                                                           // 6761\n    },                                                                                                                 // 6762\n    reverse: function(data) {                                                                                          // 6763\n      return d3.range(data.length).reverse();                                                                          // 6764\n    },                                                                                                                 // 6765\n    \"default\": d3_layout_stackOrderDefault                                                                             // 6766\n  });                                                                                                                  // 6767\n  var d3_layout_stackOffsets = d3.map({                                                                                // 6768\n    silhouette: function(data) {                                                                                       // 6769\n      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];                                   // 6770\n      for (j = 0; j < m; ++j) {                                                                                        // 6771\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];                                                             // 6772\n        if (o > max) max = o;                                                                                          // 6773\n        sums.push(o);                                                                                                  // 6774\n      }                                                                                                                // 6775\n      for (j = 0; j < m; ++j) {                                                                                        // 6776\n        y0[j] = (max - sums[j]) / 2;                                                                                   // 6777\n      }                                                                                                                // 6778\n      return y0;                                                                                                       // 6779\n    },                                                                                                                 // 6780\n    wiggle: function(data) {                                                                                           // 6781\n      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];                         // 6782\n      y0[0] = o = o0 = 0;                                                                                              // 6783\n      for (j = 1; j < m; ++j) {                                                                                        // 6784\n        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];                                                           // 6785\n        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {                                                  // 6786\n          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {                               // 6787\n            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;                                                            // 6788\n          }                                                                                                            // 6789\n          s2 += s3 * data[i][j][1];                                                                                    // 6790\n        }                                                                                                              // 6791\n        y0[j] = o -= s1 ? s2 / s1 * dx : 0;                                                                            // 6792\n        if (o < o0) o0 = o;                                                                                            // 6793\n      }                                                                                                                // 6794\n      for (j = 0; j < m; ++j) y0[j] -= o0;                                                                             // 6795\n      return y0;                                                                                                       // 6796\n    },                                                                                                                 // 6797\n    expand: function(data) {                                                                                           // 6798\n      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];                                            // 6799\n      for (j = 0; j < m; ++j) {                                                                                        // 6800\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];                                                             // 6801\n        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;             // 6802\n      }                                                                                                                // 6803\n      for (j = 0; j < m; ++j) y0[j] = 0;                                                                               // 6804\n      return y0;                                                                                                       // 6805\n    },                                                                                                                 // 6806\n    zero: d3_layout_stackOffsetZero                                                                                    // 6807\n  });                                                                                                                  // 6808\n  function d3_layout_stackOrderDefault(data) {                                                                         // 6809\n    return d3.range(data.length);                                                                                      // 6810\n  }                                                                                                                    // 6811\n  function d3_layout_stackOffsetZero(data) {                                                                           // 6812\n    var j = -1, m = data[0].length, y0 = [];                                                                           // 6813\n    while (++j < m) y0[j] = 0;                                                                                         // 6814\n    return y0;                                                                                                         // 6815\n  }                                                                                                                    // 6816\n  function d3_layout_stackMaxIndex(array) {                                                                            // 6817\n    var i = 1, j = 0, v = array[0][1], k, n = array.length;                                                            // 6818\n    for (;i < n; ++i) {                                                                                                // 6819\n      if ((k = array[i][1]) > v) {                                                                                     // 6820\n        j = i;                                                                                                         // 6821\n        v = k;                                                                                                         // 6822\n      }                                                                                                                // 6823\n    }                                                                                                                  // 6824\n    return j;                                                                                                          // 6825\n  }                                                                                                                    // 6826\n  function d3_layout_stackReduceSum(d) {                                                                               // 6827\n    return d.reduce(d3_layout_stackSum, 0);                                                                            // 6828\n  }                                                                                                                    // 6829\n  function d3_layout_stackSum(p, d) {                                                                                  // 6830\n    return p + d[1];                                                                                                   // 6831\n  }                                                                                                                    // 6832\n  d3.layout.histogram = function() {                                                                                   // 6833\n    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;  // 6834\n    function histogram(data, i) {                                                                                      // 6835\n      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;\n      while (++i < m) {                                                                                                // 6837\n        bin = bins[i] = [];                                                                                            // 6838\n        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);                                                          // 6839\n        bin.y = 0;                                                                                                     // 6840\n      }                                                                                                                // 6841\n      if (m > 0) {                                                                                                     // 6842\n        i = -1;                                                                                                        // 6843\n        while (++i < n) {                                                                                              // 6844\n          x = values[i];                                                                                               // 6845\n          if (x >= range[0] && x <= range[1]) {                                                                        // 6846\n            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];                                                            // 6847\n            bin.y += k;                                                                                                // 6848\n            bin.push(data[i]);                                                                                         // 6849\n          }                                                                                                            // 6850\n        }                                                                                                              // 6851\n      }                                                                                                                // 6852\n      return bins;                                                                                                     // 6853\n    }                                                                                                                  // 6854\n    histogram.value = function(x) {                                                                                    // 6855\n      if (!arguments.length) return valuer;                                                                            // 6856\n      valuer = x;                                                                                                      // 6857\n      return histogram;                                                                                                // 6858\n    };                                                                                                                 // 6859\n    histogram.range = function(x) {                                                                                    // 6860\n      if (!arguments.length) return ranger;                                                                            // 6861\n      ranger = d3_functor(x);                                                                                          // 6862\n      return histogram;                                                                                                // 6863\n    };                                                                                                                 // 6864\n    histogram.bins = function(x) {                                                                                     // 6865\n      if (!arguments.length) return binner;                                                                            // 6866\n      binner = typeof x === \"number\" ? function(range) {                                                               // 6867\n        return d3_layout_histogramBinFixed(range, x);                                                                  // 6868\n      } : d3_functor(x);                                                                                               // 6869\n      return histogram;                                                                                                // 6870\n    };                                                                                                                 // 6871\n    histogram.frequency = function(x) {                                                                                // 6872\n      if (!arguments.length) return frequency;                                                                         // 6873\n      frequency = !!x;                                                                                                 // 6874\n      return histogram;                                                                                                // 6875\n    };                                                                                                                 // 6876\n    return histogram;                                                                                                  // 6877\n  };                                                                                                                   // 6878\n  function d3_layout_histogramBinSturges(range, values) {                                                              // 6879\n    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));                      // 6880\n  }                                                                                                                    // 6881\n  function d3_layout_histogramBinFixed(range, n) {                                                                     // 6882\n    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];                                                         // 6883\n    while (++x <= n) f[x] = m * x + b;                                                                                 // 6884\n    return f;                                                                                                          // 6885\n  }                                                                                                                    // 6886\n  function d3_layout_histogramRange(values) {                                                                          // 6887\n    return [ d3.min(values), d3.max(values) ];                                                                         // 6888\n  }                                                                                                                    // 6889\n  d3.layout.pack = function() {                                                                                        // 6890\n    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;              // 6891\n    function pack(d, i) {                                                                                              // 6892\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === \"function\" ? radius : function() {\n        return radius;                                                                                                 // 6894\n      };                                                                                                               // 6895\n      root.x = root.y = 0;                                                                                             // 6896\n      d3_layout_hierarchyVisitAfter(root, function(d) {                                                                // 6897\n        d.r = +r(d.value);                                                                                             // 6898\n      });                                                                                                              // 6899\n      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);                                                     // 6900\n      if (padding) {                                                                                                   // 6901\n        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;                                // 6902\n        d3_layout_hierarchyVisitAfter(root, function(d) {                                                              // 6903\n          d.r += dr;                                                                                                   // 6904\n        });                                                                                                            // 6905\n        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);                                                   // 6906\n        d3_layout_hierarchyVisitAfter(root, function(d) {                                                              // 6907\n          d.r -= dr;                                                                                                   // 6908\n        });                                                                                                            // 6909\n      }                                                                                                                // 6910\n      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));          // 6911\n      return nodes;                                                                                                    // 6912\n    }                                                                                                                  // 6913\n    pack.size = function(_) {                                                                                          // 6914\n      if (!arguments.length) return size;                                                                              // 6915\n      size = _;                                                                                                        // 6916\n      return pack;                                                                                                     // 6917\n    };                                                                                                                 // 6918\n    pack.radius = function(_) {                                                                                        // 6919\n      if (!arguments.length) return radius;                                                                            // 6920\n      radius = _ == null || typeof _ === \"function\" ? _ : +_;                                                          // 6921\n      return pack;                                                                                                     // 6922\n    };                                                                                                                 // 6923\n    pack.padding = function(_) {                                                                                       // 6924\n      if (!arguments.length) return padding;                                                                           // 6925\n      padding = +_;                                                                                                    // 6926\n      return pack;                                                                                                     // 6927\n    };                                                                                                                 // 6928\n    return d3_layout_hierarchyRebind(pack, hierarchy);                                                                 // 6929\n  };                                                                                                                   // 6930\n  function d3_layout_packSort(a, b) {                                                                                  // 6931\n    return a.value - b.value;                                                                                          // 6932\n  }                                                                                                                    // 6933\n  function d3_layout_packInsert(a, b) {                                                                                // 6934\n    var c = a._pack_next;                                                                                              // 6935\n    a._pack_next = b;                                                                                                  // 6936\n    b._pack_prev = a;                                                                                                  // 6937\n    b._pack_next = c;                                                                                                  // 6938\n    c._pack_prev = b;                                                                                                  // 6939\n  }                                                                                                                    // 6940\n  function d3_layout_packSplice(a, b) {                                                                                // 6941\n    a._pack_next = b;                                                                                                  // 6942\n    b._pack_prev = a;                                                                                                  // 6943\n  }                                                                                                                    // 6944\n  function d3_layout_packIntersects(a, b) {                                                                            // 6945\n    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;                                                                // 6946\n    return .999 * dr * dr > dx * dx + dy * dy;                                                                         // 6947\n  }                                                                                                                    // 6948\n  function d3_layout_packSiblings(node) {                                                                              // 6949\n    if (!(nodes = node.children) || !(n = nodes.length)) return;                                                       // 6950\n    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;              // 6951\n    function bound(node) {                                                                                             // 6952\n      xMin = Math.min(node.x - node.r, xMin);                                                                          // 6953\n      xMax = Math.max(node.x + node.r, xMax);                                                                          // 6954\n      yMin = Math.min(node.y - node.r, yMin);                                                                          // 6955\n      yMax = Math.max(node.y + node.r, yMax);                                                                          // 6956\n    }                                                                                                                  // 6957\n    nodes.forEach(d3_layout_packLink);                                                                                 // 6958\n    a = nodes[0];                                                                                                      // 6959\n    a.x = -a.r;                                                                                                        // 6960\n    a.y = 0;                                                                                                           // 6961\n    bound(a);                                                                                                          // 6962\n    if (n > 1) {                                                                                                       // 6963\n      b = nodes[1];                                                                                                    // 6964\n      b.x = b.r;                                                                                                       // 6965\n      b.y = 0;                                                                                                         // 6966\n      bound(b);                                                                                                        // 6967\n      if (n > 2) {                                                                                                     // 6968\n        c = nodes[2];                                                                                                  // 6969\n        d3_layout_packPlace(a, b, c);                                                                                  // 6970\n        bound(c);                                                                                                      // 6971\n        d3_layout_packInsert(a, c);                                                                                    // 6972\n        a._pack_prev = c;                                                                                              // 6973\n        d3_layout_packInsert(c, b);                                                                                    // 6974\n        b = a._pack_next;                                                                                              // 6975\n        for (i = 3; i < n; i++) {                                                                                      // 6976\n          d3_layout_packPlace(a, b, c = nodes[i]);                                                                     // 6977\n          var isect = 0, s1 = 1, s2 = 1;                                                                               // 6978\n          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {                                                    // 6979\n            if (d3_layout_packIntersects(j, c)) {                                                                      // 6980\n              isect = 1;                                                                                               // 6981\n              break;                                                                                                   // 6982\n            }                                                                                                          // 6983\n          }                                                                                                            // 6984\n          if (isect == 1) {                                                                                            // 6985\n            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {                                       // 6986\n              if (d3_layout_packIntersects(k, c)) {                                                                    // 6987\n                break;                                                                                                 // 6988\n              }                                                                                                        // 6989\n            }                                                                                                          // 6990\n          }                                                                                                            // 6991\n          if (isect) {                                                                                                 // 6992\n            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b); // 6993\n            i--;                                                                                                       // 6994\n          } else {                                                                                                     // 6995\n            d3_layout_packInsert(a, c);                                                                                // 6996\n            b = c;                                                                                                     // 6997\n            bound(c);                                                                                                  // 6998\n          }                                                                                                            // 6999\n        }                                                                                                              // 7000\n      }                                                                                                                // 7001\n    }                                                                                                                  // 7002\n    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;                                                        // 7003\n    for (i = 0; i < n; i++) {                                                                                          // 7004\n      c = nodes[i];                                                                                                    // 7005\n      c.x -= cx;                                                                                                       // 7006\n      c.y -= cy;                                                                                                       // 7007\n      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));                                                       // 7008\n    }                                                                                                                  // 7009\n    node.r = cr;                                                                                                       // 7010\n    nodes.forEach(d3_layout_packUnlink);                                                                               // 7011\n  }                                                                                                                    // 7012\n  function d3_layout_packLink(node) {                                                                                  // 7013\n    node._pack_next = node._pack_prev = node;                                                                          // 7014\n  }                                                                                                                    // 7015\n  function d3_layout_packUnlink(node) {                                                                                // 7016\n    delete node._pack_next;                                                                                            // 7017\n    delete node._pack_prev;                                                                                            // 7018\n  }                                                                                                                    // 7019\n  function d3_layout_packTransform(node, x, y, k) {                                                                    // 7020\n    var children = node.children;                                                                                      // 7021\n    node.x = x += k * node.x;                                                                                          // 7022\n    node.y = y += k * node.y;                                                                                          // 7023\n    node.r *= k;                                                                                                       // 7024\n    if (children) {                                                                                                    // 7025\n      var i = -1, n = children.length;                                                                                 // 7026\n      while (++i < n) d3_layout_packTransform(children[i], x, y, k);                                                   // 7027\n    }                                                                                                                  // 7028\n  }                                                                                                                    // 7029\n  function d3_layout_packPlace(a, b, c) {                                                                              // 7030\n    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;                                                                // 7031\n    if (db && (dx || dy)) {                                                                                            // 7032\n      var da = b.r + c.r, dc = dx * dx + dy * dy;                                                                      // 7033\n      da *= da;                                                                                                        // 7034\n      db *= db;                                                                                                        // 7035\n      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n      c.x = a.x + x * dx + y * dy;                                                                                     // 7037\n      c.y = a.y + x * dy - y * dx;                                                                                     // 7038\n    } else {                                                                                                           // 7039\n      c.x = a.x + db;                                                                                                  // 7040\n      c.y = a.y;                                                                                                       // 7041\n    }                                                                                                                  // 7042\n  }                                                                                                                    // 7043\n  d3.layout.tree = function() {                                                                                        // 7044\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;\n    function tree(d, i) {                                                                                              // 7046\n      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);                               // 7047\n      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;                                      // 7048\n      d3_layout_hierarchyVisitBefore(root1, secondWalk);                                                               // 7049\n      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {                                            // 7050\n        var left = root0, right = root0, bottom = root0;                                                               // 7051\n        d3_layout_hierarchyVisitBefore(root0, function(node) {                                                         // 7052\n          if (node.x < left.x) left = node;                                                                            // 7053\n          if (node.x > right.x) right = node;                                                                          // 7054\n          if (node.depth > bottom.depth) bottom = node;                                                                // 7055\n        });                                                                                                            // 7056\n        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);\n        d3_layout_hierarchyVisitBefore(root0, function(node) {                                                         // 7058\n          node.x = (node.x + tx) * kx;                                                                                 // 7059\n          node.y = node.depth * ky;                                                                                    // 7060\n        });                                                                                                            // 7061\n      }                                                                                                                // 7062\n      return nodes;                                                                                                    // 7063\n    }                                                                                                                  // 7064\n    function wrapTree(root0) {                                                                                         // 7065\n      var root1 = {                                                                                                    // 7066\n        A: null,                                                                                                       // 7067\n        children: [ root0 ]                                                                                            // 7068\n      }, queue = [ root1 ], node1;                                                                                     // 7069\n      while ((node1 = queue.pop()) != null) {                                                                          // 7070\n        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {                           // 7071\n          queue.push((children[i] = child = {                                                                          // 7072\n            _: children[i],                                                                                            // 7073\n            parent: node1,                                                                                             // 7074\n            children: (child = children[i].children) && child.slice() || [],                                           // 7075\n            A: null,                                                                                                   // 7076\n            a: null,                                                                                                   // 7077\n            z: 0,                                                                                                      // 7078\n            m: 0,                                                                                                      // 7079\n            c: 0,                                                                                                      // 7080\n            s: 0,                                                                                                      // 7081\n            t: null,                                                                                                   // 7082\n            i: i                                                                                                       // 7083\n          }).a = child);                                                                                               // 7084\n        }                                                                                                              // 7085\n      }                                                                                                                // 7086\n      return root1.children[0];                                                                                        // 7087\n    }                                                                                                                  // 7088\n    function firstWalk(v) {                                                                                            // 7089\n      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;                     // 7090\n      if (children.length) {                                                                                           // 7091\n        d3_layout_treeShift(v);                                                                                        // 7092\n        var midpoint = (children[0].z + children[children.length - 1].z) / 2;                                          // 7093\n        if (w) {                                                                                                       // 7094\n          v.z = w.z + separation(v._, w._);                                                                            // 7095\n          v.m = v.z - midpoint;                                                                                        // 7096\n        } else {                                                                                                       // 7097\n          v.z = midpoint;                                                                                              // 7098\n        }                                                                                                              // 7099\n      } else if (w) {                                                                                                  // 7100\n        v.z = w.z + separation(v._, w._);                                                                              // 7101\n      }                                                                                                                // 7102\n      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);                                                         // 7103\n    }                                                                                                                  // 7104\n    function secondWalk(v) {                                                                                           // 7105\n      v._.x = v.z + v.parent.m;                                                                                        // 7106\n      v.m += v.parent.m;                                                                                               // 7107\n    }                                                                                                                  // 7108\n    function apportion(v, w, ancestor) {                                                                               // 7109\n      if (w) {                                                                                                         // 7110\n        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;\n        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {                            // 7112\n          vom = d3_layout_treeLeft(vom);                                                                               // 7113\n          vop = d3_layout_treeRight(vop);                                                                              // 7114\n          vop.a = v;                                                                                                   // 7115\n          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);                                                // 7116\n          if (shift > 0) {                                                                                             // 7117\n            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);                                    // 7118\n            sip += shift;                                                                                              // 7119\n            sop += shift;                                                                                              // 7120\n          }                                                                                                            // 7121\n          sim += vim.m;                                                                                                // 7122\n          sip += vip.m;                                                                                                // 7123\n          som += vom.m;                                                                                                // 7124\n          sop += vop.m;                                                                                                // 7125\n        }                                                                                                              // 7126\n        if (vim && !d3_layout_treeRight(vop)) {                                                                        // 7127\n          vop.t = vim;                                                                                                 // 7128\n          vop.m += sim - sop;                                                                                          // 7129\n        }                                                                                                              // 7130\n        if (vip && !d3_layout_treeLeft(vom)) {                                                                         // 7131\n          vom.t = vip;                                                                                                 // 7132\n          vom.m += sip - som;                                                                                          // 7133\n          ancestor = v;                                                                                                // 7134\n        }                                                                                                              // 7135\n      }                                                                                                                // 7136\n      return ancestor;                                                                                                 // 7137\n    }                                                                                                                  // 7138\n    function sizeNode(node) {                                                                                          // 7139\n      node.x *= size[0];                                                                                               // 7140\n      node.y = node.depth * size[1];                                                                                   // 7141\n    }                                                                                                                  // 7142\n    tree.separation = function(x) {                                                                                    // 7143\n      if (!arguments.length) return separation;                                                                        // 7144\n      separation = x;                                                                                                  // 7145\n      return tree;                                                                                                     // 7146\n    };                                                                                                                 // 7147\n    tree.size = function(x) {                                                                                          // 7148\n      if (!arguments.length) return nodeSize ? null : size;                                                            // 7149\n      nodeSize = (size = x) == null ? sizeNode : null;                                                                 // 7150\n      return tree;                                                                                                     // 7151\n    };                                                                                                                 // 7152\n    tree.nodeSize = function(x) {                                                                                      // 7153\n      if (!arguments.length) return nodeSize ? size : null;                                                            // 7154\n      nodeSize = (size = x) == null ? null : sizeNode;                                                                 // 7155\n      return tree;                                                                                                     // 7156\n    };                                                                                                                 // 7157\n    return d3_layout_hierarchyRebind(tree, hierarchy);                                                                 // 7158\n  };                                                                                                                   // 7159\n  function d3_layout_treeSeparation(a, b) {                                                                            // 7160\n    return a.parent == b.parent ? 1 : 2;                                                                               // 7161\n  }                                                                                                                    // 7162\n  function d3_layout_treeLeft(v) {                                                                                     // 7163\n    var children = v.children;                                                                                         // 7164\n    return children.length ? children[0] : v.t;                                                                        // 7165\n  }                                                                                                                    // 7166\n  function d3_layout_treeRight(v) {                                                                                    // 7167\n    var children = v.children, n;                                                                                      // 7168\n    return (n = children.length) ? children[n - 1] : v.t;                                                              // 7169\n  }                                                                                                                    // 7170\n  function d3_layout_treeMove(wm, wp, shift) {                                                                         // 7171\n    var change = shift / (wp.i - wm.i);                                                                                // 7172\n    wp.c -= change;                                                                                                    // 7173\n    wp.s += shift;                                                                                                     // 7174\n    wm.c += change;                                                                                                    // 7175\n    wp.z += shift;                                                                                                     // 7176\n    wp.m += shift;                                                                                                     // 7177\n  }                                                                                                                    // 7178\n  function d3_layout_treeShift(v) {                                                                                    // 7179\n    var shift = 0, change = 0, children = v.children, i = children.length, w;                                          // 7180\n    while (--i >= 0) {                                                                                                 // 7181\n      w = children[i];                                                                                                 // 7182\n      w.z += shift;                                                                                                    // 7183\n      w.m += shift;                                                                                                    // 7184\n      shift += w.s + (change += w.c);                                                                                  // 7185\n    }                                                                                                                  // 7186\n  }                                                                                                                    // 7187\n  function d3_layout_treeAncestor(vim, v, ancestor) {                                                                  // 7188\n    return vim.a.parent === v.parent ? vim.a : ancestor;                                                               // 7189\n  }                                                                                                                    // 7190\n  d3.layout.cluster = function() {                                                                                     // 7191\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;\n    function cluster(d, i) {                                                                                           // 7193\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;                                    // 7194\n      d3_layout_hierarchyVisitAfter(root, function(node) {                                                             // 7195\n        var children = node.children;                                                                                  // 7196\n        if (children && children.length) {                                                                             // 7197\n          node.x = d3_layout_clusterX(children);                                                                       // 7198\n          node.y = d3_layout_clusterY(children);                                                                       // 7199\n        } else {                                                                                                       // 7200\n          node.x = previousNode ? x += separation(node, previousNode) : 0;                                             // 7201\n          node.y = 0;                                                                                                  // 7202\n          previousNode = node;                                                                                         // 7203\n        }                                                                                                              // 7204\n      });                                                                                                              // 7205\n      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;\n      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {                                                  // 7207\n        node.x = (node.x - root.x) * size[0];                                                                          // 7208\n        node.y = (root.y - node.y) * size[1];                                                                          // 7209\n      } : function(node) {                                                                                             // 7210\n        node.x = (node.x - x0) / (x1 - x0) * size[0];                                                                  // 7211\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];                                                       // 7212\n      });                                                                                                              // 7213\n      return nodes;                                                                                                    // 7214\n    }                                                                                                                  // 7215\n    cluster.separation = function(x) {                                                                                 // 7216\n      if (!arguments.length) return separation;                                                                        // 7217\n      separation = x;                                                                                                  // 7218\n      return cluster;                                                                                                  // 7219\n    };                                                                                                                 // 7220\n    cluster.size = function(x) {                                                                                       // 7221\n      if (!arguments.length) return nodeSize ? null : size;                                                            // 7222\n      nodeSize = (size = x) == null;                                                                                   // 7223\n      return cluster;                                                                                                  // 7224\n    };                                                                                                                 // 7225\n    cluster.nodeSize = function(x) {                                                                                   // 7226\n      if (!arguments.length) return nodeSize ? size : null;                                                            // 7227\n      nodeSize = (size = x) != null;                                                                                   // 7228\n      return cluster;                                                                                                  // 7229\n    };                                                                                                                 // 7230\n    return d3_layout_hierarchyRebind(cluster, hierarchy);                                                              // 7231\n  };                                                                                                                   // 7232\n  function d3_layout_clusterY(children) {                                                                              // 7233\n    return 1 + d3.max(children, function(child) {                                                                      // 7234\n      return child.y;                                                                                                  // 7235\n    });                                                                                                                // 7236\n  }                                                                                                                    // 7237\n  function d3_layout_clusterX(children) {                                                                              // 7238\n    return children.reduce(function(x, child) {                                                                        // 7239\n      return x + child.x;                                                                                              // 7240\n    }, 0) / children.length;                                                                                           // 7241\n  }                                                                                                                    // 7242\n  function d3_layout_clusterLeft(node) {                                                                               // 7243\n    var children = node.children;                                                                                      // 7244\n    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;                                    // 7245\n  }                                                                                                                    // 7246\n  function d3_layout_clusterRight(node) {                                                                              // 7247\n    var children = node.children, n;                                                                                   // 7248\n    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;                         // 7249\n  }                                                                                                                    // 7250\n  d3.layout.treemap = function() {                                                                                     // 7251\n    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = \"squarify\", ratio = .5 * (1 + Math.sqrt(5));\n    function scale(children, k) {                                                                                      // 7253\n      var i = -1, n = children.length, child, area;                                                                    // 7254\n      while (++i < n) {                                                                                                // 7255\n        area = (child = children[i]).value * (k < 0 ? 0 : k);                                                          // 7256\n        child.area = isNaN(area) || area <= 0 ? 0 : area;                                                              // 7257\n      }                                                                                                                // 7258\n    }                                                                                                                  // 7259\n    function squarify(node) {                                                                                          // 7260\n      var children = node.children;                                                                                    // 7261\n      if (children && children.length) {                                                                               // 7262\n        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === \"slice\" ? rect.dx : mode === \"dice\" ? rect.dy : mode === \"slice-dice\" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;\n        scale(remaining, rect.dx * rect.dy / node.value);                                                              // 7264\n        row.area = 0;                                                                                                  // 7265\n        while ((n = remaining.length) > 0) {                                                                           // 7266\n          row.push(child = remaining[n - 1]);                                                                          // 7267\n          row.area += child.area;                                                                                      // 7268\n          if (mode !== \"squarify\" || (score = worst(row, u)) <= best) {                                                // 7269\n            remaining.pop();                                                                                           // 7270\n            best = score;                                                                                              // 7271\n          } else {                                                                                                     // 7272\n            row.area -= row.pop().area;                                                                                // 7273\n            position(row, u, rect, false);                                                                             // 7274\n            u = Math.min(rect.dx, rect.dy);                                                                            // 7275\n            row.length = row.area = 0;                                                                                 // 7276\n            best = Infinity;                                                                                           // 7277\n          }                                                                                                            // 7278\n        }                                                                                                              // 7279\n        if (row.length) {                                                                                              // 7280\n          position(row, u, rect, true);                                                                                // 7281\n          row.length = row.area = 0;                                                                                   // 7282\n        }                                                                                                              // 7283\n        children.forEach(squarify);                                                                                    // 7284\n      }                                                                                                                // 7285\n    }                                                                                                                  // 7286\n    function stickify(node) {                                                                                          // 7287\n      var children = node.children;                                                                                    // 7288\n      if (children && children.length) {                                                                               // 7289\n        var rect = pad(node), remaining = children.slice(), child, row = [];                                           // 7290\n        scale(remaining, rect.dx * rect.dy / node.value);                                                              // 7291\n        row.area = 0;                                                                                                  // 7292\n        while (child = remaining.pop()) {                                                                              // 7293\n          row.push(child);                                                                                             // 7294\n          row.area += child.area;                                                                                      // 7295\n          if (child.z != null) {                                                                                       // 7296\n            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);                                       // 7297\n            row.length = row.area = 0;                                                                                 // 7298\n          }                                                                                                            // 7299\n        }                                                                                                              // 7300\n        children.forEach(stickify);                                                                                    // 7301\n      }                                                                                                                // 7302\n    }                                                                                                                  // 7303\n    function worst(row, u) {                                                                                           // 7304\n      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;                                          // 7305\n      while (++i < n) {                                                                                                // 7306\n        if (!(r = row[i].area)) continue;                                                                              // 7307\n        if (r < rmin) rmin = r;                                                                                        // 7308\n        if (r > rmax) rmax = r;                                                                                        // 7309\n      }                                                                                                                // 7310\n      s *= s;                                                                                                          // 7311\n      u *= u;                                                                                                          // 7312\n      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;                                    // 7313\n    }                                                                                                                  // 7314\n    function position(row, u, rect, flush) {                                                                           // 7315\n      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;                          // 7316\n      if (u == rect.dx) {                                                                                              // 7317\n        if (flush || v > rect.dy) v = rect.dy;                                                                         // 7318\n        while (++i < n) {                                                                                              // 7319\n          o = row[i];                                                                                                  // 7320\n          o.x = x;                                                                                                     // 7321\n          o.y = y;                                                                                                     // 7322\n          o.dy = v;                                                                                                    // 7323\n          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);                                       // 7324\n        }                                                                                                              // 7325\n        o.z = true;                                                                                                    // 7326\n        o.dx += rect.x + rect.dx - x;                                                                                  // 7327\n        rect.y += v;                                                                                                   // 7328\n        rect.dy -= v;                                                                                                  // 7329\n      } else {                                                                                                         // 7330\n        if (flush || v > rect.dx) v = rect.dx;                                                                         // 7331\n        while (++i < n) {                                                                                              // 7332\n          o = row[i];                                                                                                  // 7333\n          o.x = x;                                                                                                     // 7334\n          o.y = y;                                                                                                     // 7335\n          o.dx = v;                                                                                                    // 7336\n          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);                                       // 7337\n        }                                                                                                              // 7338\n        o.z = false;                                                                                                   // 7339\n        o.dy += rect.y + rect.dy - y;                                                                                  // 7340\n        rect.x += v;                                                                                                   // 7341\n        rect.dx -= v;                                                                                                  // 7342\n      }                                                                                                                // 7343\n    }                                                                                                                  // 7344\n    function treemap(d) {                                                                                              // 7345\n      var nodes = stickies || hierarchy(d), root = nodes[0];                                                           // 7346\n      root.x = root.y = 0;                                                                                             // 7347\n      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;                                // 7348\n      if (stickies) hierarchy.revalue(root);                                                                           // 7349\n      scale([ root ], root.dx * root.dy / root.value);                                                                 // 7350\n      (stickies ? stickify : squarify)(root);                                                                          // 7351\n      if (sticky) stickies = nodes;                                                                                    // 7352\n      return nodes;                                                                                                    // 7353\n    }                                                                                                                  // 7354\n    treemap.size = function(x) {                                                                                       // 7355\n      if (!arguments.length) return size;                                                                              // 7356\n      size = x;                                                                                                        // 7357\n      return treemap;                                                                                                  // 7358\n    };                                                                                                                 // 7359\n    treemap.padding = function(x) {                                                                                    // 7360\n      if (!arguments.length) return padding;                                                                           // 7361\n      function padFunction(node) {                                                                                     // 7362\n        var p = x.call(treemap, node, node.depth);                                                                     // 7363\n        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === \"number\" ? [ p, p, p, p ] : p);\n      }                                                                                                                // 7365\n      function padConstant(node) {                                                                                     // 7366\n        return d3_layout_treemapPad(node, x);                                                                          // 7367\n      }                                                                                                                // 7368\n      var type;                                                                                                        // 7369\n      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === \"function\" ? padFunction : type === \"number\" ? (x = [ x, x, x, x ], \n      padConstant) : padConstant;                                                                                      // 7371\n      return treemap;                                                                                                  // 7372\n    };                                                                                                                 // 7373\n    treemap.round = function(x) {                                                                                      // 7374\n      if (!arguments.length) return round != Number;                                                                   // 7375\n      round = x ? Math.round : Number;                                                                                 // 7376\n      return treemap;                                                                                                  // 7377\n    };                                                                                                                 // 7378\n    treemap.sticky = function(x) {                                                                                     // 7379\n      if (!arguments.length) return sticky;                                                                            // 7380\n      sticky = x;                                                                                                      // 7381\n      stickies = null;                                                                                                 // 7382\n      return treemap;                                                                                                  // 7383\n    };                                                                                                                 // 7384\n    treemap.ratio = function(x) {                                                                                      // 7385\n      if (!arguments.length) return ratio;                                                                             // 7386\n      ratio = x;                                                                                                       // 7387\n      return treemap;                                                                                                  // 7388\n    };                                                                                                                 // 7389\n    treemap.mode = function(x) {                                                                                       // 7390\n      if (!arguments.length) return mode;                                                                              // 7391\n      mode = x + \"\";                                                                                                   // 7392\n      return treemap;                                                                                                  // 7393\n    };                                                                                                                 // 7394\n    return d3_layout_hierarchyRebind(treemap, hierarchy);                                                              // 7395\n  };                                                                                                                   // 7396\n  function d3_layout_treemapPadNull(node) {                                                                            // 7397\n    return {                                                                                                           // 7398\n      x: node.x,                                                                                                       // 7399\n      y: node.y,                                                                                                       // 7400\n      dx: node.dx,                                                                                                     // 7401\n      dy: node.dy                                                                                                      // 7402\n    };                                                                                                                 // 7403\n  }                                                                                                                    // 7404\n  function d3_layout_treemapPad(node, padding) {                                                                       // 7405\n    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];\n    if (dx < 0) {                                                                                                      // 7407\n      x += dx / 2;                                                                                                     // 7408\n      dx = 0;                                                                                                          // 7409\n    }                                                                                                                  // 7410\n    if (dy < 0) {                                                                                                      // 7411\n      y += dy / 2;                                                                                                     // 7412\n      dy = 0;                                                                                                          // 7413\n    }                                                                                                                  // 7414\n    return {                                                                                                           // 7415\n      x: x,                                                                                                            // 7416\n      y: y,                                                                                                            // 7417\n      dx: dx,                                                                                                          // 7418\n      dy: dy                                                                                                           // 7419\n    };                                                                                                                 // 7420\n  }                                                                                                                    // 7421\n  d3.random = {                                                                                                        // 7422\n    normal: function(µ, σ) {                                                                                           // 7423\n      var n = arguments.length;                                                                                        // 7424\n      if (n < 2) σ = 1;                                                                                                // 7425\n      if (n < 1) µ = 0;                                                                                                // 7426\n      return function() {                                                                                              // 7427\n        var x, y, r;                                                                                                   // 7428\n        do {                                                                                                           // 7429\n          x = Math.random() * 2 - 1;                                                                                   // 7430\n          y = Math.random() * 2 - 1;                                                                                   // 7431\n          r = x * x + y * y;                                                                                           // 7432\n        } while (!r || r > 1);                                                                                         // 7433\n        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);                                                            // 7434\n      };                                                                                                               // 7435\n    },                                                                                                                 // 7436\n    logNormal: function() {                                                                                            // 7437\n      var random = d3.random.normal.apply(d3, arguments);                                                              // 7438\n      return function() {                                                                                              // 7439\n        return Math.exp(random());                                                                                     // 7440\n      };                                                                                                               // 7441\n    },                                                                                                                 // 7442\n    bates: function(m) {                                                                                               // 7443\n      var random = d3.random.irwinHall(m);                                                                             // 7444\n      return function() {                                                                                              // 7445\n        return random() / m;                                                                                           // 7446\n      };                                                                                                               // 7447\n    },                                                                                                                 // 7448\n    irwinHall: function(m) {                                                                                           // 7449\n      return function() {                                                                                              // 7450\n        for (var s = 0, j = 0; j < m; j++) s += Math.random();                                                         // 7451\n        return s;                                                                                                      // 7452\n      };                                                                                                               // 7453\n    }                                                                                                                  // 7454\n  };                                                                                                                   // 7455\n  d3.scale = {};                                                                                                       // 7456\n  function d3_scaleExtent(domain) {                                                                                    // 7457\n    var start = domain[0], stop = domain[domain.length - 1];                                                           // 7458\n    return start < stop ? [ start, stop ] : [ stop, start ];                                                           // 7459\n  }                                                                                                                    // 7460\n  function d3_scaleRange(scale) {                                                                                      // 7461\n    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());                                    // 7462\n  }                                                                                                                    // 7463\n  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {                                              // 7464\n    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);                                  // 7465\n    return function(x) {                                                                                               // 7466\n      return i(u(x));                                                                                                  // 7467\n    };                                                                                                                 // 7468\n  }                                                                                                                    // 7469\n  function d3_scale_nice(domain, nice) {                                                                               // 7470\n    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;                                          // 7471\n    if (x1 < x0) {                                                                                                     // 7472\n      dx = i0, i0 = i1, i1 = dx;                                                                                       // 7473\n      dx = x0, x0 = x1, x1 = dx;                                                                                       // 7474\n    }                                                                                                                  // 7475\n    domain[i0] = nice.floor(x0);                                                                                       // 7476\n    domain[i1] = nice.ceil(x1);                                                                                        // 7477\n    return domain;                                                                                                     // 7478\n  }                                                                                                                    // 7479\n  function d3_scale_niceStep(step) {                                                                                   // 7480\n    return step ? {                                                                                                    // 7481\n      floor: function(x) {                                                                                             // 7482\n        return Math.floor(x / step) * step;                                                                            // 7483\n      },                                                                                                               // 7484\n      ceil: function(x) {                                                                                              // 7485\n        return Math.ceil(x / step) * step;                                                                             // 7486\n      }                                                                                                                // 7487\n    } : d3_scale_niceIdentity;                                                                                         // 7488\n  }                                                                                                                    // 7489\n  var d3_scale_niceIdentity = {                                                                                        // 7490\n    floor: d3_identity,                                                                                                // 7491\n    ceil: d3_identity                                                                                                  // 7492\n  };                                                                                                                   // 7493\n  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {                                            // 7494\n    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;                                          // 7495\n    if (domain[k] < domain[0]) {                                                                                       // 7496\n      domain = domain.slice().reverse();                                                                               // 7497\n      range = range.slice().reverse();                                                                                 // 7498\n    }                                                                                                                  // 7499\n    while (++j <= k) {                                                                                                 // 7500\n      u.push(uninterpolate(domain[j - 1], domain[j]));                                                                 // 7501\n      i.push(interpolate(range[j - 1], range[j]));                                                                     // 7502\n    }                                                                                                                  // 7503\n    return function(x) {                                                                                               // 7504\n      var j = d3.bisect(domain, x, 1, k) - 1;                                                                          // 7505\n      return i[j](u[j](x));                                                                                            // 7506\n    };                                                                                                                 // 7507\n  }                                                                                                                    // 7508\n  d3.scale.linear = function() {                                                                                       // 7509\n    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);                                                 // 7510\n  };                                                                                                                   // 7511\n  function d3_scale_linear(domain, range, interpolate, clamp) {                                                        // 7512\n    var output, input;                                                                                                 // 7513\n    function rescale() {                                                                                               // 7514\n      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;\n      output = linear(domain, range, uninterpolate, interpolate);                                                      // 7516\n      input = linear(range, domain, uninterpolate, d3_interpolate);                                                    // 7517\n      return scale;                                                                                                    // 7518\n    }                                                                                                                  // 7519\n    function scale(x) {                                                                                                // 7520\n      return output(x);                                                                                                // 7521\n    }                                                                                                                  // 7522\n    scale.invert = function(y) {                                                                                       // 7523\n      return input(y);                                                                                                 // 7524\n    };                                                                                                                 // 7525\n    scale.domain = function(x) {                                                                                       // 7526\n      if (!arguments.length) return domain;                                                                            // 7527\n      domain = x.map(Number);                                                                                          // 7528\n      return rescale();                                                                                                // 7529\n    };                                                                                                                 // 7530\n    scale.range = function(x) {                                                                                        // 7531\n      if (!arguments.length) return range;                                                                             // 7532\n      range = x;                                                                                                       // 7533\n      return rescale();                                                                                                // 7534\n    };                                                                                                                 // 7535\n    scale.rangeRound = function(x) {                                                                                   // 7536\n      return scale.range(x).interpolate(d3_interpolateRound);                                                          // 7537\n    };                                                                                                                 // 7538\n    scale.clamp = function(x) {                                                                                        // 7539\n      if (!arguments.length) return clamp;                                                                             // 7540\n      clamp = x;                                                                                                       // 7541\n      return rescale();                                                                                                // 7542\n    };                                                                                                                 // 7543\n    scale.interpolate = function(x) {                                                                                  // 7544\n      if (!arguments.length) return interpolate;                                                                       // 7545\n      interpolate = x;                                                                                                 // 7546\n      return rescale();                                                                                                // 7547\n    };                                                                                                                 // 7548\n    scale.ticks = function(m) {                                                                                        // 7549\n      return d3_scale_linearTicks(domain, m);                                                                          // 7550\n    };                                                                                                                 // 7551\n    scale.tickFormat = function(m, format) {                                                                           // 7552\n      return d3_scale_linearTickFormat(domain, m, format);                                                             // 7553\n    };                                                                                                                 // 7554\n    scale.nice = function(m) {                                                                                         // 7555\n      d3_scale_linearNice(domain, m);                                                                                  // 7556\n      return rescale();                                                                                                // 7557\n    };                                                                                                                 // 7558\n    scale.copy = function() {                                                                                          // 7559\n      return d3_scale_linear(domain, range, interpolate, clamp);                                                       // 7560\n    };                                                                                                                 // 7561\n    return rescale();                                                                                                  // 7562\n  }                                                                                                                    // 7563\n  function d3_scale_linearRebind(scale, linear) {                                                                      // 7564\n    return d3.rebind(scale, linear, \"range\", \"rangeRound\", \"interpolate\", \"clamp\");                                    // 7565\n  }                                                                                                                    // 7566\n  function d3_scale_linearNice(domain, m) {                                                                            // 7567\n    return d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));                           // 7568\n  }                                                                                                                    // 7569\n  function d3_scale_linearTickRange(domain, m) {                                                                       // 7570\n    if (m == null) m = 10;                                                                                             // 7571\n    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;\n    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;                        // 7573\n    extent[0] = Math.ceil(extent[0] / step) * step;                                                                    // 7574\n    extent[1] = Math.floor(extent[1] / step) * step + step * .5;                                                       // 7575\n    extent[2] = step;                                                                                                  // 7576\n    return extent;                                                                                                     // 7577\n  }                                                                                                                    // 7578\n  function d3_scale_linearTicks(domain, m) {                                                                           // 7579\n    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));                                                    // 7580\n  }                                                                                                                    // 7581\n  function d3_scale_linearTickFormat(domain, m, format) {                                                              // 7582\n    var range = d3_scale_linearTickRange(domain, m);                                                                   // 7583\n    if (format) {                                                                                                      // 7584\n      var match = d3_format_re.exec(format);                                                                           // 7585\n      match.shift();                                                                                                   // 7586\n      if (match[8] === \"s\") {                                                                                          // 7587\n        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));                                          // 7588\n        if (!match[7]) match[7] = \".\" + d3_scale_linearPrecision(prefix.scale(range[2]));                              // 7589\n        match[8] = \"f\";                                                                                                // 7590\n        format = d3.format(match.join(\"\"));                                                                            // 7591\n        return function(d) {                                                                                           // 7592\n          return format(prefix.scale(d)) + prefix.symbol;                                                              // 7593\n        };                                                                                                             // 7594\n      }                                                                                                                // 7595\n      if (!match[7]) match[7] = \".\" + d3_scale_linearFormatPrecision(match[8], range);                                 // 7596\n      format = match.join(\"\");                                                                                         // 7597\n    } else {                                                                                                           // 7598\n      format = \",.\" + d3_scale_linearPrecision(range[2]) + \"f\";                                                        // 7599\n    }                                                                                                                  // 7600\n    return d3.format(format);                                                                                          // 7601\n  }                                                                                                                    // 7602\n  var d3_scale_linearFormatSignificant = {                                                                             // 7603\n    s: 1,                                                                                                              // 7604\n    g: 1,                                                                                                              // 7605\n    p: 1,                                                                                                              // 7606\n    r: 1,                                                                                                              // 7607\n    e: 1                                                                                                               // 7608\n  };                                                                                                                   // 7609\n  function d3_scale_linearPrecision(value) {                                                                           // 7610\n    return -Math.floor(Math.log(value) / Math.LN10 + .01);                                                             // 7611\n  }                                                                                                                    // 7612\n  function d3_scale_linearFormatPrecision(type, range) {                                                               // 7613\n    var p = d3_scale_linearPrecision(range[2]);                                                                        // 7614\n    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== \"e\") : p - (type === \"%\") * 2;\n  }                                                                                                                    // 7616\n  d3.scale.log = function() {                                                                                          // 7617\n    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);                                      // 7618\n  };                                                                                                                   // 7619\n  function d3_scale_log(linear, base, positive, domain) {                                                              // 7620\n    function log(x) {                                                                                                  // 7621\n      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);                        // 7622\n    }                                                                                                                  // 7623\n    function pow(x) {                                                                                                  // 7624\n      return positive ? Math.pow(base, x) : -Math.pow(base, -x);                                                       // 7625\n    }                                                                                                                  // 7626\n    function scale(x) {                                                                                                // 7627\n      return linear(log(x));                                                                                           // 7628\n    }                                                                                                                  // 7629\n    scale.invert = function(x) {                                                                                       // 7630\n      return pow(linear.invert(x));                                                                                    // 7631\n    };                                                                                                                 // 7632\n    scale.domain = function(x) {                                                                                       // 7633\n      if (!arguments.length) return domain;                                                                            // 7634\n      positive = x[0] >= 0;                                                                                            // 7635\n      linear.domain((domain = x.map(Number)).map(log));                                                                // 7636\n      return scale;                                                                                                    // 7637\n    };                                                                                                                 // 7638\n    scale.base = function(_) {                                                                                         // 7639\n      if (!arguments.length) return base;                                                                              // 7640\n      base = +_;                                                                                                       // 7641\n      linear.domain(domain.map(log));                                                                                  // 7642\n      return scale;                                                                                                    // 7643\n    };                                                                                                                 // 7644\n    scale.nice = function() {                                                                                          // 7645\n      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);                          // 7646\n      linear.domain(niced);                                                                                            // 7647\n      domain = niced.map(pow);                                                                                         // 7648\n      return scale;                                                                                                    // 7649\n    };                                                                                                                 // 7650\n    scale.ticks = function() {                                                                                         // 7651\n      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;\n      if (isFinite(j - i)) {                                                                                           // 7653\n        if (positive) {                                                                                                // 7654\n          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);                                        // 7655\n          ticks.push(pow(i));                                                                                          // 7656\n        } else {                                                                                                       // 7657\n          ticks.push(pow(i));                                                                                          // 7658\n          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);                                     // 7659\n        }                                                                                                              // 7660\n        for (i = 0; ticks[i] < u; i++) {}                                                                              // 7661\n        for (j = ticks.length; ticks[j - 1] > v; j--) {}                                                               // 7662\n        ticks = ticks.slice(i, j);                                                                                     // 7663\n      }                                                                                                                // 7664\n      return ticks;                                                                                                    // 7665\n    };                                                                                                                 // 7666\n    scale.tickFormat = function(n, format) {                                                                           // 7667\n      if (!arguments.length) return d3_scale_logFormat;                                                                // 7668\n      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== \"function\") format = d3.format(format);\n      var k = Math.max(.1, n / scale.ticks().length), f = positive ? (e = 1e-12, Math.ceil) : (e = -1e-12,             // 7670\n      Math.floor), e;                                                                                                  // 7671\n      return function(d) {                                                                                             // 7672\n        return d / pow(f(log(d) + e)) <= k ? format(d) : \"\";                                                           // 7673\n      };                                                                                                               // 7674\n    };                                                                                                                 // 7675\n    scale.copy = function() {                                                                                          // 7676\n      return d3_scale_log(linear.copy(), base, positive, domain);                                                      // 7677\n    };                                                                                                                 // 7678\n    return d3_scale_linearRebind(scale, linear);                                                                       // 7679\n  }                                                                                                                    // 7680\n  var d3_scale_logFormat = d3.format(\".0e\"), d3_scale_logNiceNegative = {                                              // 7681\n    floor: function(x) {                                                                                               // 7682\n      return -Math.ceil(-x);                                                                                           // 7683\n    },                                                                                                                 // 7684\n    ceil: function(x) {                                                                                                // 7685\n      return -Math.floor(-x);                                                                                          // 7686\n    }                                                                                                                  // 7687\n  };                                                                                                                   // 7688\n  d3.scale.pow = function() {                                                                                          // 7689\n    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);                                                               // 7690\n  };                                                                                                                   // 7691\n  function d3_scale_pow(linear, exponent, domain) {                                                                    // 7692\n    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);                                        // 7693\n    function scale(x) {                                                                                                // 7694\n      return linear(powp(x));                                                                                          // 7695\n    }                                                                                                                  // 7696\n    scale.invert = function(x) {                                                                                       // 7697\n      return powb(linear.invert(x));                                                                                   // 7698\n    };                                                                                                                 // 7699\n    scale.domain = function(x) {                                                                                       // 7700\n      if (!arguments.length) return domain;                                                                            // 7701\n      linear.domain((domain = x.map(Number)).map(powp));                                                               // 7702\n      return scale;                                                                                                    // 7703\n    };                                                                                                                 // 7704\n    scale.ticks = function(m) {                                                                                        // 7705\n      return d3_scale_linearTicks(domain, m);                                                                          // 7706\n    };                                                                                                                 // 7707\n    scale.tickFormat = function(m, format) {                                                                           // 7708\n      return d3_scale_linearTickFormat(domain, m, format);                                                             // 7709\n    };                                                                                                                 // 7710\n    scale.nice = function(m) {                                                                                         // 7711\n      return scale.domain(d3_scale_linearNice(domain, m));                                                             // 7712\n    };                                                                                                                 // 7713\n    scale.exponent = function(x) {                                                                                     // 7714\n      if (!arguments.length) return exponent;                                                                          // 7715\n      powp = d3_scale_powPow(exponent = x);                                                                            // 7716\n      powb = d3_scale_powPow(1 / exponent);                                                                            // 7717\n      linear.domain(domain.map(powp));                                                                                 // 7718\n      return scale;                                                                                                    // 7719\n    };                                                                                                                 // 7720\n    scale.copy = function() {                                                                                          // 7721\n      return d3_scale_pow(linear.copy(), exponent, domain);                                                            // 7722\n    };                                                                                                                 // 7723\n    return d3_scale_linearRebind(scale, linear);                                                                       // 7724\n  }                                                                                                                    // 7725\n  function d3_scale_powPow(e) {                                                                                        // 7726\n    return function(x) {                                                                                               // 7727\n      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);                                                                // 7728\n    };                                                                                                                 // 7729\n  }                                                                                                                    // 7730\n  d3.scale.sqrt = function() {                                                                                         // 7731\n    return d3.scale.pow().exponent(.5);                                                                                // 7732\n  };                                                                                                                   // 7733\n  d3.scale.ordinal = function() {                                                                                      // 7734\n    return d3_scale_ordinal([], {                                                                                      // 7735\n      t: \"range\",                                                                                                      // 7736\n      a: [ [] ]                                                                                                        // 7737\n    });                                                                                                                // 7738\n  };                                                                                                                   // 7739\n  function d3_scale_ordinal(domain, ranger) {                                                                          // 7740\n    var index, range, rangeBand;                                                                                       // 7741\n    function scale(x) {                                                                                                // 7742\n      return range[((index.get(x) || (ranger.t === \"range\" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];\n    }                                                                                                                  // 7744\n    function steps(start, step) {                                                                                      // 7745\n      return d3.range(domain.length).map(function(i) {                                                                 // 7746\n        return start + step * i;                                                                                       // 7747\n      });                                                                                                              // 7748\n    }                                                                                                                  // 7749\n    scale.domain = function(x) {                                                                                       // 7750\n      if (!arguments.length) return domain;                                                                            // 7751\n      domain = [];                                                                                                     // 7752\n      index = new d3_Map();                                                                                            // 7753\n      var i = -1, n = x.length, xi;                                                                                    // 7754\n      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));                                       // 7755\n      return scale[ranger.t].apply(scale, ranger.a);                                                                   // 7756\n    };                                                                                                                 // 7757\n    scale.range = function(x) {                                                                                        // 7758\n      if (!arguments.length) return range;                                                                             // 7759\n      range = x;                                                                                                       // 7760\n      rangeBand = 0;                                                                                                   // 7761\n      ranger = {                                                                                                       // 7762\n        t: \"range\",                                                                                                    // 7763\n        a: arguments                                                                                                   // 7764\n      };                                                                                                               // 7765\n      return scale;                                                                                                    // 7766\n    };                                                                                                                 // 7767\n    scale.rangePoints = function(x, padding) {                                                                         // 7768\n      if (arguments.length < 2) padding = 0;                                                                           // 7769\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2,                           // 7770\n      0) : (stop - start) / (domain.length - 1 + padding);                                                             // 7771\n      range = steps(start + step * padding / 2, step);                                                                 // 7772\n      rangeBand = 0;                                                                                                   // 7773\n      ranger = {                                                                                                       // 7774\n        t: \"rangePoints\",                                                                                              // 7775\n        a: arguments                                                                                                   // 7776\n      };                                                                                                               // 7777\n      return scale;                                                                                                    // 7778\n    };                                                                                                                 // 7779\n    scale.rangeRoundPoints = function(x, padding) {                                                                    // 7780\n      if (arguments.length < 2) padding = 0;                                                                           // 7781\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2),        // 7782\n      0) : (stop - start) / (domain.length - 1 + padding) | 0;                                                         // 7783\n      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);\n      rangeBand = 0;                                                                                                   // 7785\n      ranger = {                                                                                                       // 7786\n        t: \"rangeRoundPoints\",                                                                                         // 7787\n        a: arguments                                                                                                   // 7788\n      };                                                                                                               // 7789\n      return scale;                                                                                                    // 7790\n    };                                                                                                                 // 7791\n    scale.rangeBands = function(x, padding, outerPadding) {                                                            // 7792\n      if (arguments.length < 2) padding = 0;                                                                           // 7793\n      if (arguments.length < 3) outerPadding = padding;                                                                // 7794\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);\n      range = steps(start + step * outerPadding, step);                                                                // 7796\n      if (reverse) range.reverse();                                                                                    // 7797\n      rangeBand = step * (1 - padding);                                                                                // 7798\n      ranger = {                                                                                                       // 7799\n        t: \"rangeBands\",                                                                                               // 7800\n        a: arguments                                                                                                   // 7801\n      };                                                                                                               // 7802\n      return scale;                                                                                                    // 7803\n    };                                                                                                                 // 7804\n    scale.rangeRoundBands = function(x, padding, outerPadding) {                                                       // 7805\n      if (arguments.length < 2) padding = 0;                                                                           // 7806\n      if (arguments.length < 3) outerPadding = padding;                                                                // 7807\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));\n      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);                  // 7809\n      if (reverse) range.reverse();                                                                                    // 7810\n      rangeBand = Math.round(step * (1 - padding));                                                                    // 7811\n      ranger = {                                                                                                       // 7812\n        t: \"rangeRoundBands\",                                                                                          // 7813\n        a: arguments                                                                                                   // 7814\n      };                                                                                                               // 7815\n      return scale;                                                                                                    // 7816\n    };                                                                                                                 // 7817\n    scale.rangeBand = function() {                                                                                     // 7818\n      return rangeBand;                                                                                                // 7819\n    };                                                                                                                 // 7820\n    scale.rangeExtent = function() {                                                                                   // 7821\n      return d3_scaleExtent(ranger.a[0]);                                                                              // 7822\n    };                                                                                                                 // 7823\n    scale.copy = function() {                                                                                          // 7824\n      return d3_scale_ordinal(domain, ranger);                                                                         // 7825\n    };                                                                                                                 // 7826\n    return scale.domain(domain);                                                                                       // 7827\n  }                                                                                                                    // 7828\n  d3.scale.category10 = function() {                                                                                   // 7829\n    return d3.scale.ordinal().range(d3_category10);                                                                    // 7830\n  };                                                                                                                   // 7831\n  d3.scale.category20 = function() {                                                                                   // 7832\n    return d3.scale.ordinal().range(d3_category20);                                                                    // 7833\n  };                                                                                                                   // 7834\n  d3.scale.category20b = function() {                                                                                  // 7835\n    return d3.scale.ordinal().range(d3_category20b);                                                                   // 7836\n  };                                                                                                                   // 7837\n  d3.scale.category20c = function() {                                                                                  // 7838\n    return d3.scale.ordinal().range(d3_category20c);                                                                   // 7839\n  };                                                                                                                   // 7840\n  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);\n  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);\n  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);\n  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);\n  d3.scale.quantile = function() {                                                                                     // 7845\n    return d3_scale_quantile([], []);                                                                                  // 7846\n  };                                                                                                                   // 7847\n  function d3_scale_quantile(domain, range) {                                                                          // 7848\n    var thresholds;                                                                                                    // 7849\n    function rescale() {                                                                                               // 7850\n      var k = 0, q = range.length;                                                                                     // 7851\n      thresholds = [];                                                                                                 // 7852\n      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);                                                  // 7853\n      return scale;                                                                                                    // 7854\n    }                                                                                                                  // 7855\n    function scale(x) {                                                                                                // 7856\n      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];                                                      // 7857\n    }                                                                                                                  // 7858\n    scale.domain = function(x) {                                                                                       // 7859\n      if (!arguments.length) return domain;                                                                            // 7860\n      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);                                                 // 7861\n      return rescale();                                                                                                // 7862\n    };                                                                                                                 // 7863\n    scale.range = function(x) {                                                                                        // 7864\n      if (!arguments.length) return range;                                                                             // 7865\n      range = x;                                                                                                       // 7866\n      return rescale();                                                                                                // 7867\n    };                                                                                                                 // 7868\n    scale.quantiles = function() {                                                                                     // 7869\n      return thresholds;                                                                                               // 7870\n    };                                                                                                                 // 7871\n    scale.invertExtent = function(y) {                                                                                 // 7872\n      y = range.indexOf(y);                                                                                            // 7873\n      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];\n    };                                                                                                                 // 7875\n    scale.copy = function() {                                                                                          // 7876\n      return d3_scale_quantile(domain, range);                                                                         // 7877\n    };                                                                                                                 // 7878\n    return rescale();                                                                                                  // 7879\n  }                                                                                                                    // 7880\n  d3.scale.quantize = function() {                                                                                     // 7881\n    return d3_scale_quantize(0, 1, [ 0, 1 ]);                                                                          // 7882\n  };                                                                                                                   // 7883\n  function d3_scale_quantize(x0, x1, range) {                                                                          // 7884\n    var kx, i;                                                                                                         // 7885\n    function scale(x) {                                                                                                // 7886\n      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];                                               // 7887\n    }                                                                                                                  // 7888\n    function rescale() {                                                                                               // 7889\n      kx = range.length / (x1 - x0);                                                                                   // 7890\n      i = range.length - 1;                                                                                            // 7891\n      return scale;                                                                                                    // 7892\n    }                                                                                                                  // 7893\n    scale.domain = function(x) {                                                                                       // 7894\n      if (!arguments.length) return [ x0, x1 ];                                                                        // 7895\n      x0 = +x[0];                                                                                                      // 7896\n      x1 = +x[x.length - 1];                                                                                           // 7897\n      return rescale();                                                                                                // 7898\n    };                                                                                                                 // 7899\n    scale.range = function(x) {                                                                                        // 7900\n      if (!arguments.length) return range;                                                                             // 7901\n      range = x;                                                                                                       // 7902\n      return rescale();                                                                                                // 7903\n    };                                                                                                                 // 7904\n    scale.invertExtent = function(y) {                                                                                 // 7905\n      y = range.indexOf(y);                                                                                            // 7906\n      y = y < 0 ? NaN : y / kx + x0;                                                                                   // 7907\n      return [ y, y + 1 / kx ];                                                                                        // 7908\n    };                                                                                                                 // 7909\n    scale.copy = function() {                                                                                          // 7910\n      return d3_scale_quantize(x0, x1, range);                                                                         // 7911\n    };                                                                                                                 // 7912\n    return rescale();                                                                                                  // 7913\n  }                                                                                                                    // 7914\n  d3.scale.threshold = function() {                                                                                    // 7915\n    return d3_scale_threshold([ .5 ], [ 0, 1 ]);                                                                       // 7916\n  };                                                                                                                   // 7917\n  function d3_scale_threshold(domain, range) {                                                                         // 7918\n    function scale(x) {                                                                                                // 7919\n      if (x <= x) return range[d3.bisect(domain, x)];                                                                  // 7920\n    }                                                                                                                  // 7921\n    scale.domain = function(_) {                                                                                       // 7922\n      if (!arguments.length) return domain;                                                                            // 7923\n      domain = _;                                                                                                      // 7924\n      return scale;                                                                                                    // 7925\n    };                                                                                                                 // 7926\n    scale.range = function(_) {                                                                                        // 7927\n      if (!arguments.length) return range;                                                                             // 7928\n      range = _;                                                                                                       // 7929\n      return scale;                                                                                                    // 7930\n    };                                                                                                                 // 7931\n    scale.invertExtent = function(y) {                                                                                 // 7932\n      y = range.indexOf(y);                                                                                            // 7933\n      return [ domain[y - 1], domain[y] ];                                                                             // 7934\n    };                                                                                                                 // 7935\n    scale.copy = function() {                                                                                          // 7936\n      return d3_scale_threshold(domain, range);                                                                        // 7937\n    };                                                                                                                 // 7938\n    return scale;                                                                                                      // 7939\n  }                                                                                                                    // 7940\n  d3.scale.identity = function() {                                                                                     // 7941\n    return d3_scale_identity([ 0, 1 ]);                                                                                // 7942\n  };                                                                                                                   // 7943\n  function d3_scale_identity(domain) {                                                                                 // 7944\n    function identity(x) {                                                                                             // 7945\n      return +x;                                                                                                       // 7946\n    }                                                                                                                  // 7947\n    identity.invert = identity;                                                                                        // 7948\n    identity.domain = identity.range = function(x) {                                                                   // 7949\n      if (!arguments.length) return domain;                                                                            // 7950\n      domain = x.map(identity);                                                                                        // 7951\n      return identity;                                                                                                 // 7952\n    };                                                                                                                 // 7953\n    identity.ticks = function(m) {                                                                                     // 7954\n      return d3_scale_linearTicks(domain, m);                                                                          // 7955\n    };                                                                                                                 // 7956\n    identity.tickFormat = function(m, format) {                                                                        // 7957\n      return d3_scale_linearTickFormat(domain, m, format);                                                             // 7958\n    };                                                                                                                 // 7959\n    identity.copy = function() {                                                                                       // 7960\n      return d3_scale_identity(domain);                                                                                // 7961\n    };                                                                                                                 // 7962\n    return identity;                                                                                                   // 7963\n  }                                                                                                                    // 7964\n  d3.svg = {};                                                                                                         // 7965\n  function d3_zero() {                                                                                                 // 7966\n    return 0;                                                                                                          // 7967\n  }                                                                                                                    // 7968\n  d3.svg.arc = function() {                                                                                            // 7969\n    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;\n    function arc() {                                                                                                   // 7971\n      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;\n      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;                                                                          // 7973\n      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : \"\") + \"Z\";                        // 7974\n      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];                                   // 7975\n      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {                                                          // 7976\n        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);          // 7977\n        if (!cw) p1 *= -1;                                                                                             // 7978\n        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));                                                                  // 7979\n        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));                                                                  // 7980\n      }                                                                                                                // 7981\n      if (r1) {                                                                                                        // 7982\n        x0 = r1 * Math.cos(a0 + p1);                                                                                   // 7983\n        y0 = r1 * Math.sin(a0 + p1);                                                                                   // 7984\n        x1 = r1 * Math.cos(a1 - p1);                                                                                   // 7985\n        y1 = r1 * Math.sin(a1 - p1);                                                                                   // 7986\n        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;                                                              // 7987\n        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {                                                       // 7988\n          var h1 = (a0 + a1) / 2;                                                                                      // 7989\n          x0 = r1 * Math.cos(h1);                                                                                      // 7990\n          y0 = r1 * Math.sin(h1);                                                                                      // 7991\n          x1 = y1 = null;                                                                                              // 7992\n        }                                                                                                              // 7993\n      } else {                                                                                                         // 7994\n        x0 = y0 = 0;                                                                                                   // 7995\n      }                                                                                                                // 7996\n      if (r0) {                                                                                                        // 7997\n        x2 = r0 * Math.cos(a1 - p0);                                                                                   // 7998\n        y2 = r0 * Math.sin(a1 - p0);                                                                                   // 7999\n        x3 = r0 * Math.cos(a0 + p0);                                                                                   // 8000\n        y3 = r0 * Math.sin(a0 + p0);                                                                                   // 8001\n        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;                                                              // 8002\n        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {                                                   // 8003\n          var h0 = (a0 + a1) / 2;                                                                                      // 8004\n          x2 = r0 * Math.cos(h0);                                                                                      // 8005\n          y2 = r0 * Math.sin(h0);                                                                                      // 8006\n          x3 = y3 = null;                                                                                              // 8007\n        }                                                                                                              // 8008\n      } else {                                                                                                         // 8009\n        x2 = y2 = 0;                                                                                                   // 8010\n      }                                                                                                                // 8011\n      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {             // 8012\n        cr = r0 < r1 ^ cw ? 0 : 1;                                                                                     // 8013\n        var rc1 = rc, rc0 = rc;                                                                                        // 8014\n        if (da < π) {                                                                                                  // 8015\n          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));                                                                    // 8017\n          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));                                                                    // 8018\n        }                                                                                                              // 8019\n        if (x1 != null) {                                                                                              // 8020\n          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);\n          if (rc === rc1) {                                                                                            // 8022\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t30[1], \"A\", r1, \",\", r1, \" 0 \", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), \",\", cw, \" \", t12[1], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t12[0]);\n          } else {                                                                                                     // 8024\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 1,\", cr, \" \", t12[0]);                                      // 8025\n          }                                                                                                            // 8026\n        } else {                                                                                                       // 8027\n          path.push(\"M\", x0, \",\", y0);                                                                                 // 8028\n        }                                                                                                              // 8029\n        if (x3 != null) {                                                                                              // 8030\n          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);\n          if (rc === rc0) {                                                                                            // 8032\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t21[1], \"A\", r0, \",\", r0, \" 0 \", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), \",\", 1 - cw, \" \", t03[1], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          } else {                                                                                                     // 8034\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);                                      // 8035\n          }                                                                                                            // 8036\n        } else {                                                                                                       // 8037\n          path.push(\"L\", x2, \",\", y2);                                                                                 // 8038\n        }                                                                                                              // 8039\n      } else {                                                                                                         // 8040\n        path.push(\"M\", x0, \",\", y0);                                                                                   // 8041\n        if (x1 != null) path.push(\"A\", r1, \",\", r1, \" 0 \", l1, \",\", cw, \" \", x1, \",\", y1);                             // 8042\n        path.push(\"L\", x2, \",\", y2);                                                                                   // 8043\n        if (x3 != null) path.push(\"A\", r0, \",\", r0, \" 0 \", l0, \",\", 1 - cw, \" \", x3, \",\", y3);                         // 8044\n      }                                                                                                                // 8045\n      path.push(\"Z\");                                                                                                  // 8046\n      return path.join(\"\");                                                                                            // 8047\n    }                                                                                                                  // 8048\n    function circleSegment(r1, cw) {                                                                                   // 8049\n      return \"M0,\" + r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + -r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + r1;\n    }                                                                                                                  // 8051\n    arc.innerRadius = function(v) {                                                                                    // 8052\n      if (!arguments.length) return innerRadius;                                                                       // 8053\n      innerRadius = d3_functor(v);                                                                                     // 8054\n      return arc;                                                                                                      // 8055\n    };                                                                                                                 // 8056\n    arc.outerRadius = function(v) {                                                                                    // 8057\n      if (!arguments.length) return outerRadius;                                                                       // 8058\n      outerRadius = d3_functor(v);                                                                                     // 8059\n      return arc;                                                                                                      // 8060\n    };                                                                                                                 // 8061\n    arc.cornerRadius = function(v) {                                                                                   // 8062\n      if (!arguments.length) return cornerRadius;                                                                      // 8063\n      cornerRadius = d3_functor(v);                                                                                    // 8064\n      return arc;                                                                                                      // 8065\n    };                                                                                                                 // 8066\n    arc.padRadius = function(v) {                                                                                      // 8067\n      if (!arguments.length) return padRadius;                                                                         // 8068\n      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);                                                // 8069\n      return arc;                                                                                                      // 8070\n    };                                                                                                                 // 8071\n    arc.startAngle = function(v) {                                                                                     // 8072\n      if (!arguments.length) return startAngle;                                                                        // 8073\n      startAngle = d3_functor(v);                                                                                      // 8074\n      return arc;                                                                                                      // 8075\n    };                                                                                                                 // 8076\n    arc.endAngle = function(v) {                                                                                       // 8077\n      if (!arguments.length) return endAngle;                                                                          // 8078\n      endAngle = d3_functor(v);                                                                                        // 8079\n      return arc;                                                                                                      // 8080\n    };                                                                                                                 // 8081\n    arc.padAngle = function(v) {                                                                                       // 8082\n      if (!arguments.length) return padAngle;                                                                          // 8083\n      padAngle = d3_functor(v);                                                                                        // 8084\n      return arc;                                                                                                      // 8085\n    };                                                                                                                 // 8086\n    arc.centroid = function() {                                                                                        // 8087\n      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;\n      return [ Math.cos(a) * r, Math.sin(a) * r ];                                                                     // 8089\n    };                                                                                                                 // 8090\n    return arc;                                                                                                        // 8091\n  };                                                                                                                   // 8092\n  var d3_svg_arcAuto = \"auto\";                                                                                         // 8093\n  function d3_svg_arcInnerRadius(d) {                                                                                  // 8094\n    return d.innerRadius;                                                                                              // 8095\n  }                                                                                                                    // 8096\n  function d3_svg_arcOuterRadius(d) {                                                                                  // 8097\n    return d.outerRadius;                                                                                              // 8098\n  }                                                                                                                    // 8099\n  function d3_svg_arcStartAngle(d) {                                                                                   // 8100\n    return d.startAngle;                                                                                               // 8101\n  }                                                                                                                    // 8102\n  function d3_svg_arcEndAngle(d) {                                                                                     // 8103\n    return d.endAngle;                                                                                                 // 8104\n  }                                                                                                                    // 8105\n  function d3_svg_arcPadAngle(d) {                                                                                     // 8106\n    return d && d.padAngle;                                                                                            // 8107\n  }                                                                                                                    // 8108\n  function d3_svg_arcSweep(x0, y0, x1, y1) {                                                                           // 8109\n    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;                                                                // 8110\n  }                                                                                                                    // 8111\n  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {                                                              // 8112\n    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;\n    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;                                           // 8114\n    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];                                                 // 8115\n  }                                                                                                                    // 8116\n  function d3_svg_line(projection) {                                                                                   // 8117\n    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;\n    function line(data) {                                                                                              // 8119\n      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);              // 8120\n      function segment() {                                                                                             // 8121\n        segments.push(\"M\", interpolate(projection(points), tension));                                                  // 8122\n      }                                                                                                                // 8123\n      while (++i < n) {                                                                                                // 8124\n        if (defined.call(this, d = data[i], i)) {                                                                      // 8125\n          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);                                                 // 8126\n        } else if (points.length) {                                                                                    // 8127\n          segment();                                                                                                   // 8128\n          points = [];                                                                                                 // 8129\n        }                                                                                                              // 8130\n      }                                                                                                                // 8131\n      if (points.length) segment();                                                                                    // 8132\n      return segments.length ? segments.join(\"\") : null;                                                               // 8133\n    }                                                                                                                  // 8134\n    line.x = function(_) {                                                                                             // 8135\n      if (!arguments.length) return x;                                                                                 // 8136\n      x = _;                                                                                                           // 8137\n      return line;                                                                                                     // 8138\n    };                                                                                                                 // 8139\n    line.y = function(_) {                                                                                             // 8140\n      if (!arguments.length) return y;                                                                                 // 8141\n      y = _;                                                                                                           // 8142\n      return line;                                                                                                     // 8143\n    };                                                                                                                 // 8144\n    line.defined = function(_) {                                                                                       // 8145\n      if (!arguments.length) return defined;                                                                           // 8146\n      defined = _;                                                                                                     // 8147\n      return line;                                                                                                     // 8148\n    };                                                                                                                 // 8149\n    line.interpolate = function(_) {                                                                                   // 8150\n      if (!arguments.length) return interpolateKey;                                                                    // 8151\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      return line;                                                                                                     // 8153\n    };                                                                                                                 // 8154\n    line.tension = function(_) {                                                                                       // 8155\n      if (!arguments.length) return tension;                                                                           // 8156\n      tension = _;                                                                                                     // 8157\n      return line;                                                                                                     // 8158\n    };                                                                                                                 // 8159\n    return line;                                                                                                       // 8160\n  }                                                                                                                    // 8161\n  d3.svg.line = function() {                                                                                           // 8162\n    return d3_svg_line(d3_identity);                                                                                   // 8163\n  };                                                                                                                   // 8164\n  var d3_svg_lineInterpolators = d3.map({                                                                              // 8165\n    linear: d3_svg_lineLinear,                                                                                         // 8166\n    \"linear-closed\": d3_svg_lineLinearClosed,                                                                          // 8167\n    step: d3_svg_lineStep,                                                                                             // 8168\n    \"step-before\": d3_svg_lineStepBefore,                                                                              // 8169\n    \"step-after\": d3_svg_lineStepAfter,                                                                                // 8170\n    basis: d3_svg_lineBasis,                                                                                           // 8171\n    \"basis-open\": d3_svg_lineBasisOpen,                                                                                // 8172\n    \"basis-closed\": d3_svg_lineBasisClosed,                                                                            // 8173\n    bundle: d3_svg_lineBundle,                                                                                         // 8174\n    cardinal: d3_svg_lineCardinal,                                                                                     // 8175\n    \"cardinal-open\": d3_svg_lineCardinalOpen,                                                                          // 8176\n    \"cardinal-closed\": d3_svg_lineCardinalClosed,                                                                      // 8177\n    monotone: d3_svg_lineMonotone                                                                                      // 8178\n  });                                                                                                                  // 8179\n  d3_svg_lineInterpolators.forEach(function(key, value) {                                                              // 8180\n    value.key = key;                                                                                                   // 8181\n    value.closed = /-closed$/.test(key);                                                                               // 8182\n  });                                                                                                                  // 8183\n  function d3_svg_lineLinear(points) {                                                                                 // 8184\n    return points.length > 1 ? points.join(\"L\") : points + \"Z\";                                                        // 8185\n  }                                                                                                                    // 8186\n  function d3_svg_lineLinearClosed(points) {                                                                           // 8187\n    return points.join(\"L\") + \"Z\";                                                                                     // 8188\n  }                                                                                                                    // 8189\n  function d3_svg_lineStep(points) {                                                                                   // 8190\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];                                           // 8191\n    while (++i < n) path.push(\"H\", (p[0] + (p = points[i])[0]) / 2, \"V\", p[1]);                                        // 8192\n    if (n > 1) path.push(\"H\", p[0]);                                                                                   // 8193\n    return path.join(\"\");                                                                                              // 8194\n  }                                                                                                                    // 8195\n  function d3_svg_lineStepBefore(points) {                                                                             // 8196\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];                                           // 8197\n    while (++i < n) path.push(\"V\", (p = points[i])[1], \"H\", p[0]);                                                     // 8198\n    return path.join(\"\");                                                                                              // 8199\n  }                                                                                                                    // 8200\n  function d3_svg_lineStepAfter(points) {                                                                              // 8201\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];                                           // 8202\n    while (++i < n) path.push(\"H\", (p = points[i])[0], \"V\", p[1]);                                                     // 8203\n    return path.join(\"\");                                                                                              // 8204\n  }                                                                                                                    // 8205\n  function d3_svg_lineCardinalOpen(points, tension) {                                                                  // 8206\n    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));\n  }                                                                                                                    // 8208\n  function d3_svg_lineCardinalClosed(points, tension) {                                                                // 8209\n    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), \n    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));       // 8211\n  }                                                                                                                    // 8212\n  function d3_svg_lineCardinal(points, tension) {                                                                      // 8213\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));\n  }                                                                                                                    // 8215\n  function d3_svg_lineHermite(points, tangents) {                                                                      // 8216\n    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {             // 8217\n      return d3_svg_lineLinear(points);                                                                                // 8218\n    }                                                                                                                  // 8219\n    var quad = points.length != tangents.length, path = \"\", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;\n    if (quad) {                                                                                                        // 8221\n      path += \"Q\" + (p[0] - t0[0] * 2 / 3) + \",\" + (p[1] - t0[1] * 2 / 3) + \",\" + p[0] + \",\" + p[1];                   // 8222\n      p0 = points[1];                                                                                                  // 8223\n      pi = 2;                                                                                                          // 8224\n    }                                                                                                                  // 8225\n    if (tangents.length > 1) {                                                                                         // 8226\n      t = tangents[1];                                                                                                 // 8227\n      p = points[pi];                                                                                                  // 8228\n      pi++;                                                                                                            // 8229\n      path += \"C\" + (p0[0] + t0[0]) + \",\" + (p0[1] + t0[1]) + \",\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      for (var i = 2; i < tangents.length; i++, pi++) {                                                                // 8231\n        p = points[pi];                                                                                                // 8232\n        t = tangents[i];                                                                                               // 8233\n        path += \"S\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];                                   // 8234\n      }                                                                                                                // 8235\n    }                                                                                                                  // 8236\n    if (quad) {                                                                                                        // 8237\n      var lp = points[pi];                                                                                             // 8238\n      path += \"Q\" + (p[0] + t[0] * 2 / 3) + \",\" + (p[1] + t[1] * 2 / 3) + \",\" + lp[0] + \",\" + lp[1];                   // 8239\n    }                                                                                                                  // 8240\n    return path;                                                                                                       // 8241\n  }                                                                                                                    // 8242\n  function d3_svg_lineCardinalTangents(points, tension) {                                                              // 8243\n    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;            // 8244\n    while (++i < n) {                                                                                                  // 8245\n      p0 = p1;                                                                                                         // 8246\n      p1 = p2;                                                                                                         // 8247\n      p2 = points[i];                                                                                                  // 8248\n      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);                                                     // 8249\n    }                                                                                                                  // 8250\n    return tangents;                                                                                                   // 8251\n  }                                                                                                                    // 8252\n  function d3_svg_lineBasis(points) {                                                                                  // 8253\n    if (points.length < 3) return d3_svg_lineLinear(points);                                                           // 8254\n    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, \",\", y0, \"L\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    points.push(points[n - 1]);                                                                                        // 8256\n    while (++i <= n) {                                                                                                 // 8257\n      pi = points[i];                                                                                                  // 8258\n      px.shift();                                                                                                      // 8259\n      px.push(pi[0]);                                                                                                  // 8260\n      py.shift();                                                                                                      // 8261\n      py.push(pi[1]);                                                                                                  // 8262\n      d3_svg_lineBasisBezier(path, px, py);                                                                            // 8263\n    }                                                                                                                  // 8264\n    points.pop();                                                                                                      // 8265\n    path.push(\"L\", pi);                                                                                                // 8266\n    return path.join(\"\");                                                                                              // 8267\n  }                                                                                                                    // 8268\n  function d3_svg_lineBasisOpen(points) {                                                                              // 8269\n    if (points.length < 4) return d3_svg_lineLinear(points);                                                           // 8270\n    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];                                              // 8271\n    while (++i < 3) {                                                                                                  // 8272\n      pi = points[i];                                                                                                  // 8273\n      px.push(pi[0]);                                                                                                  // 8274\n      py.push(pi[1]);                                                                                                  // 8275\n    }                                                                                                                  // 8276\n    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + \",\" + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));      // 8277\n    --i;                                                                                                               // 8278\n    while (++i < n) {                                                                                                  // 8279\n      pi = points[i];                                                                                                  // 8280\n      px.shift();                                                                                                      // 8281\n      px.push(pi[0]);                                                                                                  // 8282\n      py.shift();                                                                                                      // 8283\n      py.push(pi[1]);                                                                                                  // 8284\n      d3_svg_lineBasisBezier(path, px, py);                                                                            // 8285\n    }                                                                                                                  // 8286\n    return path.join(\"\");                                                                                              // 8287\n  }                                                                                                                    // 8288\n  function d3_svg_lineBasisClosed(points) {                                                                            // 8289\n    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];                                              // 8290\n    while (++i < 4) {                                                                                                  // 8291\n      pi = points[i % n];                                                                                              // 8292\n      px.push(pi[0]);                                                                                                  // 8293\n      py.push(pi[1]);                                                                                                  // 8294\n    }                                                                                                                  // 8295\n    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];        // 8296\n    --i;                                                                                                               // 8297\n    while (++i < m) {                                                                                                  // 8298\n      pi = points[i % n];                                                                                              // 8299\n      px.shift();                                                                                                      // 8300\n      px.push(pi[0]);                                                                                                  // 8301\n      py.shift();                                                                                                      // 8302\n      py.push(pi[1]);                                                                                                  // 8303\n      d3_svg_lineBasisBezier(path, px, py);                                                                            // 8304\n    }                                                                                                                  // 8305\n    return path.join(\"\");                                                                                              // 8306\n  }                                                                                                                    // 8307\n  function d3_svg_lineBundle(points, tension) {                                                                        // 8308\n    var n = points.length - 1;                                                                                         // 8309\n    if (n) {                                                                                                           // 8310\n      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;          // 8311\n      while (++i <= n) {                                                                                               // 8312\n        p = points[i];                                                                                                 // 8313\n        t = i / n;                                                                                                     // 8314\n        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);                                                         // 8315\n        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);                                                         // 8316\n      }                                                                                                                // 8317\n    }                                                                                                                  // 8318\n    return d3_svg_lineBasis(points);                                                                                   // 8319\n  }                                                                                                                    // 8320\n  function d3_svg_lineDot4(a, b) {                                                                                     // 8321\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];                                                      // 8322\n  }                                                                                                                    // 8323\n  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];\n  function d3_svg_lineBasisBezier(path, x, y) {                                                                        // 8325\n    path.push(\"C\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));\n  }                                                                                                                    // 8327\n  function d3_svg_lineSlope(p0, p1) {                                                                                  // 8328\n    return (p1[1] - p0[1]) / (p1[0] - p0[0]);                                                                          // 8329\n  }                                                                                                                    // 8330\n  function d3_svg_lineFiniteDifferences(points) {                                                                      // 8331\n    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);     // 8332\n    while (++i < j) {                                                                                                  // 8333\n      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;                                            // 8334\n    }                                                                                                                  // 8335\n    m[i] = d;                                                                                                          // 8336\n    return m;                                                                                                          // 8337\n  }                                                                                                                    // 8338\n  function d3_svg_lineMonotoneTangents(points) {                                                                       // 8339\n    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;            // 8340\n    while (++i < j) {                                                                                                  // 8341\n      d = d3_svg_lineSlope(points[i], points[i + 1]);                                                                  // 8342\n      if (abs(d) < ε) {                                                                                                // 8343\n        m[i] = m[i + 1] = 0;                                                                                           // 8344\n      } else {                                                                                                         // 8345\n        a = m[i] / d;                                                                                                  // 8346\n        b = m[i + 1] / d;                                                                                              // 8347\n        s = a * a + b * b;                                                                                             // 8348\n        if (s > 9) {                                                                                                   // 8349\n          s = d * 3 / Math.sqrt(s);                                                                                    // 8350\n          m[i] = s * a;                                                                                                // 8351\n          m[i + 1] = s * b;                                                                                            // 8352\n        }                                                                                                              // 8353\n      }                                                                                                                // 8354\n    }                                                                                                                  // 8355\n    i = -1;                                                                                                            // 8356\n    while (++i <= j) {                                                                                                 // 8357\n      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));                   // 8358\n      tangents.push([ s || 0, m[i] * s || 0 ]);                                                                        // 8359\n    }                                                                                                                  // 8360\n    return tangents;                                                                                                   // 8361\n  }                                                                                                                    // 8362\n  function d3_svg_lineMonotone(points) {                                                                               // 8363\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));\n  }                                                                                                                    // 8365\n  d3.svg.line.radial = function() {                                                                                    // 8366\n    var line = d3_svg_line(d3_svg_lineRadial);                                                                         // 8367\n    line.radius = line.x, delete line.x;                                                                               // 8368\n    line.angle = line.y, delete line.y;                                                                                // 8369\n    return line;                                                                                                       // 8370\n  };                                                                                                                   // 8371\n  function d3_svg_lineRadial(points) {                                                                                 // 8372\n    var point, i = -1, n = points.length, r, a;                                                                        // 8373\n    while (++i < n) {                                                                                                  // 8374\n      point = points[i];                                                                                               // 8375\n      r = point[0];                                                                                                    // 8376\n      a = point[1] - halfπ;                                                                                            // 8377\n      point[0] = r * Math.cos(a);                                                                                      // 8378\n      point[1] = r * Math.sin(a);                                                                                      // 8379\n    }                                                                                                                  // 8380\n    return points;                                                                                                     // 8381\n  }                                                                                                                    // 8382\n  function d3_svg_area(projection) {                                                                                   // 8383\n    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = \"L\", tension = .7;\n    function area(data) {                                                                                              // 8385\n      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {\n        return x;                                                                                                      // 8387\n      } : d3_functor(x1), fy1 = y0 === y1 ? function() {                                                               // 8388\n        return y;                                                                                                      // 8389\n      } : d3_functor(y1), x, y;                                                                                        // 8390\n      function segment() {                                                                                             // 8391\n        segments.push(\"M\", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), \"Z\");\n      }                                                                                                                // 8393\n      while (++i < n) {                                                                                                // 8394\n        if (defined.call(this, d = data[i], i)) {                                                                      // 8395\n          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);                                      // 8396\n          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);                                              // 8397\n        } else if (points0.length) {                                                                                   // 8398\n          segment();                                                                                                   // 8399\n          points0 = [];                                                                                                // 8400\n          points1 = [];                                                                                                // 8401\n        }                                                                                                              // 8402\n      }                                                                                                                // 8403\n      if (points0.length) segment();                                                                                   // 8404\n      return segments.length ? segments.join(\"\") : null;                                                               // 8405\n    }                                                                                                                  // 8406\n    area.x = function(_) {                                                                                             // 8407\n      if (!arguments.length) return x1;                                                                                // 8408\n      x0 = x1 = _;                                                                                                     // 8409\n      return area;                                                                                                     // 8410\n    };                                                                                                                 // 8411\n    area.x0 = function(_) {                                                                                            // 8412\n      if (!arguments.length) return x0;                                                                                // 8413\n      x0 = _;                                                                                                          // 8414\n      return area;                                                                                                     // 8415\n    };                                                                                                                 // 8416\n    area.x1 = function(_) {                                                                                            // 8417\n      if (!arguments.length) return x1;                                                                                // 8418\n      x1 = _;                                                                                                          // 8419\n      return area;                                                                                                     // 8420\n    };                                                                                                                 // 8421\n    area.y = function(_) {                                                                                             // 8422\n      if (!arguments.length) return y1;                                                                                // 8423\n      y0 = y1 = _;                                                                                                     // 8424\n      return area;                                                                                                     // 8425\n    };                                                                                                                 // 8426\n    area.y0 = function(_) {                                                                                            // 8427\n      if (!arguments.length) return y0;                                                                                // 8428\n      y0 = _;                                                                                                          // 8429\n      return area;                                                                                                     // 8430\n    };                                                                                                                 // 8431\n    area.y1 = function(_) {                                                                                            // 8432\n      if (!arguments.length) return y1;                                                                                // 8433\n      y1 = _;                                                                                                          // 8434\n      return area;                                                                                                     // 8435\n    };                                                                                                                 // 8436\n    area.defined = function(_) {                                                                                       // 8437\n      if (!arguments.length) return defined;                                                                           // 8438\n      defined = _;                                                                                                     // 8439\n      return area;                                                                                                     // 8440\n    };                                                                                                                 // 8441\n    area.interpolate = function(_) {                                                                                   // 8442\n      if (!arguments.length) return interpolateKey;                                                                    // 8443\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      interpolateReverse = interpolate.reverse || interpolate;                                                         // 8445\n      L = interpolate.closed ? \"M\" : \"L\";                                                                              // 8446\n      return area;                                                                                                     // 8447\n    };                                                                                                                 // 8448\n    area.tension = function(_) {                                                                                       // 8449\n      if (!arguments.length) return tension;                                                                           // 8450\n      tension = _;                                                                                                     // 8451\n      return area;                                                                                                     // 8452\n    };                                                                                                                 // 8453\n    return area;                                                                                                       // 8454\n  }                                                                                                                    // 8455\n  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;                                                                // 8456\n  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;                                                                // 8457\n  d3.svg.area = function() {                                                                                           // 8458\n    return d3_svg_area(d3_identity);                                                                                   // 8459\n  };                                                                                                                   // 8460\n  d3.svg.area.radial = function() {                                                                                    // 8461\n    var area = d3_svg_area(d3_svg_lineRadial);                                                                         // 8462\n    area.radius = area.x, delete area.x;                                                                               // 8463\n    area.innerRadius = area.x0, delete area.x0;                                                                        // 8464\n    area.outerRadius = area.x1, delete area.x1;                                                                        // 8465\n    area.angle = area.y, delete area.y;                                                                                // 8466\n    area.startAngle = area.y0, delete area.y0;                                                                         // 8467\n    area.endAngle = area.y1, delete area.y1;                                                                           // 8468\n    return area;                                                                                                       // 8469\n  };                                                                                                                   // 8470\n  d3.svg.chord = function() {                                                                                          // 8471\n    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;\n    function chord(d, i) {                                                                                             // 8473\n      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);                                          // 8474\n      return \"M\" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + \"Z\";\n    }                                                                                                                  // 8476\n    function subgroup(self, f, d, i) {                                                                                 // 8477\n      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;\n      return {                                                                                                         // 8479\n        r: r,                                                                                                          // 8480\n        a0: a0,                                                                                                        // 8481\n        a1: a1,                                                                                                        // 8482\n        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],                                                                    // 8483\n        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]                                                                     // 8484\n      };                                                                                                               // 8485\n    }                                                                                                                  // 8486\n    function equals(a, b) {                                                                                            // 8487\n      return a.a0 == b.a0 && a.a1 == b.a1;                                                                             // 8488\n    }                                                                                                                  // 8489\n    function arc(r, p, a) {                                                                                            // 8490\n      return \"A\" + r + \",\" + r + \" 0 \" + +(a > π) + \",1 \" + p;                                                         // 8491\n    }                                                                                                                  // 8492\n    function curve(r0, p0, r1, p1) {                                                                                   // 8493\n      return \"Q 0,0 \" + p1;                                                                                            // 8494\n    }                                                                                                                  // 8495\n    chord.radius = function(v) {                                                                                       // 8496\n      if (!arguments.length) return radius;                                                                            // 8497\n      radius = d3_functor(v);                                                                                          // 8498\n      return chord;                                                                                                    // 8499\n    };                                                                                                                 // 8500\n    chord.source = function(v) {                                                                                       // 8501\n      if (!arguments.length) return source;                                                                            // 8502\n      source = d3_functor(v);                                                                                          // 8503\n      return chord;                                                                                                    // 8504\n    };                                                                                                                 // 8505\n    chord.target = function(v) {                                                                                       // 8506\n      if (!arguments.length) return target;                                                                            // 8507\n      target = d3_functor(v);                                                                                          // 8508\n      return chord;                                                                                                    // 8509\n    };                                                                                                                 // 8510\n    chord.startAngle = function(v) {                                                                                   // 8511\n      if (!arguments.length) return startAngle;                                                                        // 8512\n      startAngle = d3_functor(v);                                                                                      // 8513\n      return chord;                                                                                                    // 8514\n    };                                                                                                                 // 8515\n    chord.endAngle = function(v) {                                                                                     // 8516\n      if (!arguments.length) return endAngle;                                                                          // 8517\n      endAngle = d3_functor(v);                                                                                        // 8518\n      return chord;                                                                                                    // 8519\n    };                                                                                                                 // 8520\n    return chord;                                                                                                      // 8521\n  };                                                                                                                   // 8522\n  function d3_svg_chordRadius(d) {                                                                                     // 8523\n    return d.radius;                                                                                                   // 8524\n  }                                                                                                                    // 8525\n  d3.svg.diagonal = function() {                                                                                       // 8526\n    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;                                // 8527\n    function diagonal(d, i) {                                                                                          // 8528\n      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {               // 8529\n        x: p0.x,                                                                                                       // 8530\n        y: m                                                                                                           // 8531\n      }, {                                                                                                             // 8532\n        x: p3.x,                                                                                                       // 8533\n        y: m                                                                                                           // 8534\n      }, p3 ];                                                                                                         // 8535\n      p = p.map(projection);                                                                                           // 8536\n      return \"M\" + p[0] + \"C\" + p[1] + \" \" + p[2] + \" \" + p[3];                                                        // 8537\n    }                                                                                                                  // 8538\n    diagonal.source = function(x) {                                                                                    // 8539\n      if (!arguments.length) return source;                                                                            // 8540\n      source = d3_functor(x);                                                                                          // 8541\n      return diagonal;                                                                                                 // 8542\n    };                                                                                                                 // 8543\n    diagonal.target = function(x) {                                                                                    // 8544\n      if (!arguments.length) return target;                                                                            // 8545\n      target = d3_functor(x);                                                                                          // 8546\n      return diagonal;                                                                                                 // 8547\n    };                                                                                                                 // 8548\n    diagonal.projection = function(x) {                                                                                // 8549\n      if (!arguments.length) return projection;                                                                        // 8550\n      projection = x;                                                                                                  // 8551\n      return diagonal;                                                                                                 // 8552\n    };                                                                                                                 // 8553\n    return diagonal;                                                                                                   // 8554\n  };                                                                                                                   // 8555\n  function d3_svg_diagonalProjection(d) {                                                                              // 8556\n    return [ d.x, d.y ];                                                                                               // 8557\n  }                                                                                                                    // 8558\n  d3.svg.diagonal.radial = function() {                                                                                // 8559\n    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;       // 8560\n    diagonal.projection = function(x) {                                                                                // 8561\n      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;             // 8562\n    };                                                                                                                 // 8563\n    return diagonal;                                                                                                   // 8564\n  };                                                                                                                   // 8565\n  function d3_svg_diagonalRadialProjection(projection) {                                                               // 8566\n    return function() {                                                                                                // 8567\n      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;                                           // 8568\n      return [ r * Math.cos(a), r * Math.sin(a) ];                                                                     // 8569\n    };                                                                                                                 // 8570\n  }                                                                                                                    // 8571\n  d3.svg.symbol = function() {                                                                                         // 8572\n    var type = d3_svg_symbolType, size = d3_svg_symbolSize;                                                            // 8573\n    function symbol(d, i) {                                                                                            // 8574\n      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));                // 8575\n    }                                                                                                                  // 8576\n    symbol.type = function(x) {                                                                                        // 8577\n      if (!arguments.length) return type;                                                                              // 8578\n      type = d3_functor(x);                                                                                            // 8579\n      return symbol;                                                                                                   // 8580\n    };                                                                                                                 // 8581\n    symbol.size = function(x) {                                                                                        // 8582\n      if (!arguments.length) return size;                                                                              // 8583\n      size = d3_functor(x);                                                                                            // 8584\n      return symbol;                                                                                                   // 8585\n    };                                                                                                                 // 8586\n    return symbol;                                                                                                     // 8587\n  };                                                                                                                   // 8588\n  function d3_svg_symbolSize() {                                                                                       // 8589\n    return 64;                                                                                                         // 8590\n  }                                                                                                                    // 8591\n  function d3_svg_symbolType() {                                                                                       // 8592\n    return \"circle\";                                                                                                   // 8593\n  }                                                                                                                    // 8594\n  function d3_svg_symbolCircle(size) {                                                                                 // 8595\n    var r = Math.sqrt(size / π);                                                                                       // 8596\n    return \"M0,\" + r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + -r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + r + \"Z\";               // 8597\n  }                                                                                                                    // 8598\n  var d3_svg_symbols = d3.map({                                                                                        // 8599\n    circle: d3_svg_symbolCircle,                                                                                       // 8600\n    cross: function(size) {                                                                                            // 8601\n      var r = Math.sqrt(size / 5) / 2;                                                                                 // 8602\n      return \"M\" + -3 * r + \",\" + -r + \"H\" + -r + \"V\" + -3 * r + \"H\" + r + \"V\" + -r + \"H\" + 3 * r + \"V\" + r + \"H\" + r + \"V\" + 3 * r + \"H\" + -r + \"V\" + r + \"H\" + -3 * r + \"Z\";\n    },                                                                                                                 // 8604\n    diamond: function(size) {                                                                                          // 8605\n      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;                               // 8606\n      return \"M0,\" + -ry + \"L\" + rx + \",0\" + \" 0,\" + ry + \" \" + -rx + \",0\" + \"Z\";                                      // 8607\n    },                                                                                                                 // 8608\n    square: function(size) {                                                                                           // 8609\n      var r = Math.sqrt(size) / 2;                                                                                     // 8610\n      return \"M\" + -r + \",\" + -r + \"L\" + r + \",\" + -r + \" \" + r + \",\" + r + \" \" + -r + \",\" + r + \"Z\";                  // 8611\n    },                                                                                                                 // 8612\n    \"triangle-down\": function(size) {                                                                                  // 8613\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;                                 // 8614\n      return \"M0,\" + ry + \"L\" + rx + \",\" + -ry + \" \" + -rx + \",\" + -ry + \"Z\";                                          // 8615\n    },                                                                                                                 // 8616\n    \"triangle-up\": function(size) {                                                                                    // 8617\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;                                 // 8618\n      return \"M0,\" + -ry + \"L\" + rx + \",\" + ry + \" \" + -rx + \",\" + ry + \"Z\";                                           // 8619\n    }                                                                                                                  // 8620\n  });                                                                                                                  // 8621\n  d3.svg.symbolTypes = d3_svg_symbols.keys();                                                                          // 8622\n  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);                               // 8623\n  d3_selectionPrototype.transition = function(name) {                                                                  // 8624\n    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {\n      time: Date.now(),                                                                                                // 8626\n      ease: d3_ease_cubicInOut,                                                                                        // 8627\n      delay: 0,                                                                                                        // 8628\n      duration: 250                                                                                                    // 8629\n    };                                                                                                                 // 8630\n    for (var j = -1, m = this.length; ++j < m; ) {                                                                     // 8631\n      subgroups.push(subgroup = []);                                                                                   // 8632\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {                                                 // 8633\n        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);                                           // 8634\n        subgroup.push(node);                                                                                           // 8635\n      }                                                                                                                // 8636\n    }                                                                                                                  // 8637\n    return d3_transition(subgroups, ns, id);                                                                           // 8638\n  };                                                                                                                   // 8639\n  d3_selectionPrototype.interrupt = function(name) {                                                                   // 8640\n    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));  // 8641\n  };                                                                                                                   // 8642\n  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());                                     // 8643\n  function d3_selection_interruptNS(ns) {                                                                              // 8644\n    return function() {                                                                                                // 8645\n      var lock, activeId, active;                                                                                      // 8646\n      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {                                              // 8647\n        active.timer.c = null;                                                                                         // 8648\n        active.timer.t = NaN;                                                                                          // 8649\n        if (--lock.count) delete lock[activeId]; else delete this[ns];                                                 // 8650\n        lock.active += .5;                                                                                             // 8651\n        active.event && active.event.interrupt.call(this, this.__data__, active.index);                                // 8652\n      }                                                                                                                // 8653\n    };                                                                                                                 // 8654\n  }                                                                                                                    // 8655\n  function d3_transition(groups, ns, id) {                                                                             // 8656\n    d3_subclass(groups, d3_transitionPrototype);                                                                       // 8657\n    groups.namespace = ns;                                                                                             // 8658\n    groups.id = id;                                                                                                    // 8659\n    return groups;                                                                                                     // 8660\n  }                                                                                                                    // 8661\n  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;                  // 8662\n  d3_transitionPrototype.call = d3_selectionPrototype.call;                                                            // 8663\n  d3_transitionPrototype.empty = d3_selectionPrototype.empty;                                                          // 8664\n  d3_transitionPrototype.node = d3_selectionPrototype.node;                                                            // 8665\n  d3_transitionPrototype.size = d3_selectionPrototype.size;                                                            // 8666\n  d3.transition = function(selection, name) {                                                                          // 8667\n    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);\n  };                                                                                                                   // 8669\n  d3.transition.prototype = d3_transitionPrototype;                                                                    // 8670\n  d3_transitionPrototype.select = function(selector) {                                                                 // 8671\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;                                    // 8672\n    selector = d3_selection_selector(selector);                                                                        // 8673\n    for (var j = -1, m = this.length; ++j < m; ) {                                                                     // 8674\n      subgroups.push(subgroup = []);                                                                                   // 8675\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {                                                 // 8676\n        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {                               // 8677\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;                                                    // 8678\n          d3_transitionNode(subnode, i, ns, id, node[ns][id]);                                                         // 8679\n          subgroup.push(subnode);                                                                                      // 8680\n        } else {                                                                                                       // 8681\n          subgroup.push(null);                                                                                         // 8682\n        }                                                                                                              // 8683\n      }                                                                                                                // 8684\n    }                                                                                                                  // 8685\n    return d3_transition(subgroups, ns, id);                                                                           // 8686\n  };                                                                                                                   // 8687\n  d3_transitionPrototype.selectAll = function(selector) {                                                              // 8688\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;              // 8689\n    selector = d3_selection_selectorAll(selector);                                                                     // 8690\n    for (var j = -1, m = this.length; ++j < m; ) {                                                                     // 8691\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {                                                 // 8692\n        if (node = group[i]) {                                                                                         // 8693\n          transition = node[ns][id];                                                                                   // 8694\n          subnodes = selector.call(node, node.__data__, i, j);                                                         // 8695\n          subgroups.push(subgroup = []);                                                                               // 8696\n          for (var k = -1, o = subnodes.length; ++k < o; ) {                                                           // 8697\n            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);                              // 8698\n            subgroup.push(subnode);                                                                                    // 8699\n          }                                                                                                            // 8700\n        }                                                                                                              // 8701\n      }                                                                                                                // 8702\n    }                                                                                                                  // 8703\n    return d3_transition(subgroups, ns, id);                                                                           // 8704\n  };                                                                                                                   // 8705\n  d3_transitionPrototype.filter = function(filter) {                                                                   // 8706\n    var subgroups = [], subgroup, group, node;                                                                         // 8707\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);                                            // 8708\n    for (var j = 0, m = this.length; j < m; j++) {                                                                     // 8709\n      subgroups.push(subgroup = []);                                                                                   // 8710\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {                                                 // 8711\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {                                             // 8712\n          subgroup.push(node);                                                                                         // 8713\n        }                                                                                                              // 8714\n      }                                                                                                                // 8715\n    }                                                                                                                  // 8716\n    return d3_transition(subgroups, this.namespace, this.id);                                                          // 8717\n  };                                                                                                                   // 8718\n  d3_transitionPrototype.tween = function(name, tween) {                                                               // 8719\n    var id = this.id, ns = this.namespace;                                                                             // 8720\n    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);                                              // 8721\n    return d3_selection_each(this, tween == null ? function(node) {                                                    // 8722\n      node[ns][id].tween.remove(name);                                                                                 // 8723\n    } : function(node) {                                                                                               // 8724\n      node[ns][id].tween.set(name, tween);                                                                             // 8725\n    });                                                                                                                // 8726\n  };                                                                                                                   // 8727\n  function d3_transition_tween(groups, name, value, tween) {                                                           // 8728\n    var id = groups.id, ns = groups.namespace;                                                                         // 8729\n    return d3_selection_each(groups, typeof value === \"function\" ? function(node, i, j) {                              // 8730\n      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));                                      // 8731\n    } : (value = tween(value), function(node) {                                                                        // 8732\n      node[ns][id].tween.set(name, value);                                                                             // 8733\n    }));                                                                                                               // 8734\n  }                                                                                                                    // 8735\n  d3_transitionPrototype.attr = function(nameNS, value) {                                                              // 8736\n    if (arguments.length < 2) {                                                                                        // 8737\n      for (value in nameNS) this.attr(value, nameNS[value]);                                                           // 8738\n      return this;                                                                                                     // 8739\n    }                                                                                                                  // 8740\n    var interpolate = nameNS == \"transform\" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);  // 8741\n    function attrNull() {                                                                                              // 8742\n      this.removeAttribute(name);                                                                                      // 8743\n    }                                                                                                                  // 8744\n    function attrNullNS() {                                                                                            // 8745\n      this.removeAttributeNS(name.space, name.local);                                                                  // 8746\n    }                                                                                                                  // 8747\n    function attrTween(b) {                                                                                            // 8748\n      return b == null ? attrNull : (b += \"\", function() {                                                             // 8749\n        var a = this.getAttribute(name), i;                                                                            // 8750\n        return a !== b && (i = interpolate(a, b), function(t) {                                                        // 8751\n          this.setAttribute(name, i(t));                                                                               // 8752\n        });                                                                                                            // 8753\n      });                                                                                                              // 8754\n    }                                                                                                                  // 8755\n    function attrTweenNS(b) {                                                                                          // 8756\n      return b == null ? attrNullNS : (b += \"\", function() {                                                           // 8757\n        var a = this.getAttributeNS(name.space, name.local), i;                                                        // 8758\n        return a !== b && (i = interpolate(a, b), function(t) {                                                        // 8759\n          this.setAttributeNS(name.space, name.local, i(t));                                                           // 8760\n        });                                                                                                            // 8761\n      });                                                                                                              // 8762\n    }                                                                                                                  // 8763\n    return d3_transition_tween(this, \"attr.\" + nameNS, value, name.local ? attrTweenNS : attrTween);                   // 8764\n  };                                                                                                                   // 8765\n  d3_transitionPrototype.attrTween = function(nameNS, tween) {                                                         // 8766\n    var name = d3.ns.qualify(nameNS);                                                                                  // 8767\n    function attrTween(d, i) {                                                                                         // 8768\n      var f = tween.call(this, d, i, this.getAttribute(name));                                                         // 8769\n      return f && function(t) {                                                                                        // 8770\n        this.setAttribute(name, f(t));                                                                                 // 8771\n      };                                                                                                               // 8772\n    }                                                                                                                  // 8773\n    function attrTweenNS(d, i) {                                                                                       // 8774\n      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));                                     // 8775\n      return f && function(t) {                                                                                        // 8776\n        this.setAttributeNS(name.space, name.local, f(t));                                                             // 8777\n      };                                                                                                               // 8778\n    }                                                                                                                  // 8779\n    return this.tween(\"attr.\" + nameNS, name.local ? attrTweenNS : attrTween);                                         // 8780\n  };                                                                                                                   // 8781\n  d3_transitionPrototype.style = function(name, value, priority) {                                                     // 8782\n    var n = arguments.length;                                                                                          // 8783\n    if (n < 3) {                                                                                                       // 8784\n      if (typeof name !== \"string\") {                                                                                  // 8785\n        if (n < 2) value = \"\";                                                                                         // 8786\n        for (priority in name) this.style(priority, name[priority], value);                                            // 8787\n        return this;                                                                                                   // 8788\n      }                                                                                                                // 8789\n      priority = \"\";                                                                                                   // 8790\n    }                                                                                                                  // 8791\n    function styleNull() {                                                                                             // 8792\n      this.style.removeProperty(name);                                                                                 // 8793\n    }                                                                                                                  // 8794\n    function styleString(b) {                                                                                          // 8795\n      return b == null ? styleNull : (b += \"\", function() {                                                            // 8796\n        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;                                // 8797\n        return a !== b && (i = d3_interpolate(a, b), function(t) {                                                     // 8798\n          this.style.setProperty(name, i(t), priority);                                                                // 8799\n        });                                                                                                            // 8800\n      });                                                                                                              // 8801\n    }                                                                                                                  // 8802\n    return d3_transition_tween(this, \"style.\" + name, value, styleString);                                             // 8803\n  };                                                                                                                   // 8804\n  d3_transitionPrototype.styleTween = function(name, tween, priority) {                                                // 8805\n    if (arguments.length < 3) priority = \"\";                                                                           // 8806\n    function styleTween(d, i) {                                                                                        // 8807\n      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));             // 8808\n      return f && function(t) {                                                                                        // 8809\n        this.style.setProperty(name, f(t), priority);                                                                  // 8810\n      };                                                                                                               // 8811\n    }                                                                                                                  // 8812\n    return this.tween(\"style.\" + name, styleTween);                                                                    // 8813\n  };                                                                                                                   // 8814\n  d3_transitionPrototype.text = function(value) {                                                                      // 8815\n    return d3_transition_tween(this, \"text\", value, d3_transition_text);                                               // 8816\n  };                                                                                                                   // 8817\n  function d3_transition_text(b) {                                                                                     // 8818\n    if (b == null) b = \"\";                                                                                             // 8819\n    return function() {                                                                                                // 8820\n      this.textContent = b;                                                                                            // 8821\n    };                                                                                                                 // 8822\n  }                                                                                                                    // 8823\n  d3_transitionPrototype.remove = function() {                                                                         // 8824\n    var ns = this.namespace;                                                                                           // 8825\n    return this.each(\"end.transition\", function() {                                                                    // 8826\n      var p;                                                                                                           // 8827\n      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);                                            // 8828\n    });                                                                                                                // 8829\n  };                                                                                                                   // 8830\n  d3_transitionPrototype.ease = function(value) {                                                                      // 8831\n    var id = this.id, ns = this.namespace;                                                                             // 8832\n    if (arguments.length < 1) return this.node()[ns][id].ease;                                                         // 8833\n    if (typeof value !== \"function\") value = d3.ease.apply(d3, arguments);                                             // 8834\n    return d3_selection_each(this, function(node) {                                                                    // 8835\n      node[ns][id].ease = value;                                                                                       // 8836\n    });                                                                                                                // 8837\n  };                                                                                                                   // 8838\n  d3_transitionPrototype.delay = function(value) {                                                                     // 8839\n    var id = this.id, ns = this.namespace;                                                                             // 8840\n    if (arguments.length < 1) return this.node()[ns][id].delay;                                                        // 8841\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {                                // 8842\n      node[ns][id].delay = +value.call(node, node.__data__, i, j);                                                     // 8843\n    } : (value = +value, function(node) {                                                                              // 8844\n      node[ns][id].delay = value;                                                                                      // 8845\n    }));                                                                                                               // 8846\n  };                                                                                                                   // 8847\n  d3_transitionPrototype.duration = function(value) {                                                                  // 8848\n    var id = this.id, ns = this.namespace;                                                                             // 8849\n    if (arguments.length < 1) return this.node()[ns][id].duration;                                                     // 8850\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {                                // 8851\n      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));                                      // 8852\n    } : (value = Math.max(1, value), function(node) {                                                                  // 8853\n      node[ns][id].duration = value;                                                                                   // 8854\n    }));                                                                                                               // 8855\n  };                                                                                                                   // 8856\n  d3_transitionPrototype.each = function(type, listener) {                                                             // 8857\n    var id = this.id, ns = this.namespace;                                                                             // 8858\n    if (arguments.length < 2) {                                                                                        // 8859\n      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;                                          // 8860\n      try {                                                                                                            // 8861\n        d3_transitionInheritId = id;                                                                                   // 8862\n        d3_selection_each(this, function(node, i, j) {                                                                 // 8863\n          d3_transitionInherit = node[ns][id];                                                                         // 8864\n          type.call(node, node.__data__, i, j);                                                                        // 8865\n        });                                                                                                            // 8866\n      } finally {                                                                                                      // 8867\n        d3_transitionInherit = inherit;                                                                                // 8868\n        d3_transitionInheritId = inheritId;                                                                            // 8869\n      }                                                                                                                // 8870\n    } else {                                                                                                           // 8871\n      d3_selection_each(this, function(node) {                                                                         // 8872\n        var transition = node[ns][id];                                                                                 // 8873\n        (transition.event || (transition.event = d3.dispatch(\"start\", \"end\", \"interrupt\"))).on(type, listener);        // 8874\n      });                                                                                                              // 8875\n    }                                                                                                                  // 8876\n    return this;                                                                                                       // 8877\n  };                                                                                                                   // 8878\n  d3_transitionPrototype.transition = function() {                                                                     // 8879\n    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;\n    for (var j = 0, m = this.length; j < m; j++) {                                                                     // 8881\n      subgroups.push(subgroup = []);                                                                                   // 8882\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {                                                 // 8883\n        if (node = group[i]) {                                                                                         // 8884\n          transition = node[ns][id0];                                                                                  // 8885\n          d3_transitionNode(node, i, ns, id1, {                                                                        // 8886\n            time: transition.time,                                                                                     // 8887\n            ease: transition.ease,                                                                                     // 8888\n            delay: transition.delay + transition.duration,                                                             // 8889\n            duration: transition.duration                                                                              // 8890\n          });                                                                                                          // 8891\n        }                                                                                                              // 8892\n        subgroup.push(node);                                                                                           // 8893\n      }                                                                                                                // 8894\n    }                                                                                                                  // 8895\n    return d3_transition(subgroups, ns, id1);                                                                          // 8896\n  };                                                                                                                   // 8897\n  function d3_transitionNamespace(name) {                                                                              // 8898\n    return name == null ? \"__transition__\" : \"__transition_\" + name + \"__\";                                            // 8899\n  }                                                                                                                    // 8900\n  function d3_transitionNode(node, i, ns, id, inherit) {                                                               // 8901\n    var lock = node[ns] || (node[ns] = {                                                                               // 8902\n      active: 0,                                                                                                       // 8903\n      count: 0                                                                                                         // 8904\n    }), transition = lock[id], time, timer, duration, ease, tweens;                                                    // 8905\n    function schedule(elapsed) {                                                                                       // 8906\n      var delay = transition.delay;                                                                                    // 8907\n      timer.t = delay + time;                                                                                          // 8908\n      if (delay <= elapsed) return start(elapsed - delay);                                                             // 8909\n      timer.c = start;                                                                                                 // 8910\n    }                                                                                                                  // 8911\n    function start(elapsed) {                                                                                          // 8912\n      var activeId = lock.active, active = lock[activeId];                                                             // 8913\n      if (active) {                                                                                                    // 8914\n        active.timer.c = null;                                                                                         // 8915\n        active.timer.t = NaN;                                                                                          // 8916\n        --lock.count;                                                                                                  // 8917\n        delete lock[activeId];                                                                                         // 8918\n        active.event && active.event.interrupt.call(node, node.__data__, active.index);                                // 8919\n      }                                                                                                                // 8920\n      for (var cancelId in lock) {                                                                                     // 8921\n        if (+cancelId < id) {                                                                                          // 8922\n          var cancel = lock[cancelId];                                                                                 // 8923\n          cancel.timer.c = null;                                                                                       // 8924\n          cancel.timer.t = NaN;                                                                                        // 8925\n          --lock.count;                                                                                                // 8926\n          delete lock[cancelId];                                                                                       // 8927\n        }                                                                                                              // 8928\n      }                                                                                                                // 8929\n      lock.active = id;                                                                                                // 8930\n      transition.event && transition.event.start.call(node, node.__data__, i);                                         // 8931\n      tweens = [];                                                                                                     // 8932\n      transition.tween.forEach(function(key, value) {                                                                  // 8933\n        if (value = value.call(node, node.__data__, i)) {                                                              // 8934\n          tweens.push(value);                                                                                          // 8935\n        }                                                                                                              // 8936\n      });                                                                                                              // 8937\n      ease = transition.ease;                                                                                          // 8938\n      duration = transition.duration;                                                                                  // 8939\n      timer.c = tick;                                                                                                  // 8940\n      d3_timer(function() {                                                                                            // 8941\n        if (timer.c && tick(elapsed || 1)) {                                                                           // 8942\n          timer.c = null;                                                                                              // 8943\n          timer.t = NaN;                                                                                               // 8944\n        }                                                                                                              // 8945\n        return 1;                                                                                                      // 8946\n      }, 0, time);                                                                                                     // 8947\n    }                                                                                                                  // 8948\n    function tick(elapsed) {                                                                                           // 8949\n      var t = elapsed / duration, e = ease(t), n = tweens.length;                                                      // 8950\n      while (n > 0) {                                                                                                  // 8951\n        tweens[--n].call(node, e);                                                                                     // 8952\n      }                                                                                                                // 8953\n      if (t >= 1) {                                                                                                    // 8954\n        transition.event && transition.event.end.call(node, node.__data__, i);                                         // 8955\n        if (--lock.count) delete lock[id]; else delete node[ns];                                                       // 8956\n        return 1;                                                                                                      // 8957\n      }                                                                                                                // 8958\n    }                                                                                                                  // 8959\n    if (!transition) {                                                                                                 // 8960\n      time = inherit.time;                                                                                             // 8961\n      timer = d3_timer(schedule, 0, time);                                                                             // 8962\n      transition = lock[id] = {                                                                                        // 8963\n        tween: new d3_Map(),                                                                                           // 8964\n        time: time,                                                                                                    // 8965\n        timer: timer,                                                                                                  // 8966\n        delay: inherit.delay,                                                                                          // 8967\n        duration: inherit.duration,                                                                                    // 8968\n        ease: inherit.ease,                                                                                            // 8969\n        index: i                                                                                                       // 8970\n      };                                                                                                               // 8971\n      inherit = null;                                                                                                  // 8972\n      ++lock.count;                                                                                                    // 8973\n    }                                                                                                                  // 8974\n  }                                                                                                                    // 8975\n  d3.svg.axis = function() {                                                                                           // 8976\n    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;\n    function axis(g) {                                                                                                 // 8978\n      g.each(function() {                                                                                              // 8979\n        var g = d3.select(this);                                                                                       // 8980\n        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();                                  // 8981\n        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(\".tick\").data(ticks, scale1), tickEnter = tick.enter().insert(\"g\", \".domain\").attr(\"class\", \"tick\").style(\"opacity\", ε), tickExit = d3.transition(tick.exit()).style(\"opacity\", ε).remove(), tickUpdate = d3.transition(tick.order()).style(\"opacity\", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;\n        var range = d3_scaleRange(scale1), path = g.selectAll(\".domain\").data([ 0 ]), pathUpdate = (path.enter().append(\"path\").attr(\"class\", \"domain\"), \n        d3.transition(path));                                                                                          // 8984\n        tickEnter.append(\"line\");                                                                                      // 8985\n        tickEnter.append(\"text\");                                                                                      // 8986\n        var lineEnter = tickEnter.select(\"line\"), lineUpdate = tickUpdate.select(\"line\"), text = tick.select(\"text\").text(tickFormat), textEnter = tickEnter.select(\"text\"), textUpdate = tickUpdate.select(\"text\"), sign = orient === \"top\" || orient === \"left\" ? -1 : 1, x1, x2, y1, y2;\n        if (orient === \"bottom\" || orient === \"top\") {                                                                 // 8988\n          tickTransform = d3_svg_axisX, x1 = \"x\", y1 = \"y\", x2 = \"x2\", y2 = \"y2\";                                      // 8989\n          text.attr(\"dy\", sign < 0 ? \"0em\" : \".71em\").style(\"text-anchor\", \"middle\");                                  // 8990\n          pathUpdate.attr(\"d\", \"M\" + range[0] + \",\" + sign * outerTickSize + \"V0H\" + range[1] + \"V\" + sign * outerTickSize);\n        } else {                                                                                                       // 8992\n          tickTransform = d3_svg_axisY, x1 = \"y\", y1 = \"x\", x2 = \"y2\", y2 = \"x2\";                                      // 8993\n          text.attr(\"dy\", \".32em\").style(\"text-anchor\", sign < 0 ? \"end\" : \"start\");                                   // 8994\n          pathUpdate.attr(\"d\", \"M\" + sign * outerTickSize + \",\" + range[0] + \"H0V\" + range[1] + \"H\" + sign * outerTickSize);\n        }                                                                                                              // 8996\n        lineEnter.attr(y2, sign * innerTickSize);                                                                      // 8997\n        textEnter.attr(y1, sign * tickSpacing);                                                                        // 8998\n        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);                                                         // 8999\n        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);                                                           // 9000\n        if (scale1.rangeBand) {                                                                                        // 9001\n          var x = scale1, dx = x.rangeBand() / 2;                                                                      // 9002\n          scale0 = scale1 = function(d) {                                                                              // 9003\n            return x(d) + dx;                                                                                          // 9004\n          };                                                                                                           // 9005\n        } else if (scale0.rangeBand) {                                                                                 // 9006\n          scale0 = scale1;                                                                                             // 9007\n        } else {                                                                                                       // 9008\n          tickExit.call(tickTransform, scale1, scale0);                                                                // 9009\n        }                                                                                                              // 9010\n        tickEnter.call(tickTransform, scale0, scale1);                                                                 // 9011\n        tickUpdate.call(tickTransform, scale1, scale1);                                                                // 9012\n      });                                                                                                              // 9013\n    }                                                                                                                  // 9014\n    axis.scale = function(x) {                                                                                         // 9015\n      if (!arguments.length) return scale;                                                                             // 9016\n      scale = x;                                                                                                       // 9017\n      return axis;                                                                                                     // 9018\n    };                                                                                                                 // 9019\n    axis.orient = function(x) {                                                                                        // 9020\n      if (!arguments.length) return orient;                                                                            // 9021\n      orient = x in d3_svg_axisOrients ? x + \"\" : d3_svg_axisDefaultOrient;                                            // 9022\n      return axis;                                                                                                     // 9023\n    };                                                                                                                 // 9024\n    axis.ticks = function() {                                                                                          // 9025\n      if (!arguments.length) return tickArguments_;                                                                    // 9026\n      tickArguments_ = d3_array(arguments);                                                                            // 9027\n      return axis;                                                                                                     // 9028\n    };                                                                                                                 // 9029\n    axis.tickValues = function(x) {                                                                                    // 9030\n      if (!arguments.length) return tickValues;                                                                        // 9031\n      tickValues = x;                                                                                                  // 9032\n      return axis;                                                                                                     // 9033\n    };                                                                                                                 // 9034\n    axis.tickFormat = function(x) {                                                                                    // 9035\n      if (!arguments.length) return tickFormat_;                                                                       // 9036\n      tickFormat_ = x;                                                                                                 // 9037\n      return axis;                                                                                                     // 9038\n    };                                                                                                                 // 9039\n    axis.tickSize = function(x) {                                                                                      // 9040\n      var n = arguments.length;                                                                                        // 9041\n      if (!n) return innerTickSize;                                                                                    // 9042\n      innerTickSize = +x;                                                                                              // 9043\n      outerTickSize = +arguments[n - 1];                                                                               // 9044\n      return axis;                                                                                                     // 9045\n    };                                                                                                                 // 9046\n    axis.innerTickSize = function(x) {                                                                                 // 9047\n      if (!arguments.length) return innerTickSize;                                                                     // 9048\n      innerTickSize = +x;                                                                                              // 9049\n      return axis;                                                                                                     // 9050\n    };                                                                                                                 // 9051\n    axis.outerTickSize = function(x) {                                                                                 // 9052\n      if (!arguments.length) return outerTickSize;                                                                     // 9053\n      outerTickSize = +x;                                                                                              // 9054\n      return axis;                                                                                                     // 9055\n    };                                                                                                                 // 9056\n    axis.tickPadding = function(x) {                                                                                   // 9057\n      if (!arguments.length) return tickPadding;                                                                       // 9058\n      tickPadding = +x;                                                                                                // 9059\n      return axis;                                                                                                     // 9060\n    };                                                                                                                 // 9061\n    axis.tickSubdivide = function() {                                                                                  // 9062\n      return arguments.length && axis;                                                                                 // 9063\n    };                                                                                                                 // 9064\n    return axis;                                                                                                       // 9065\n  };                                                                                                                   // 9066\n  var d3_svg_axisDefaultOrient = \"bottom\", d3_svg_axisOrients = {                                                      // 9067\n    top: 1,                                                                                                            // 9068\n    right: 1,                                                                                                          // 9069\n    bottom: 1,                                                                                                         // 9070\n    left: 1                                                                                                            // 9071\n  };                                                                                                                   // 9072\n  function d3_svg_axisX(selection, x0, x1) {                                                                           // 9073\n    selection.attr(\"transform\", function(d) {                                                                          // 9074\n      var v0 = x0(d);                                                                                                  // 9075\n      return \"translate(\" + (isFinite(v0) ? v0 : x1(d)) + \",0)\";                                                       // 9076\n    });                                                                                                                // 9077\n  }                                                                                                                    // 9078\n  function d3_svg_axisY(selection, y0, y1) {                                                                           // 9079\n    selection.attr(\"transform\", function(d) {                                                                          // 9080\n      var v0 = y0(d);                                                                                                  // 9081\n      return \"translate(0,\" + (isFinite(v0) ? v0 : y1(d)) + \")\";                                                       // 9082\n    });                                                                                                                // 9083\n  }                                                                                                                    // 9084\n  d3.svg.brush = function() {                                                                                          // 9085\n    var event = d3_eventDispatch(brush, \"brushstart\", \"brush\", \"brushend\"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];\n    function brush(g) {                                                                                                // 9087\n      g.each(function() {                                                                                              // 9088\n        var g = d3.select(this).style(\"pointer-events\", \"all\").style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\").on(\"mousedown.brush\", brushstart).on(\"touchstart.brush\", brushstart);\n        var background = g.selectAll(\".background\").data([ 0 ]);                                                       // 9090\n        background.enter().append(\"rect\").attr(\"class\", \"background\").style(\"visibility\", \"hidden\").style(\"cursor\", \"crosshair\");\n        g.selectAll(\".extent\").data([ 0 ]).enter().append(\"rect\").attr(\"class\", \"extent\").style(\"cursor\", \"move\");     // 9092\n        var resize = g.selectAll(\".resize\").data(resizes, d3_identity);                                                // 9093\n        resize.exit().remove();                                                                                        // 9094\n        resize.enter().append(\"g\").attr(\"class\", function(d) {                                                         // 9095\n          return \"resize \" + d;                                                                                        // 9096\n        }).style(\"cursor\", function(d) {                                                                               // 9097\n          return d3_svg_brushCursor[d];                                                                                // 9098\n        }).append(\"rect\").attr(\"x\", function(d) {                                                                      // 9099\n          return /[ew]$/.test(d) ? -3 : null;                                                                          // 9100\n        }).attr(\"y\", function(d) {                                                                                     // 9101\n          return /^[ns]/.test(d) ? -3 : null;                                                                          // 9102\n        }).attr(\"width\", 6).attr(\"height\", 6).style(\"visibility\", \"hidden\");                                           // 9103\n        resize.style(\"display\", brush.empty() ? \"none\" : null);                                                        // 9104\n        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;                           // 9105\n        if (x) {                                                                                                       // 9106\n          range = d3_scaleRange(x);                                                                                    // 9107\n          backgroundUpdate.attr(\"x\", range[0]).attr(\"width\", range[1] - range[0]);                                     // 9108\n          redrawX(gUpdate);                                                                                            // 9109\n        }                                                                                                              // 9110\n        if (y) {                                                                                                       // 9111\n          range = d3_scaleRange(y);                                                                                    // 9112\n          backgroundUpdate.attr(\"y\", range[0]).attr(\"height\", range[1] - range[0]);                                    // 9113\n          redrawY(gUpdate);                                                                                            // 9114\n        }                                                                                                              // 9115\n        redraw(gUpdate);                                                                                               // 9116\n      });                                                                                                              // 9117\n    }                                                                                                                  // 9118\n    brush.event = function(g) {                                                                                        // 9119\n      g.each(function() {                                                                                              // 9120\n        var event_ = event.of(this, arguments), extent1 = {                                                            // 9121\n          x: xExtent,                                                                                                  // 9122\n          y: yExtent,                                                                                                  // 9123\n          i: xExtentDomain,                                                                                            // 9124\n          j: yExtentDomain                                                                                             // 9125\n        }, extent0 = this.__chart__ || extent1;                                                                        // 9126\n        this.__chart__ = extent1;                                                                                      // 9127\n        if (d3_transitionInheritId) {                                                                                  // 9128\n          d3.select(this).transition().each(\"start.brush\", function() {                                                // 9129\n            xExtentDomain = extent0.i;                                                                                 // 9130\n            yExtentDomain = extent0.j;                                                                                 // 9131\n            xExtent = extent0.x;                                                                                       // 9132\n            yExtent = extent0.y;                                                                                       // 9133\n            event_({                                                                                                   // 9134\n              type: \"brushstart\"                                                                                       // 9135\n            });                                                                                                        // 9136\n          }).tween(\"brush:brush\", function() {                                                                         // 9137\n            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);            // 9138\n            xExtentDomain = yExtentDomain = null;                                                                      // 9139\n            return function(t) {                                                                                       // 9140\n              xExtent = extent1.x = xi(t);                                                                             // 9141\n              yExtent = extent1.y = yi(t);                                                                             // 9142\n              event_({                                                                                                 // 9143\n                type: \"brush\",                                                                                         // 9144\n                mode: \"resize\"                                                                                         // 9145\n              });                                                                                                      // 9146\n            };                                                                                                         // 9147\n          }).each(\"end.brush\", function() {                                                                            // 9148\n            xExtentDomain = extent1.i;                                                                                 // 9149\n            yExtentDomain = extent1.j;                                                                                 // 9150\n            event_({                                                                                                   // 9151\n              type: \"brush\",                                                                                           // 9152\n              mode: \"resize\"                                                                                           // 9153\n            });                                                                                                        // 9154\n            event_({                                                                                                   // 9155\n              type: \"brushend\"                                                                                         // 9156\n            });                                                                                                        // 9157\n          });                                                                                                          // 9158\n        } else {                                                                                                       // 9159\n          event_({                                                                                                     // 9160\n            type: \"brushstart\"                                                                                         // 9161\n          });                                                                                                          // 9162\n          event_({                                                                                                     // 9163\n            type: \"brush\",                                                                                             // 9164\n            mode: \"resize\"                                                                                             // 9165\n          });                                                                                                          // 9166\n          event_({                                                                                                     // 9167\n            type: \"brushend\"                                                                                           // 9168\n          });                                                                                                          // 9169\n        }                                                                                                              // 9170\n      });                                                                                                              // 9171\n    };                                                                                                                 // 9172\n    function redraw(g) {                                                                                               // 9173\n      g.selectAll(\".resize\").attr(\"transform\", function(d) {                                                           // 9174\n        return \"translate(\" + xExtent[+/e$/.test(d)] + \",\" + yExtent[+/^s/.test(d)] + \")\";                             // 9175\n      });                                                                                                              // 9176\n    }                                                                                                                  // 9177\n    function redrawX(g) {                                                                                              // 9178\n      g.select(\".extent\").attr(\"x\", xExtent[0]);                                                                       // 9179\n      g.selectAll(\".extent,.n>rect,.s>rect\").attr(\"width\", xExtent[1] - xExtent[0]);                                   // 9180\n    }                                                                                                                  // 9181\n    function redrawY(g) {                                                                                              // 9182\n      g.select(\".extent\").attr(\"y\", yExtent[0]);                                                                       // 9183\n      g.selectAll(\".extent,.e>rect,.w>rect\").attr(\"height\", yExtent[1] - yExtent[0]);                                  // 9184\n    }                                                                                                                  // 9185\n    function brushstart() {                                                                                            // 9186\n      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed(\"extent\"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;\n      var w = d3.select(d3_window(target)).on(\"keydown.brush\", keydown).on(\"keyup.brush\", keyup);                      // 9188\n      if (d3.event.changedTouches) {                                                                                   // 9189\n        w.on(\"touchmove.brush\", brushmove).on(\"touchend.brush\", brushend);                                             // 9190\n      } else {                                                                                                         // 9191\n        w.on(\"mousemove.brush\", brushmove).on(\"mouseup.brush\", brushend);                                              // 9192\n      }                                                                                                                // 9193\n      g.interrupt().selectAll(\"*\").interrupt();                                                                        // 9194\n      if (dragging) {                                                                                                  // 9195\n        origin[0] = xExtent[0] - origin[0];                                                                            // 9196\n        origin[1] = yExtent[0] - origin[1];                                                                            // 9197\n      } else if (resizing) {                                                                                           // 9198\n        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);                                                      // 9199\n        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];                                         // 9200\n        origin[0] = xExtent[ex];                                                                                       // 9201\n        origin[1] = yExtent[ey];                                                                                       // 9202\n      } else if (d3.event.altKey) center = origin.slice();                                                             // 9203\n      g.style(\"pointer-events\", \"none\").selectAll(\".resize\").style(\"display\", null);                                   // 9204\n      d3.select(\"body\").style(\"cursor\", eventTarget.style(\"cursor\"));                                                  // 9205\n      event_({                                                                                                         // 9206\n        type: \"brushstart\"                                                                                             // 9207\n      });                                                                                                              // 9208\n      brushmove();                                                                                                     // 9209\n      function keydown() {                                                                                             // 9210\n        if (d3.event.keyCode == 32) {                                                                                  // 9211\n          if (!dragging) {                                                                                             // 9212\n            center = null;                                                                                             // 9213\n            origin[0] -= xExtent[1];                                                                                   // 9214\n            origin[1] -= yExtent[1];                                                                                   // 9215\n            dragging = 2;                                                                                              // 9216\n          }                                                                                                            // 9217\n          d3_eventPreventDefault();                                                                                    // 9218\n        }                                                                                                              // 9219\n      }                                                                                                                // 9220\n      function keyup() {                                                                                               // 9221\n        if (d3.event.keyCode == 32 && dragging == 2) {                                                                 // 9222\n          origin[0] += xExtent[1];                                                                                     // 9223\n          origin[1] += yExtent[1];                                                                                     // 9224\n          dragging = 0;                                                                                                // 9225\n          d3_eventPreventDefault();                                                                                    // 9226\n        }                                                                                                              // 9227\n      }                                                                                                                // 9228\n      function brushmove() {                                                                                           // 9229\n        var point = d3.mouse(target), moved = false;                                                                   // 9230\n        if (offset) {                                                                                                  // 9231\n          point[0] += offset[0];                                                                                       // 9232\n          point[1] += offset[1];                                                                                       // 9233\n        }                                                                                                              // 9234\n        if (!dragging) {                                                                                               // 9235\n          if (d3.event.altKey) {                                                                                       // 9236\n            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];                    // 9237\n            origin[0] = xExtent[+(point[0] < center[0])];                                                              // 9238\n            origin[1] = yExtent[+(point[1] < center[1])];                                                              // 9239\n          } else center = null;                                                                                        // 9240\n        }                                                                                                              // 9241\n        if (resizingX && move1(point, x, 0)) {                                                                         // 9242\n          redrawX(g);                                                                                                  // 9243\n          moved = true;                                                                                                // 9244\n        }                                                                                                              // 9245\n        if (resizingY && move1(point, y, 1)) {                                                                         // 9246\n          redrawY(g);                                                                                                  // 9247\n          moved = true;                                                                                                // 9248\n        }                                                                                                              // 9249\n        if (moved) {                                                                                                   // 9250\n          redraw(g);                                                                                                   // 9251\n          event_({                                                                                                     // 9252\n            type: \"brush\",                                                                                             // 9253\n            mode: dragging ? \"move\" : \"resize\"                                                                         // 9254\n          });                                                                                                          // 9255\n        }                                                                                                              // 9256\n      }                                                                                                                // 9257\n      function move1(point, scale, i) {                                                                                // 9258\n        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;\n        if (dragging) {                                                                                                // 9260\n          r0 -= position;                                                                                              // 9261\n          r1 -= size + position;                                                                                       // 9262\n        }                                                                                                              // 9263\n        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];                                 // 9264\n        if (dragging) {                                                                                                // 9265\n          max = (min += position) + size;                                                                              // 9266\n        } else {                                                                                                       // 9267\n          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));                                      // 9268\n          if (position < min) {                                                                                        // 9269\n            max = min;                                                                                                 // 9270\n            min = position;                                                                                            // 9271\n          } else {                                                                                                     // 9272\n            max = position;                                                                                            // 9273\n          }                                                                                                            // 9274\n        }                                                                                                              // 9275\n        if (extent[0] != min || extent[1] != max) {                                                                    // 9276\n          if (i) yExtentDomain = null; else xExtentDomain = null;                                                      // 9277\n          extent[0] = min;                                                                                             // 9278\n          extent[1] = max;                                                                                             // 9279\n          return true;                                                                                                 // 9280\n        }                                                                                                              // 9281\n      }                                                                                                                // 9282\n      function brushend() {                                                                                            // 9283\n        brushmove();                                                                                                   // 9284\n        g.style(\"pointer-events\", \"all\").selectAll(\".resize\").style(\"display\", brush.empty() ? \"none\" : null);         // 9285\n        d3.select(\"body\").style(\"cursor\", null);                                                                       // 9286\n        w.on(\"mousemove.brush\", null).on(\"mouseup.brush\", null).on(\"touchmove.brush\", null).on(\"touchend.brush\", null).on(\"keydown.brush\", null).on(\"keyup.brush\", null);\n        dragRestore();                                                                                                 // 9288\n        event_({                                                                                                       // 9289\n          type: \"brushend\"                                                                                             // 9290\n        });                                                                                                            // 9291\n      }                                                                                                                // 9292\n    }                                                                                                                  // 9293\n    brush.x = function(z) {                                                                                            // 9294\n      if (!arguments.length) return x;                                                                                 // 9295\n      x = z;                                                                                                           // 9296\n      resizes = d3_svg_brushResizes[!x << 1 | !y];                                                                     // 9297\n      return brush;                                                                                                    // 9298\n    };                                                                                                                 // 9299\n    brush.y = function(z) {                                                                                            // 9300\n      if (!arguments.length) return y;                                                                                 // 9301\n      y = z;                                                                                                           // 9302\n      resizes = d3_svg_brushResizes[!x << 1 | !y];                                                                     // 9303\n      return brush;                                                                                                    // 9304\n    };                                                                                                                 // 9305\n    brush.clamp = function(z) {                                                                                        // 9306\n      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;                      // 9307\n      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;                // 9308\n      return brush;                                                                                                    // 9309\n    };                                                                                                                 // 9310\n    brush.extent = function(z) {                                                                                       // 9311\n      var x0, x1, y0, y1, t;                                                                                           // 9312\n      if (!arguments.length) {                                                                                         // 9313\n        if (x) {                                                                                                       // 9314\n          if (xExtentDomain) {                                                                                         // 9315\n            x0 = xExtentDomain[0], x1 = xExtentDomain[1];                                                              // 9316\n          } else {                                                                                                     // 9317\n            x0 = xExtent[0], x1 = xExtent[1];                                                                          // 9318\n            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);                                                        // 9319\n            if (x1 < x0) t = x0, x0 = x1, x1 = t;                                                                      // 9320\n          }                                                                                                            // 9321\n        }                                                                                                              // 9322\n        if (y) {                                                                                                       // 9323\n          if (yExtentDomain) {                                                                                         // 9324\n            y0 = yExtentDomain[0], y1 = yExtentDomain[1];                                                              // 9325\n          } else {                                                                                                     // 9326\n            y0 = yExtent[0], y1 = yExtent[1];                                                                          // 9327\n            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);                                                        // 9328\n            if (y1 < y0) t = y0, y0 = y1, y1 = t;                                                                      // 9329\n          }                                                                                                            // 9330\n        }                                                                                                              // 9331\n        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];                                 // 9332\n      }                                                                                                                // 9333\n      if (x) {                                                                                                         // 9334\n        x0 = z[0], x1 = z[1];                                                                                          // 9335\n        if (y) x0 = x0[0], x1 = x1[0];                                                                                 // 9336\n        xExtentDomain = [ x0, x1 ];                                                                                    // 9337\n        if (x.invert) x0 = x(x0), x1 = x(x1);                                                                          // 9338\n        if (x1 < x0) t = x0, x0 = x1, x1 = t;                                                                          // 9339\n        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];                                                // 9340\n      }                                                                                                                // 9341\n      if (y) {                                                                                                         // 9342\n        y0 = z[0], y1 = z[1];                                                                                          // 9343\n        if (x) y0 = y0[1], y1 = y1[1];                                                                                 // 9344\n        yExtentDomain = [ y0, y1 ];                                                                                    // 9345\n        if (y.invert) y0 = y(y0), y1 = y(y1);                                                                          // 9346\n        if (y1 < y0) t = y0, y0 = y1, y1 = t;                                                                          // 9347\n        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];                                                // 9348\n      }                                                                                                                // 9349\n      return brush;                                                                                                    // 9350\n    };                                                                                                                 // 9351\n    brush.clear = function() {                                                                                         // 9352\n      if (!brush.empty()) {                                                                                            // 9353\n        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];                                                                        // 9354\n        xExtentDomain = yExtentDomain = null;                                                                          // 9355\n      }                                                                                                                // 9356\n      return brush;                                                                                                    // 9357\n    };                                                                                                                 // 9358\n    brush.empty = function() {                                                                                         // 9359\n      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];                                       // 9360\n    };                                                                                                                 // 9361\n    return d3.rebind(brush, event, \"on\");                                                                              // 9362\n  };                                                                                                                   // 9363\n  var d3_svg_brushCursor = {                                                                                           // 9364\n    n: \"ns-resize\",                                                                                                    // 9365\n    e: \"ew-resize\",                                                                                                    // 9366\n    s: \"ns-resize\",                                                                                                    // 9367\n    w: \"ew-resize\",                                                                                                    // 9368\n    nw: \"nwse-resize\",                                                                                                 // 9369\n    ne: \"nesw-resize\",                                                                                                 // 9370\n    se: \"nwse-resize\",                                                                                                 // 9371\n    sw: \"nesw-resize\"                                                                                                  // 9372\n  };                                                                                                                   // 9373\n  var d3_svg_brushResizes = [ [ \"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\" ], [ \"e\", \"w\" ], [ \"n\", \"s\" ], [] ];        // 9374\n  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;                                                     // 9375\n  var d3_time_formatUtc = d3_time_format.utc;                                                                          // 9376\n  var d3_time_formatIso = d3_time_formatUtc(\"%Y-%m-%dT%H:%M:%S.%LZ\");                                                  // 9377\n  d3_time_format.iso = Date.prototype.toISOString && +new Date(\"2000-01-01T00:00:00.000Z\") ? d3_time_formatIsoNative : d3_time_formatIso;\n  function d3_time_formatIsoNative(date) {                                                                             // 9379\n    return date.toISOString();                                                                                         // 9380\n  }                                                                                                                    // 9381\n  d3_time_formatIsoNative.parse = function(string) {                                                                   // 9382\n    var date = new Date(string);                                                                                       // 9383\n    return isNaN(date) ? null : date;                                                                                  // 9384\n  };                                                                                                                   // 9385\n  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;                                                       // 9386\n  d3_time.second = d3_time_interval(function(date) {                                                                   // 9387\n    return new d3_date(Math.floor(date / 1e3) * 1e3);                                                                  // 9388\n  }, function(date, offset) {                                                                                          // 9389\n    date.setTime(date.getTime() + Math.floor(offset) * 1e3);                                                           // 9390\n  }, function(date) {                                                                                                  // 9391\n    return date.getSeconds();                                                                                          // 9392\n  });                                                                                                                  // 9393\n  d3_time.seconds = d3_time.second.range;                                                                              // 9394\n  d3_time.seconds.utc = d3_time.second.utc.range;                                                                      // 9395\n  d3_time.minute = d3_time_interval(function(date) {                                                                   // 9396\n    return new d3_date(Math.floor(date / 6e4) * 6e4);                                                                  // 9397\n  }, function(date, offset) {                                                                                          // 9398\n    date.setTime(date.getTime() + Math.floor(offset) * 6e4);                                                           // 9399\n  }, function(date) {                                                                                                  // 9400\n    return date.getMinutes();                                                                                          // 9401\n  });                                                                                                                  // 9402\n  d3_time.minutes = d3_time.minute.range;                                                                              // 9403\n  d3_time.minutes.utc = d3_time.minute.utc.range;                                                                      // 9404\n  d3_time.hour = d3_time_interval(function(date) {                                                                     // 9405\n    var timezone = date.getTimezoneOffset() / 60;                                                                      // 9406\n    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);                                        // 9407\n  }, function(date, offset) {                                                                                          // 9408\n    date.setTime(date.getTime() + Math.floor(offset) * 36e5);                                                          // 9409\n  }, function(date) {                                                                                                  // 9410\n    return date.getHours();                                                                                            // 9411\n  });                                                                                                                  // 9412\n  d3_time.hours = d3_time.hour.range;                                                                                  // 9413\n  d3_time.hours.utc = d3_time.hour.utc.range;                                                                          // 9414\n  d3_time.month = d3_time_interval(function(date) {                                                                    // 9415\n    date = d3_time.day(date);                                                                                          // 9416\n    date.setDate(1);                                                                                                   // 9417\n    return date;                                                                                                       // 9418\n  }, function(date, offset) {                                                                                          // 9419\n    date.setMonth(date.getMonth() + offset);                                                                           // 9420\n  }, function(date) {                                                                                                  // 9421\n    return date.getMonth();                                                                                            // 9422\n  });                                                                                                                  // 9423\n  d3_time.months = d3_time.month.range;                                                                                // 9424\n  d3_time.months.utc = d3_time.month.utc.range;                                                                        // 9425\n  function d3_time_scale(linear, methods, format) {                                                                    // 9426\n    function scale(x) {                                                                                                // 9427\n      return linear(x);                                                                                                // 9428\n    }                                                                                                                  // 9429\n    scale.invert = function(x) {                                                                                       // 9430\n      return d3_time_scaleDate(linear.invert(x));                                                                      // 9431\n    };                                                                                                                 // 9432\n    scale.domain = function(x) {                                                                                       // 9433\n      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);                                            // 9434\n      linear.domain(x);                                                                                                // 9435\n      return scale;                                                                                                    // 9436\n    };                                                                                                                 // 9437\n    function tickMethod(extent, count) {                                                                               // 9438\n      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);              // 9439\n      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {        // 9440\n        return d / 31536e6;                                                                                            // 9441\n      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];\n    }                                                                                                                  // 9443\n    scale.nice = function(interval, skip) {                                                                            // 9444\n      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" && tickMethod(extent, interval);\n      if (method) interval = method[0], skip = method[1];                                                              // 9446\n      function skipped(date) {                                                                                         // 9447\n        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;                       // 9448\n      }                                                                                                                // 9449\n      return scale.domain(d3_scale_nice(domain, skip > 1 ? {                                                           // 9450\n        floor: function(date) {                                                                                        // 9451\n          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);                             // 9452\n          return date;                                                                                                 // 9453\n        },                                                                                                             // 9454\n        ceil: function(date) {                                                                                         // 9455\n          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);                             // 9456\n          return date;                                                                                                 // 9457\n        }                                                                                                              // 9458\n      } : interval));                                                                                                  // 9459\n    };                                                                                                                 // 9460\n    scale.ticks = function(interval, skip) {                                                                           // 9461\n      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" ? tickMethod(extent, interval) : !interval.range && [ {\n        range: interval                                                                                                // 9463\n      }, skip ];                                                                                                       // 9464\n      if (method) interval = method[0], skip = method[1];                                                              // 9465\n      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);                        // 9466\n    };                                                                                                                 // 9467\n    scale.tickFormat = function() {                                                                                    // 9468\n      return format;                                                                                                   // 9469\n    };                                                                                                                 // 9470\n    scale.copy = function() {                                                                                          // 9471\n      return d3_time_scale(linear.copy(), methods, format);                                                            // 9472\n    };                                                                                                                 // 9473\n    return d3_scale_linearRebind(scale, linear);                                                                       // 9474\n  }                                                                                                                    // 9475\n  function d3_time_scaleDate(t) {                                                                                      // 9476\n    return new Date(t);                                                                                                // 9477\n  }                                                                                                                    // 9478\n  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];\n  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];\n  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ \".%L\", function(d) {                                         // 9481\n    return d.getMilliseconds();                                                                                        // 9482\n  } ], [ \":%S\", function(d) {                                                                                          // 9483\n    return d.getSeconds();                                                                                             // 9484\n  } ], [ \"%I:%M\", function(d) {                                                                                        // 9485\n    return d.getMinutes();                                                                                             // 9486\n  } ], [ \"%I %p\", function(d) {                                                                                        // 9487\n    return d.getHours();                                                                                               // 9488\n  } ], [ \"%a %d\", function(d) {                                                                                        // 9489\n    return d.getDay() && d.getDate() != 1;                                                                             // 9490\n  } ], [ \"%b %d\", function(d) {                                                                                        // 9491\n    return d.getDate() != 1;                                                                                           // 9492\n  } ], [ \"%B\", function(d) {                                                                                           // 9493\n    return d.getMonth();                                                                                               // 9494\n  } ], [ \"%Y\", d3_true ] ]);                                                                                           // 9495\n  var d3_time_scaleMilliseconds = {                                                                                    // 9496\n    range: function(start, stop, step) {                                                                               // 9497\n      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);                             // 9498\n    },                                                                                                                 // 9499\n    floor: d3_identity,                                                                                                // 9500\n    ceil: d3_identity                                                                                                  // 9501\n  };                                                                                                                   // 9502\n  d3_time_scaleLocalMethods.year = d3_time.year;                                                                       // 9503\n  d3_time.scale = function() {                                                                                         // 9504\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);                      // 9505\n  };                                                                                                                   // 9506\n  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {                                            // 9507\n    return [ m[0].utc, m[1] ];                                                                                         // 9508\n  });                                                                                                                  // 9509\n  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ \".%L\", function(d) {                                        // 9510\n    return d.getUTCMilliseconds();                                                                                     // 9511\n  } ], [ \":%S\", function(d) {                                                                                          // 9512\n    return d.getUTCSeconds();                                                                                          // 9513\n  } ], [ \"%I:%M\", function(d) {                                                                                        // 9514\n    return d.getUTCMinutes();                                                                                          // 9515\n  } ], [ \"%I %p\", function(d) {                                                                                        // 9516\n    return d.getUTCHours();                                                                                            // 9517\n  } ], [ \"%a %d\", function(d) {                                                                                        // 9518\n    return d.getUTCDay() && d.getUTCDate() != 1;                                                                       // 9519\n  } ], [ \"%b %d\", function(d) {                                                                                        // 9520\n    return d.getUTCDate() != 1;                                                                                        // 9521\n  } ], [ \"%B\", function(d) {                                                                                           // 9522\n    return d.getUTCMonth();                                                                                            // 9523\n  } ], [ \"%Y\", d3_true ] ]);                                                                                           // 9524\n  d3_time_scaleUtcMethods.year = d3_time.year.utc;                                                                     // 9525\n  d3_time.scale.utc = function() {                                                                                     // 9526\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);                          // 9527\n  };                                                                                                                   // 9528\n  d3.text = d3_xhrType(function(request) {                                                                             // 9529\n    return request.responseText;                                                                                       // 9530\n  });                                                                                                                  // 9531\n  d3.json = function(url, callback) {                                                                                  // 9532\n    return d3_xhr(url, \"application/json\", d3_json, callback);                                                         // 9533\n  };                                                                                                                   // 9534\n  function d3_json(request) {                                                                                          // 9535\n    return JSON.parse(request.responseText);                                                                           // 9536\n  }                                                                                                                    // 9537\n  d3.html = function(url, callback) {                                                                                  // 9538\n    return d3_xhr(url, \"text/html\", d3_html, callback);                                                                // 9539\n  };                                                                                                                   // 9540\n  function d3_html(request) {                                                                                          // 9541\n    var range = d3_document.createRange();                                                                             // 9542\n    range.selectNode(d3_document.body);                                                                                // 9543\n    return range.createContextualFragment(request.responseText);                                                       // 9544\n  }                                                                                                                    // 9545\n  d3.xml = d3_xhrType(function(request) {                                                                              // 9546\n    return request.responseXML;                                                                                        // 9547\n  });                                                                                                                  // 9548\n  if (typeof define === \"function\" && define.amd) define(this.d3 = d3); else if (typeof module === \"object\" && module.exports) module.exports = d3; else this.d3 = d3;\n}();                                                                                                                   // 9550\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['d3js:d3'] = {};\n\n})();\n","servePath":"/packages/d3js_d3.js"}]