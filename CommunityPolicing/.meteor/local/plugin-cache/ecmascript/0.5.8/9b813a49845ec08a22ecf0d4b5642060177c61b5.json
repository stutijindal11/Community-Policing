{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/modernizr/test/qunit/run-qunit.js","filenameRelative":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/modernizr/test/qunit/run-qunit.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/modernizr/test/qunit/run-qunit.js.map","sourceFileName":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/modernizr/test/qunit/run-qunit.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"run-qunit"},"ignored":false,"code":"/**\n* Wait until the test condition is true or a timeout occurs. Useful for waiting\n* on a server response or for a ui change (fadeIn, etc.) to occur.\n*\n* @param testFx javascript condition that evaluates to a boolean,\n* it can be passed in as a string (e.g.: \"1 == 1\" or \"$('#bar').is(':visible')\" or\n* as a callback function.\n* @param onReady what to do when testFx condition is fulfilled,\n* it can be passed in as a string (e.g.: \"1 == 1\" or \"$('#bar').is(':visible')\" or\n* as a callback function.\n* @param timeOutMillis the max amount of time to wait. If not specified, 3 sec is used.\n*/\nfunction waitFor(testFx, onReady, timeOutMillis) {\n    var maxtimeOutMillis = timeOutMillis ? timeOutMillis : 3001,\n        //< Default Max Timout is 3s\n    start = new Date().getTime(),\n        condition = false,\n        interval = setInterval(function () {\n        if (new Date().getTime() - start < maxtimeOutMillis && !condition) {\n            // If not time-out yet and condition not yet fulfilled\n            condition = typeof testFx === \"string\" ? module.runModuleSetters(eval(testFx)) : testFx(); //< defensive code\n        } else {\n                if (!condition) {\n                    // If condition still not fulfilled (timeout but condition is 'false')\n                    console.log(\"'waitFor()' timeout\");\n                    phantom.exit(1);\n                } else {\n                    // Condition fulfilled (timeout and/or condition is 'true')\n                    typeof onReady === \"string\" ? module.runModuleSetters(eval(onReady)) : onReady(); //< Do what it's supposed to do once the condition is fulfilled\n                    clearInterval(interval); //< Stop this interval\n                }\n            }\n    }, 100); //< repeat check every 250ms\n};\n\nif (phantom.args.length === 0 || phantom.args.length > 2) {\n    console.log('Usage: run-qunit.js URL');\n    phantom.exit();\n}\n\nvar page = new WebPage();\n\n// Route \"console.log()\" calls from within the Page context to the main Phantom context (i.e. current \"this\")\npage.onConsoleMessage = function (msg) {\n    console.log(msg);\n};\n\npage.open(phantom.args[0], function (status) {\n    if (status !== \"success\") {\n        console.log(\"Unable to access network\");\n        phantom.exit();\n    } else {\n        waitFor(function () {\n            return page.evaluate(function () {\n                var el = document.getElementById('qunit-testresult');\n                if (el && el.innerText.match('completed')) {\n                    return true;\n                }\n                return false;\n            });\n        }, function () {\n            var failedNum = page.evaluate(function () {\n                var el = document.getElementById('qunit-testresult');\n                try {\n                    return el.getElementsByClassName('failed')[0].innerHTML;\n                } catch (e) {}\n                return 10000;\n            });\n            phantom.exit(parseInt(failedNum, 10) > 0 ? 1 : 0);\n        });\n    }\n});","ast":null,"map":{"version":3,"sources":["/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/modernizr/test/qunit/run-qunit.js"],"names":[],"mappings":";;;;;;;;;;;;AAYA,SAAS,OAAT,CAAiB,MAAjB,EAAyB,OAAzB,EAAkC,aAAlC,EAAiD;AAC7C,QAAI,mBAAmB,gBAAgB,aAAhB,GAAgC,IAAvD;AAAA,Q;AACI,YAAQ,IAAI,IAAJ,GAAW,OAAX,EADZ;AAAA,QAEI,YAAY,KAFhB;AAAA,QAGI,WAAW,YAAY,YAAW;AAC9B,YAAM,IAAI,IAAJ,GAAW,OAAX,KAAuB,KAAvB,GAA+B,gBAAhC,IAAqD,CAAC,SAA3D,EAAuE;;AAEnE,wBAAa,OAAO,MAAP,KAAmB,QAAnB,GAA8B,KAAK,MAAL,CAA9B,GAA6C,QAA1D,C;AACH,SAHD,MAGO;AACH,oBAAG,CAAC,SAAJ,EAAe;;AAEX,4BAAQ,GAAR,CAAY,qBAAZ;AACA,4BAAQ,IAAR,CAAa,CAAb;AACH,iBAJD,MAIO;;AAEH,2BAAO,OAAP,KAAoB,QAApB,GAA+B,KAAK,OAAL,CAA/B,GAA+C,SAA/C,C;AACA,kCAAc,QAAd,E;AACH;AACJ;AACJ,KAfU,EAeR,GAfQ,CAHf,C;AAmBH;;AAGD,IAAI,QAAQ,IAAR,CAAa,MAAb,KAAwB,CAAxB,IAA6B,QAAQ,IAAR,CAAa,MAAb,GAAsB,CAAvD,EAA0D;AACtD,YAAQ,GAAR,CAAY,yBAAZ;AACA,YAAQ,IAAR;AACH;;AAED,IAAI,OAAO,IAAI,OAAJ,EAAX;;;AAGA,KAAK,gBAAL,GAAwB,UAAS,GAAT,EAAc;AAClC,YAAQ,GAAR,CAAY,GAAZ;AACH,CAFD;;AAIA,KAAK,IAAL,CAAU,QAAQ,IAAR,CAAa,CAAb,CAAV,EAA2B,UAAS,MAAT,EAAgB;AACvC,QAAI,WAAW,SAAf,EAA0B;AACtB,gBAAQ,GAAR,CAAY,0BAAZ;AACA,gBAAQ,IAAR;AACH,KAHD,MAGO;AACH,gBAAQ,YAAU;AACd,mBAAO,KAAK,QAAL,CAAc,YAAU;AAC3B,oBAAI,KAAK,SAAS,cAAT,CAAwB,kBAAxB,CAAT;AACA,oBAAI,MAAM,GAAG,SAAH,CAAa,KAAb,CAAmB,WAAnB,CAAV,EAA2C;AACvC,2BAAO,IAAP;AACH;AACD,uBAAO,KAAP;AACH,aANM,CAAP;AAOH,SARD,EAQG,YAAU;AACT,gBAAI,YAAY,KAAK,QAAL,CAAc,YAAU;AACpC,oBAAI,KAAK,SAAS,cAAT,CAAwB,kBAAxB,CAAT;AACA,oBAAI;AACA,2BAAO,GAAG,sBAAH,CAA0B,QAA1B,EAAoC,CAApC,EAAuC,SAA9C;AACH,iBAFD,CAEE,OAAO,CAAP,EAAU,CAAG;AACf,uBAAO,KAAP;AACH,aANe,CAAhB;AAOA,oBAAQ,IAAR,CAAc,SAAS,SAAT,EAAoB,EAApB,IAA0B,CAA3B,GAAgC,CAAhC,GAAoC,CAAjD;AACH,SAjBD;AAkBH;AACJ,CAxBD","file":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/modernizr/test/qunit/run-qunit.js.map","sourcesContent":["/**\n* Wait until the test condition is true or a timeout occurs. Useful for waiting\n* on a server response or for a ui change (fadeIn, etc.) to occur.\n*\n* @param testFx javascript condition that evaluates to a boolean,\n* it can be passed in as a string (e.g.: \"1 == 1\" or \"$('#bar').is(':visible')\" or\n* as a callback function.\n* @param onReady what to do when testFx condition is fulfilled,\n* it can be passed in as a string (e.g.: \"1 == 1\" or \"$('#bar').is(':visible')\" or\n* as a callback function.\n* @param timeOutMillis the max amount of time to wait. If not specified, 3 sec is used.\n*/\nfunction waitFor(testFx, onReady, timeOutMillis) {\n    var maxtimeOutMillis = timeOutMillis ? timeOutMillis : 3001, //< Default Max Timout is 3s\n        start = new Date().getTime(),\n        condition = false,\n        interval = setInterval(function() {\n            if ( (new Date().getTime() - start < maxtimeOutMillis) && !condition ) {\n                // If not time-out yet and condition not yet fulfilled\n                condition = (typeof(testFx) === \"string\" ? eval(testFx) : testFx()); //< defensive code\n            } else {\n                if(!condition) {\n                    // If condition still not fulfilled (timeout but condition is 'false')\n                    console.log(\"'waitFor()' timeout\");\n                    phantom.exit(1);\n                } else {\n                    // Condition fulfilled (timeout and/or condition is 'true')\n                    typeof(onReady) === \"string\" ? eval(onReady) : onReady(); //< Do what it's supposed to do once the condition is fulfilled\n                    clearInterval(interval); //< Stop this interval\n                }\n            }\n        }, 100); //< repeat check every 250ms\n};\n\n\nif (phantom.args.length === 0 || phantom.args.length > 2) {\n    console.log('Usage: run-qunit.js URL');\n    phantom.exit();\n}\n\nvar page = new WebPage();\n\n// Route \"console.log()\" calls from within the Page context to the main Phantom context (i.e. current \"this\")\npage.onConsoleMessage = function(msg) {\n    console.log(msg);\n};\n\npage.open(phantom.args[0], function(status){\n    if (status !== \"success\") {\n        console.log(\"Unable to access network\");\n        phantom.exit();\n    } else {\n        waitFor(function(){\n            return page.evaluate(function(){\n                var el = document.getElementById('qunit-testresult');\n                if (el && el.innerText.match('completed')) {\n                    return true;\n                }\n                return false;\n            });\n        }, function(){\n            var failedNum = page.evaluate(function(){\n                var el = document.getElementById('qunit-testresult');\n                try {\n                    return el.getElementsByClassName('failed')[0].innerHTML;\n                } catch (e) { }\n                return 10000;\n            });\n            phantom.exit((parseInt(failedNum, 10) > 0) ? 1 : 0);\n        });\n    }\n});"]},"hash":"9b813a49845ec08a22ecf0d4b5642060177c61b5"}
