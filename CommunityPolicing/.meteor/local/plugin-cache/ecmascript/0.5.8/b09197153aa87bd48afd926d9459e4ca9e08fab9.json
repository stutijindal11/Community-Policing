{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.sticky.js","filenameRelative":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.sticky.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.sticky.js.map","sourceFileName":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.sticky.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"foundation.sticky"},"ignored":false,"code":"/**\n * Sticky module.\n * @module foundation.sticky\n * @requires foundation.util.triggers\n * @requires foundation.util.mediaQuery\n */\n!function ($, Foundation) {\n  'use strict';\n\n  /**\n   * Creates a new instance of a sticky thing.\n   * @class\n   * @param {jQuery} element - jQuery object to make sticky.\n   * @param {Object} options - options object passed when creating the element programmatically.\n   */\n\n  function Sticky(element, options) {\n    this.$element = element;\n    this.options = $.extend({}, Sticky.defaults, this.$element.data(), options);\n\n    this._init();\n\n    Foundation.registerPlugin(this);\n  }\n  Sticky.defaults = {\n    /**\n     * Customizable container template. Add your own classes for styling and sizing.\n     * @option\n     * @example '<div data-sticky-container class=\"small-6 columns\"></div>'\n     */\n    container: '<div data-sticky-container></div>',\n    /**\n     * Location in the view the element sticks to.\n     * @option\n     * @example 'top'\n     */\n    stickTo: 'top',\n    /**\n     * If anchored to a single element, the id of that element.\n     * @option\n     * @example 'exampleId'\n     */\n    anchor: '',\n    /**\n     * If using more than one element as anchor points, the id of the top anchor.\n     * @option\n     * @example 'exampleId:top'\n     */\n    topAnchor: '',\n    /**\n     * If using more than one element as anchor points, the id of the bottom anchor.\n     * @option\n     * @example 'exampleId:bottom'\n     */\n    btmAnchor: '',\n    /**\n     * Margin, in `em`'s to apply to the top of the element when it becomes sticky.\n     * @option\n     * @example 1\n     */\n    marginTop: 1,\n    /**\n     * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.\n     * @option\n     * @example 1\n     */\n    marginBottom: 1,\n    /**\n     * Breakpoint string that is the minimum screen size an element should become sticky.\n     * @option\n     * @example 'medium'\n     */\n    stickyOn: 'medium',\n    /**\n     * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.\n     * @option\n     * @example 'sticky'\n     */\n    stickyClass: 'sticky',\n    /**\n     * Class applied to sticky container. Foundation defaults to `sticky-container`.\n     * @option\n     * @example 'sticky-container'\n     */\n    containerClass: 'sticky-container',\n    /**\n     * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.\n     * @option\n     * @example 50\n     */\n    checkEvery: -1\n  };\n\n  /**\n   * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes\n   * Also triggered by Foundation._reflow\n   * @function\n   * @private\n   */\n  Sticky.prototype._init = function () {\n    var $parent = this.$element.parent('[data-sticky-container]'),\n        id = this.$element[0].id || Foundation.GetYoDigits(6, 'sticky'),\n        _this = this;\n\n    if (!$parent.length) {\n      this.wasWrapped = true;\n    }\n    this.$container = $parent.length ? $parent : $(this.options.container).wrapInner(this.$element);\n    this.$container.addClass(this.options.containerClass);\n\n    this.$element.addClass(this.options.stickyClass).attr({ 'data-resize': id });\n\n    this.scrollCount = this.options.checkEvery;\n    this.isStuck = false;\n    // console.log(this.options.anchor, this.options.topAnchor);\n    if (this.options.topAnchor !== '') {\n      this._parsePoints();\n      // console.log(this.points[0]);\n    } else {\n        this.$anchor = this.options.anchor ? $('#' + this.options.anchor) : $(document.body);\n      }\n\n    this._setSizes(function () {\n      _this._calc(false);\n    });\n    this._events(id.split('-').reverse().join('-'));\n  };\n  /**\n   * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.\n   * @function\n   * @private\n   */\n  Sticky.prototype._parsePoints = function () {\n    var top = this.options.topAnchor,\n        btm = this.options.btmAnchor,\n        pts = [top, btm],\n        breaks = {};\n    for (var i = 0, len = pts.length; i < len && pts[i]; i++) {\n      var pt;\n      if (typeof pts[i] === 'number') {\n        pt = pts[i];\n      } else {\n        var place = pts[i].split(':'),\n            anchor = $('#' + place[0]);\n\n        pt = anchor.offset().top;\n        if (place[1] && place[1].toLowerCase() === 'bottom') {\n          pt += anchor[0].getBoundingClientRect().height;\n        }\n      }\n      breaks[i] = pt;\n    }\n    // console.log(breaks);\n    this.points = breaks;\n    // console.log(this.points);\n    return;\n  };\n\n  /**\n   * Adds event handlers for the scrolling element.\n   * @private\n   * @param {String} id - psuedo-random id for unique scroll event listener.\n   */\n  Sticky.prototype._events = function (id) {\n    // console.log('called');\n    var _this = this,\n        scrollListener = 'scroll.zf.' + id;\n    if (this.isOn) {\n      return;\n    }\n    if (this.canStick) {\n      this.isOn = true;\n      // this.$anchor.off('change.zf.sticky')\n      //             .on('change.zf.sticky', function(){\n      //               _this._setSizes(function(){\n      //                 _this._calc(false);\n      //               });\n      //             });\n\n      $(window).off(scrollListener).on(scrollListener, function (e) {\n        if (_this.scrollCount === 0) {\n          _this.scrollCount = _this.options.checkEvery;\n          _this._setSizes(function () {\n            _this._calc(false, window.pageYOffset);\n          });\n        } else {\n          _this.scrollCount--;\n          _this._calc(false, window.pageYOffset);\n        }\n      });\n    }\n\n    this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function (e, el) {\n      _this._setSizes(function () {\n        _this._calc(false);\n        if (_this.canStick) {\n          if (!_this.isOn) {\n            _this._events(id);\n          }\n        } else if (_this.isOn) {\n          _this._pauseListeners(scrollListener);\n        }\n      });\n    });\n  };\n\n  /**\n   * Removes event handlers for scroll and change events on anchor.\n   * @fires Sticky#pause\n   * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`\n   */\n  Sticky.prototype._pauseListeners = function (scrollListener) {\n    this.isOn = false;\n    // this.$anchor.off('change.zf.sticky');\n    $(window).off(scrollListener);\n\n    /**\n     * Fires when the plugin is paused due to resize event shrinking the view.\n     * @event Sticky#pause\n     * @private\n     */\n    this.$element.trigger('pause.zf.sticky');\n  };\n\n  /**\n   * Called on every `scroll` event and on `_init`\n   * fires functions based on booleans and cached values\n   * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.\n   * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.\n   */\n  Sticky.prototype._calc = function (checkSizes, scroll) {\n    if (checkSizes) {\n      this._setSizes();\n    }\n\n    if (!this.canStick) {\n      if (this.isStuck) {\n        this._removeSticky(true);\n      }\n      return false;\n    }\n\n    if (!scroll) {\n      scroll = window.pageYOffset;\n    }\n\n    if (scroll >= this.topPoint) {\n      if (scroll <= this.bottomPoint) {\n        if (!this.isStuck) {\n          this._setSticky();\n        }\n      } else {\n        if (this.isStuck) {\n          this._removeSticky(false);\n        }\n      }\n    } else {\n      if (this.isStuck) {\n        this._removeSticky(true);\n      }\n    }\n  };\n  /**\n   * Causes the $element to become stuck.\n   * Adds `position: fixed;`, and helper classes.\n   * @fires Sticky#stuckto\n   * @function\n   * @private\n   */\n  Sticky.prototype._setSticky = function () {\n    var stickTo = this.options.stickTo,\n        mrgn = stickTo === 'top' ? 'marginTop' : 'marginBottom',\n        notStuckTo = stickTo === 'top' ? 'bottom' : 'top',\n        css = {};\n\n    css[mrgn] = this.options[mrgn] + 'em';\n    css[stickTo] = 0;\n    css[notStuckTo] = 'auto';\n    css['left'] = this.$container.offset().left + parseInt(window.getComputedStyle(this.$container[0])[\"padding-left\"], 10);\n    this.isStuck = true;\n    this.$element.removeClass('is-anchored is-at-' + notStuckTo).addClass('is-stuck is-at-' + stickTo).css(css)\n    /**\n     * Fires when the $element has become `position: fixed;`\n     * Namespaced to `top` or `bottom`.\n     * @event Sticky#stuckto\n     */\n    .trigger('sticky.zf.stuckto:' + stickTo);\n  };\n\n  /**\n   * Causes the $element to become unstuck.\n   * Removes `position: fixed;`, and helper classes.\n   * Adds other helper classes.\n   * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.\n   * @fires Sticky#unstuckfrom\n   * @private\n   */\n  Sticky.prototype._removeSticky = function (isTop) {\n    var stickTo = this.options.stickTo,\n        stickToTop = stickTo === 'top',\n        css = {},\n        mrgn,\n        notStuckTo,\n        anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight;\n    mrgn = stickToTop ? 'marginTop' : 'marginBottom';\n    notStuckTo = stickToTop ? 'bottom' : 'top';\n    css[mrgn] = 0;\n    if (isTop && !stickToTop || stickToTop && !isTop) {\n      css[stickTo] = anchorPt;\n      css[notStuckTo] = 0;\n    } else {\n      css[stickTo] = 0;\n      css[notStuckTo] = anchorPt;\n    }\n    css['left'] = '';\n    this.isStuck = false;\n    this.$element.removeClass('is-stuck is-at-' + stickTo).addClass('is-anchored is-at-' + (isTop ? 'top' : 'bottom')).css(css)\n    /**\n     * Fires when the $element has become anchored.\n     * Namespaced to `top` or `bottom`.\n     * @event Sticky#unstuckfrom\n     */\n    .trigger('sticky.zf.unstuckfrom:' + isTop ? 'top' : 'bottom');\n  };\n\n  /**\n   * Sets the $element and $container sizes for plugin.\n   * Calls `_setBreakPoints`.\n   * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.\n   * @private\n   */\n  Sticky.prototype._setSizes = function (cb) {\n    this.canStick = Foundation.MediaQuery.atLeast(this.options.stickyOn);\n    if (!this.canStick) {\n      cb();\n    }\n    var _this = this,\n        newElemWidth = this.$container[0].getBoundingClientRect().width,\n        comp = window.getComputedStyle(this.$container[0]),\n        pdng = parseInt(comp['padding-right'], 10);\n\n    // console.log(this.$anchor);\n    if (this.$anchor && this.$anchor.length) {\n      this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;\n    } else {\n      this._parsePoints();\n    }\n\n    this.$element.css({\n      'max-width': newElemWidth - pdng + 'px'\n    });\n\n    var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;\n    this.containerHeight = newContainerHeight;\n    this.$container.css({\n      height: newContainerHeight\n    });\n    this.elemHeight = newContainerHeight;\n\n    if (this.isStuck) {\n      this.$element.css({ \"left\": this.$container.offset().left + parseInt(comp['padding-left'], 10) });\n    }\n\n    this._setBreakPoints(newContainerHeight, function () {\n      if (cb) {\n        cb();\n      }\n    });\n  };\n  /**\n   * Sets the upper and lower breakpoints for the element to become sticky/unsticky.\n   * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.\n   * @param {Function} cb - optional callback function to be called on completion.\n   * @private\n   */\n  Sticky.prototype._setBreakPoints = function (elemHeight, cb) {\n    if (!this.canStick) {\n      if (cb) {\n        cb();\n      } else {\n        return false;\n      }\n    }\n    var mTop = emCalc(this.options.marginTop),\n        mBtm = emCalc(this.options.marginBottom),\n        topPoint = this.points ? this.points[0] : this.$anchor.offset().top,\n        bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight,\n\n    // topPoint = this.$anchor.offset().top || this.points[0],\n    // bottomPoint = topPoint + this.anchorHeight || this.points[1],\n    winHeight = window.innerHeight;\n\n    if (this.options.stickTo === 'top') {\n      topPoint -= mTop;\n      bottomPoint -= elemHeight + mTop;\n    } else if (this.options.stickTo === 'bottom') {\n      topPoint -= winHeight - (elemHeight + mBtm);\n      bottomPoint -= winHeight - mBtm;\n    } else {\n      //this would be the stickTo: both option... tricky\n    }\n\n    this.topPoint = topPoint;\n    this.bottomPoint = bottomPoint;\n\n    if (cb) {\n      cb();\n    }\n  };\n\n  /**\n   * Destroys the current sticky element.\n   * Resets the element to the top position first.\n   * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.\n   * @function\n   */\n  Sticky.prototype.destroy = function () {\n    this._removeSticky(true);\n\n    this.$element.removeClass(this.options.stickyClass + ' is-anchored is-at-top').css({\n      height: '',\n      top: '',\n      bottom: '',\n      'max-width': ''\n    }).off('resizeme.zf.trigger');\n\n    this.$anchor.off('change.zf.sticky');\n    $(window).off('scroll.zf.sticky');\n\n    if (this.wasWrapped) {\n      this.$element.unwrap();\n    } else {\n      this.$container.removeClass(this.options.containerClass).css({\n        height: ''\n      });\n    }\n    Foundation.unregisterPlugin(this);\n  };\n  /**\n   * Helper function to calculate em values\n   * @param Number {em} - number of em's to calculate into pixels\n   */\n  function emCalc(em) {\n    return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;\n  }\n  Foundation.plugin(Sticky, 'Sticky');\n}(jQuery, window.Foundation);","ast":null,"map":{"version":3,"sources":["/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.sticky.js"],"names":[],"mappings":"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","file":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.sticky.js.map","sourcesContent":["/**\n * Sticky module.\n * @module foundation.sticky\n * @requires foundation.util.triggers\n * @requires foundation.util.mediaQuery\n */\n!function($, Foundation){\n  'use strict';\n\n  /**\n   * Creates a new instance of a sticky thing.\n   * @class\n   * @param {jQuery} element - jQuery object to make sticky.\n   * @param {Object} options - options object passed when creating the element programmatically.\n   */\n  function Sticky(element, options){\n    this.$element = element;\n    this.options = $.extend({}, Sticky.defaults, this.$element.data(), options);\n\n    this._init();\n\n    Foundation.registerPlugin(this);\n  }\n  Sticky.defaults = {\n    /**\n     * Customizable container template. Add your own classes for styling and sizing.\n     * @option\n     * @example '<div data-sticky-container class=\"small-6 columns\"></div>'\n     */\n    container: '<div data-sticky-container></div>',\n    /**\n     * Location in the view the element sticks to.\n     * @option\n     * @example 'top'\n     */\n    stickTo: 'top',\n    /**\n     * If anchored to a single element, the id of that element.\n     * @option\n     * @example 'exampleId'\n     */\n    anchor: '',\n    /**\n     * If using more than one element as anchor points, the id of the top anchor.\n     * @option\n     * @example 'exampleId:top'\n     */\n    topAnchor: '',\n    /**\n     * If using more than one element as anchor points, the id of the bottom anchor.\n     * @option\n     * @example 'exampleId:bottom'\n     */\n    btmAnchor: '',\n    /**\n     * Margin, in `em`'s to apply to the top of the element when it becomes sticky.\n     * @option\n     * @example 1\n     */\n    marginTop: 1,\n    /**\n     * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.\n     * @option\n     * @example 1\n     */\n    marginBottom: 1,\n    /**\n     * Breakpoint string that is the minimum screen size an element should become sticky.\n     * @option\n     * @example 'medium'\n     */\n    stickyOn: 'medium',\n    /**\n     * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.\n     * @option\n     * @example 'sticky'\n     */\n    stickyClass: 'sticky',\n    /**\n     * Class applied to sticky container. Foundation defaults to `sticky-container`.\n     * @option\n     * @example 'sticky-container'\n     */\n    containerClass: 'sticky-container',\n    /**\n     * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.\n     * @option\n     * @example 50\n     */\n    checkEvery: -1\n  };\n\n  /**\n   * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes\n   * Also triggered by Foundation._reflow\n   * @function\n   * @private\n   */\n  Sticky.prototype._init = function(){\n    var $parent = this.$element.parent('[data-sticky-container]'),\n        id = this.$element[0].id || Foundation.GetYoDigits(6, 'sticky'),\n        _this = this;\n\n    if(!$parent.length){\n      this.wasWrapped = true;\n    }\n    this.$container = $parent.length ? $parent : $(this.options.container).wrapInner(this.$element);\n    this.$container.addClass(this.options.containerClass);\n\n\n    this.$element.addClass(this.options.stickyClass)\n                 .attr({'data-resize': id});\n\n    this.scrollCount = this.options.checkEvery;\n    this.isStuck = false;\n    // console.log(this.options.anchor, this.options.topAnchor);\n    if(this.options.topAnchor !== ''){\n      this._parsePoints();\n      // console.log(this.points[0]);\n    }else{\n      this.$anchor = this.options.anchor ? $('#' + this.options.anchor) : $(document.body);\n    }\n\n\n    this._setSizes(function(){\n      _this._calc(false);\n    });\n    this._events(id.split('-').reverse().join('-'));\n  };\n  /**\n   * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.\n   * @function\n   * @private\n   */\n  Sticky.prototype._parsePoints = function(){\n    var top = this.options.topAnchor,\n        btm = this.options.btmAnchor,\n        pts = [top, btm],\n        breaks = {};\n    for(var i = 0, len = pts.length; i < len && pts[i]; i++){\n      var pt;\n      if(typeof pts[i] === 'number'){\n        pt = pts[i];\n      }else{\n        var place = pts[i].split(':'),\n            anchor = $('#' + place[0]);\n\n        pt = anchor.offset().top;\n        if(place[1] && place[1].toLowerCase() === 'bottom'){\n          pt += anchor[0].getBoundingClientRect().height;\n        }\n      }\n      breaks[i] = pt;\n    }\n      // console.log(breaks);\n    this.points = breaks;\n    // console.log(this.points);\n    return;\n  };\n\n  /**\n   * Adds event handlers for the scrolling element.\n   * @private\n   * @param {String} id - psuedo-random id for unique scroll event listener.\n   */\n  Sticky.prototype._events = function(id){\n    // console.log('called');\n    var _this = this,\n        scrollListener = 'scroll.zf.' + id;\n    if(this.isOn){ return; }\n    if(this.canStick){\n      this.isOn = true;\n      // this.$anchor.off('change.zf.sticky')\n      //             .on('change.zf.sticky', function(){\n      //               _this._setSizes(function(){\n      //                 _this._calc(false);\n      //               });\n      //             });\n\n      $(window).off(scrollListener)\n               .on(scrollListener, function(e){\n                 if(_this.scrollCount === 0){\n                   _this.scrollCount = _this.options.checkEvery;\n                   _this._setSizes(function(){\n                     _this._calc(false, window.pageYOffset);\n                   });\n                 }else{\n                   _this.scrollCount--;\n                   _this._calc(false, window.pageYOffset);\n                 }\n              });\n    }\n\n    this.$element.off('resizeme.zf.trigger')\n                 .on('resizeme.zf.trigger', function(e, el){\n                     _this._setSizes(function(){\n                       _this._calc(false);\n                       if(_this.canStick){\n                         if(!_this.isOn){\n                           _this._events(id);\n                         }\n                       }else if(_this.isOn){\n                         _this._pauseListeners(scrollListener);\n                       }\n                     });\n    });\n  };\n\n  /**\n   * Removes event handlers for scroll and change events on anchor.\n   * @fires Sticky#pause\n   * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`\n   */\n  Sticky.prototype._pauseListeners = function(scrollListener){\n    this.isOn = false;\n    // this.$anchor.off('change.zf.sticky');\n    $(window).off(scrollListener);\n\n    /**\n     * Fires when the plugin is paused due to resize event shrinking the view.\n     * @event Sticky#pause\n     * @private\n     */\n     this.$element.trigger('pause.zf.sticky');\n  };\n\n  /**\n   * Called on every `scroll` event and on `_init`\n   * fires functions based on booleans and cached values\n   * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.\n   * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.\n   */\n  Sticky.prototype._calc = function(checkSizes, scroll){\n    if(checkSizes){ this._setSizes(); }\n\n    if(!this.canStick){\n      if(this.isStuck){\n        this._removeSticky(true);\n      }\n      return false;\n    }\n\n    if(!scroll){ scroll = window.pageYOffset; }\n\n    if(scroll >= this.topPoint){\n      if(scroll <= this.bottomPoint){\n        if(!this.isStuck){\n          this._setSticky();\n        }\n      }else{\n        if(this.isStuck){\n          this._removeSticky(false);\n        }\n      }\n    }else{\n      if(this.isStuck){\n        this._removeSticky(true);\n      }\n    }\n  };\n  /**\n   * Causes the $element to become stuck.\n   * Adds `position: fixed;`, and helper classes.\n   * @fires Sticky#stuckto\n   * @function\n   * @private\n   */\n  Sticky.prototype._setSticky = function(){\n    var stickTo = this.options.stickTo,\n        mrgn = stickTo === 'top' ? 'marginTop' : 'marginBottom',\n        notStuckTo = stickTo === 'top' ? 'bottom' : 'top',\n        css = {};\n\n    css[mrgn] = this.options[mrgn] + 'em';\n    css[stickTo] = 0;\n    css[notStuckTo] = 'auto';\n    css['left'] = this.$container.offset().left + parseInt(window.getComputedStyle(this.$container[0])[\"padding-left\"], 10);\n    this.isStuck = true;\n    this.$element.removeClass('is-anchored is-at-' + notStuckTo)\n                 .addClass('is-stuck is-at-' + stickTo)\n                 .css(css)\n                 /**\n                  * Fires when the $element has become `position: fixed;`\n                  * Namespaced to `top` or `bottom`.\n                  * @event Sticky#stuckto\n                  */\n                 .trigger('sticky.zf.stuckto:' + stickTo);\n  };\n\n  /**\n   * Causes the $element to become unstuck.\n   * Removes `position: fixed;`, and helper classes.\n   * Adds other helper classes.\n   * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.\n   * @fires Sticky#unstuckfrom\n   * @private\n   */\n  Sticky.prototype._removeSticky = function(isTop){\n    var stickTo = this.options.stickTo,\n        stickToTop = stickTo === 'top',\n        css = {}, mrgn, notStuckTo,\n        anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight;\n        mrgn = stickToTop ? 'marginTop' : 'marginBottom';\n        notStuckTo = stickToTop ? 'bottom' : 'top';\n      css[mrgn] = 0;\n    if((isTop && !stickToTop) || (stickToTop && !isTop)){\n      css[stickTo] = anchorPt;\n      css[notStuckTo] = 0;\n    }else{\n      css[stickTo] = 0;\n      css[notStuckTo] = anchorPt;\n    }\n    css['left'] = '';\n    this.isStuck = false;\n    this.$element.removeClass('is-stuck is-at-' + stickTo)\n                 .addClass('is-anchored is-at-' + (isTop ? 'top' : 'bottom'))\n                 .css(css)\n                 /**\n                  * Fires when the $element has become anchored.\n                  * Namespaced to `top` or `bottom`.\n                  * @event Sticky#unstuckfrom\n                  */\n                 .trigger('sticky.zf.unstuckfrom:' + isTop ? 'top' : 'bottom');\n  };\n\n  /**\n   * Sets the $element and $container sizes for plugin.\n   * Calls `_setBreakPoints`.\n   * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.\n   * @private\n   */\n  Sticky.prototype._setSizes = function(cb){\n    this.canStick = Foundation.MediaQuery.atLeast(this.options.stickyOn);\n    if(!this.canStick){ cb(); }\n    var _this = this,\n        newElemWidth = this.$container[0].getBoundingClientRect().width,\n        comp = window.getComputedStyle(this.$container[0]),\n        pdng = parseInt(comp['padding-right'], 10);\n\n    // console.log(this.$anchor);\n    if(this.$anchor && this.$anchor.length){\n      this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;\n    }else{\n      this._parsePoints();\n    }\n\n    this.$element.css({\n      'max-width': newElemWidth - pdng + 'px'\n    });\n\n    var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;\n    this.containerHeight = newContainerHeight;\n    this.$container.css({\n      height: newContainerHeight\n    });\n    this.elemHeight = newContainerHeight;\n\n  \tif (this.isStuck) {\n  \t\tthis.$element.css({\"left\":this.$container.offset().left + parseInt(comp['padding-left'], 10)});\n  \t}\n\n    this._setBreakPoints(newContainerHeight, function(){\n      if(cb){ cb(); }\n    });\n\n  };\n  /**\n   * Sets the upper and lower breakpoints for the element to become sticky/unsticky.\n   * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.\n   * @param {Function} cb - optional callback function to be called on completion.\n   * @private\n   */\n  Sticky.prototype._setBreakPoints = function(elemHeight, cb){\n    if(!this.canStick){\n      if(cb){ cb(); }\n      else{ return false; }\n    }\n    var mTop = emCalc(this.options.marginTop),\n        mBtm = emCalc(this.options.marginBottom),\n        topPoint = this.points ? this.points[0] : this.$anchor.offset().top,\n        bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight,\n        // topPoint = this.$anchor.offset().top || this.points[0],\n        // bottomPoint = topPoint + this.anchorHeight || this.points[1],\n        winHeight = window.innerHeight;\n\n    if(this.options.stickTo === 'top'){\n      topPoint -= mTop;\n      bottomPoint -= (elemHeight + mTop);\n    }else if(this.options.stickTo === 'bottom'){\n      topPoint -= (winHeight - (elemHeight + mBtm));\n      bottomPoint -= (winHeight - mBtm);\n    }else{\n      //this would be the stickTo: both option... tricky\n    }\n\n    this.topPoint = topPoint;\n    this.bottomPoint = bottomPoint;\n\n    if(cb){ cb(); }\n  };\n\n  /**\n   * Destroys the current sticky element.\n   * Resets the element to the top position first.\n   * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.\n   * @function\n   */\n  Sticky.prototype.destroy = function(){\n    this._removeSticky(true);\n\n    this.$element.removeClass(this.options.stickyClass + ' is-anchored is-at-top')\n                 .css({\n                   height: '',\n                   top: '',\n                   bottom: '',\n                   'max-width': ''\n                 })\n                 .off('resizeme.zf.trigger');\n\n    this.$anchor.off('change.zf.sticky');\n    $(window).off('scroll.zf.sticky');\n\n    if(this.wasWrapped){\n      this.$element.unwrap();\n    }else{\n      this.$container.removeClass(this.options.containerClass)\n                     .css({\n                       height: ''\n                     });\n    }\n    Foundation.unregisterPlugin(this);\n  };\n  /**\n   * Helper function to calculate em values\n   * @param Number {em} - number of em's to calculate into pixels\n   */\n  function emCalc(em){\n    return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;\n  }\n  Foundation.plugin(Sticky, 'Sticky');\n}(jQuery, window.Foundation);\n"]},"hash":"b09197153aa87bd48afd926d9459e4ca9e08fab9"}
