{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.reveal.js","filenameRelative":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.reveal.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.reveal.js.map","sourceFileName":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.reveal.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"foundation.reveal"},"ignored":false,"code":"/**\n * Reveal module.\n * @module foundation.reveal\n * @requires foundation.util.keyboard\n * @requires foundation.util.box\n * @requires foundation.util.triggers\n * @requires foundation.util.mediaQuery\n * @requires foundation.util.motion if using animations\n */\n!function (Foundation, $) {\n  'use strict';\n\n  /**\n   * Creates a new instance of Reveal.\n   * @class\n   * @param {jQuery} element - jQuery object to use for the modal.\n   * @param {Object} options - optional parameters.\n   */\n\n  function Reveal(element, options) {\n    this.$element = element;\n    this.options = $.extend({}, Reveal.defaults, this.$element.data(), options);\n    this._init();\n\n    Foundation.registerPlugin(this);\n    Foundation.Keyboard.register('Reveal', {\n      'ENTER': 'open',\n      'SPACE': 'open',\n      'ESCAPE': 'close',\n      'TAB': 'tab_forward',\n      'SHIFT_TAB': 'tab_backward'\n    });\n  }\n\n  Reveal.defaults = {\n    /**\n     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.\n     * @option\n     * @example 'slide-in-left'\n     */\n    animationIn: '',\n    /**\n     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.\n     * @option\n     * @example 'slide-out-right'\n     */\n    animationOut: '',\n    /**\n     * Time, in ms, to delay the opening of a modal after a click if no animation used.\n     * @option\n     * @example 10\n     */\n    showDelay: 0,\n    /**\n     * Time, in ms, to delay the closing of a modal after a click if no animation used.\n     * @option\n     * @example 10\n     */\n    hideDelay: 0,\n    /**\n     * Allows a click on the body/overlay to close the modal.\n     * @option\n     * @example true\n     */\n    closeOnClick: true,\n    /**\n     * Allows the modal to close if the user presses the `ESCAPE` key.\n     * @option\n     * @example true\n     */\n    closeOnEsc: true,\n    /**\n     * If true, allows multiple modals to be displayed at once.\n     * @option\n     * @example false\n     */\n    multipleOpened: false,\n    /**\n     * Distance, in pixels, the modal should push down from the top of the screen.\n     * @option\n     * @example 100\n     */\n    vOffset: 100,\n    /**\n     * Distance, in pixels, the modal should push in from the side of the screen.\n     * @option\n     * @example 0\n     */\n    hOffset: 0,\n    /**\n     * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.\n     * @option\n     * @example false\n     */\n    fullScreen: false,\n    /**\n     * Percentage of screen height the modal should push up from the bottom of the view.\n     * @option\n     * @example 10\n     */\n    btmOffsetPct: 10,\n    /**\n     * Allows the modal to generate an overlay div, which will cover the view when modal opens.\n     * @option\n     * @example true\n     */\n    overlay: true,\n    /**\n     * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api.\n     * @option\n     * @example false\n     */\n    resetOnClose: false\n  };\n\n  /**\n   * Initializes the modal by adding the overlay and close buttons, (if selected).\n   * @private\n   */\n  Reveal.prototype._init = function () {\n    this.id = this.$element.attr('id');\n    this.isActive = false;\n\n    this.$anchor = $('[data-open=\"' + this.id + '\"]').length ? $('[data-open=\"' + this.id + '\"]') : $('[data-toggle=\"' + this.id + '\"]');\n\n    if (this.$anchor.length) {\n      var anchorId = this.$anchor[0].id || Foundation.GetYoDigits(6, 'reveal');\n\n      this.$anchor.attr({\n        'aria-controls': this.id,\n        'id': anchorId,\n        'aria-haspopup': true,\n        'tabindex': 0\n      });\n      this.$element.attr({ 'aria-labelledby': anchorId });\n    }\n\n    // this.options.fullScreen = this.$element.hasClass('full');\n    if (this.options.fullScreen || this.$element.hasClass('full')) {\n      this.options.fullScreen = true;\n      this.options.overlay = false;\n    }\n    if (this.options.overlay) {\n      this.$overlay = this._makeOverlay(this.id);\n    }\n\n    this.$element.attr({\n      'role': 'dialog',\n      'aria-hidden': true,\n      'data-yeti-box': this.id,\n      'data-resize': this.id\n    });\n\n    this._events();\n  };\n\n  /**\n   * Creates an overlay div to display behind the modal.\n   * @private\n   */\n  Reveal.prototype._makeOverlay = function (id) {\n    var $overlay = $('<div></div>').addClass('reveal-overlay').attr({ 'tabindex': -1, 'aria-hidden': true }).appendTo('body');\n    if (this.options.closeOnClick) {\n      $overlay.attr({\n        'data-close': id\n      });\n    }\n    return $overlay;\n  };\n\n  /**\n   * Adds event handlers for the modal.\n   * @private\n   */\n  Reveal.prototype._events = function () {\n    var _this = this;\n\n    this.$element.on({\n      'open.zf.trigger': this.open.bind(this),\n      'close.zf.trigger': this.close.bind(this),\n      'toggle.zf.trigger': this.toggle.bind(this),\n      'resizeme.zf.trigger': function () {\n        function resizemeZfTrigger() {\n          if (_this.$element.is(':visible')) {\n            _this._setPosition(function () {});\n          }\n        }\n\n        return resizemeZfTrigger;\n      }()\n    });\n\n    if (this.$anchor.length) {\n      this.$anchor.on('keydown.zf.reveal', function (e) {\n        if (e.which === 13 || e.which === 32) {\n          e.stopPropagation();\n          e.preventDefault();\n          _this.open();\n        }\n      });\n    }\n\n    if (this.options.closeOnClick && this.options.overlay) {\n      this.$overlay.off('.zf.reveal').on('click.zf.reveal', this.close.bind(this));\n    }\n  };\n  /**\n   * Sets the position of the modal before opening\n   * @param {Function} cb - a callback function to execute when positioning is complete.\n   * @private\n   */\n  Reveal.prototype._setPosition = function (cb) {\n    var eleDims = Foundation.Box.GetDimensions(this.$element);\n    var elePos = this.options.fullScreen ? 'reveal full' : eleDims.height >= 0.5 * eleDims.windowDims.height ? 'reveal' : 'center';\n\n    if (elePos === 'reveal full') {\n      console.log('full');\n      //set to full height/width\n      this.$element.offset(Foundation.Box.GetOffsets(this.$element, null, elePos, this.options.vOffset)).css({\n        'height': eleDims.windowDims.height,\n        'width': eleDims.windowDims.width\n      });\n    } else if (!Foundation.MediaQuery.atLeast('medium') || !Foundation.Box.ImNotTouchingYou(this.$element, null, true, false)) {\n      //if smaller than medium, resize to 100% width minus any custom L/R margin\n      this.$element.css({\n        'width': eleDims.windowDims.width - this.options.hOffset * 2\n      }).offset(Foundation.Box.GetOffsets(this.$element, null, 'center', this.options.vOffset, this.options.hOffset));\n      //flag a boolean so we can reset the size after the element is closed.\n      this.changedSize = true;\n    } else {\n      this.$element.css({\n        'max-height': eleDims.windowDims.height - this.options.vOffset * (this.options.btmOffsetPct / 100 + 1),\n        'width': ''\n      }).offset(Foundation.Box.GetOffsets(this.$element, null, elePos, this.options.vOffset));\n      //the max height based on a percentage of vertical offset plus vertical offset\n    }\n\n    cb();\n  };\n\n  /**\n   * Opens the modal controlled by `this.$anchor`, and closes all others by default.\n   * @function\n   * @fires Reveal#closeAll\n   * @fires Reveal#open\n   */\n  Reveal.prototype.open = function () {\n    var _this = this;\n    this.isActive = true;\n    //make element invisible, but remove display: none so we can get size and positioning\n    this.$element.css({ 'visibility': 'hidden' }).show().scrollTop(0);\n\n    this._setPosition(function () {\n      _this.$element.hide().css({ 'visibility': '' });\n      if (!_this.options.multipleOpened) {\n        /**\n         * Fires immediately before the modal opens.\n         * Closes any other modals that are currently open\n         * @event Reveal#closeAll\n         */\n        _this.$element.trigger('closeme.zf.reveal', _this.id);\n      }\n      if (_this.options.animationIn) {\n        if (_this.options.overlay) {\n          Foundation.Motion.animateIn(_this.$overlay, 'fade-in', function () {\n            Foundation.Motion.animateIn(_this.$element, _this.options.animationIn, function () {});\n          });\n        } else {\n          Foundation.Motion.animateIn(_this.$element, _this.options.animationIn, function () {});\n        }\n      } else {\n        if (_this.options.overlay) {\n          _this.$overlay.show(0, function () {\n            _this.$element.show(_this.options.showDelay, function () {});\n          });\n        } else {\n          _this.$element.show(_this.options.showDelay, function () {});\n        }\n      }\n    });\n\n    // handle accessibility\n    this.$element.attr({ 'aria-hidden': false }).attr('tabindex', -1).focus()\n    /**\n     * Fires when the modal has successfully opened.\n     * @event Reveal#open\n     */\n    .trigger('open.zf.reveal');\n\n    $('body').addClass('is-reveal-open').attr({ 'aria-hidden': this.options.overlay || this.options.fullScreen ? true : false });\n    setTimeout(function () {\n      _this._extraHandlers();\n      // Foundation.reflow();\n    }, 0);\n  };\n\n  /**\n   * Adds extra event handlers for the body and window if necessary.\n   * @private\n   */\n  Reveal.prototype._extraHandlers = function () {\n    var _this = this;\n    var visibleFocusableElements = this.$element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function () {\n      if (!$(this).is(':visible') || $(this).attr('tabindex') < 0) {\n        return false;\n      } //only have visible elements and those that have a tabindex greater or equal 0\n      return true;\n    });\n\n    if (!this.options.overlay && this.options.closeOnClick && !this.options.fullScreen) {\n      $('body').on('click.zf.reveal', function (e) {\n        // if()\n        _this.close();\n      });\n    }\n    if (this.options.closeOnEsc) {\n      $(window).on('keydown.zf.reveal', function (e) {\n        if (visibleFocusableElements.length === 0) {\n          // no focusable elements inside the modal at all, prevent tabbing in general\n          e.preventDefault();\n        }\n        Foundation.Keyboard.handleKey(e, _this, {\n          close: function () {\n            function close() {\n              if (this.options.closeOnEsc) {\n                this.close();\n              }\n            }\n\n            return close;\n          }()\n        });\n      });\n    }\n\n    // lock focus within modal while tabbing\n    this.$element.on('keydown.zf.reveal', function (e) {\n      var $target = $(this);\n      // handle keyboard event with keyboard util\n      Foundation.Keyboard.handleKey(e, _this, {\n        tab_forward: function () {\n          function tab_forward() {\n            if (this.$element.find(':focus').is(visibleFocusableElements.eq(-1))) {\n              // left modal downwards, setting focus to first element\n              visibleFocusableElements.eq(0).focus();\n              e.preventDefault();\n            }\n          }\n\n          return tab_forward;\n        }(),\n        tab_backward: function () {\n          function tab_backward() {\n            if (this.$element.find(':focus').is(visibleFocusableElements.eq(0)) || this.$element.is(':focus')) {\n              // left modal upwards, setting focus to last element\n              visibleFocusableElements.eq(-1).focus();\n              e.preventDefault();\n            }\n          }\n\n          return tab_backward;\n        }(),\n        open: function () {\n          function open() {\n            if ($target.is(visibleFocusableElements)) {\n              // dont't trigger if acual element has focus (i.e. inputs, links, ...)\n              this.open();\n            }\n          }\n\n          return open;\n        }(),\n        close: function () {\n          function close() {\n            if (this.options.closeOnEsc) {\n              this.close();\n            }\n          }\n\n          return close;\n        }()\n      });\n      if (visibleFocusableElements.length === 0) {\n        // no focusable elements inside the modal at all, prevent tabbing in general\n        e.preventDefault();\n      }\n    });\n  };\n\n  /**\n   * Closes the modal.\n   * @function\n   * @fires Reveal#closed\n   */\n  Reveal.prototype.close = function () {\n    if (!this.isActive || !this.$element.is(':visible')) {\n      return false;\n    }\n    var _this = this;\n\n    if (this.options.animationOut) {\n      Foundation.Motion.animateOut(this.$element, this.options.animationOut, function () {\n        if (_this.options.overlay) {\n          Foundation.Motion.animateOut(_this.$overlay, 'fade-out', function () {});\n        }\n      });\n    } else {\n      this.$element.hide(_this.options.hideDelay, function () {\n        if (_this.options.overlay) {\n          _this.$overlay.hide(0, function () {});\n        }\n      });\n    }\n    //conditionals to remove extra event listeners added on open\n    if (this.options.closeOnEsc) {\n      $(window).off('keydown.zf.reveal');\n    }\n    if (!this.options.overlay && this.options.closeOnClick) {\n      $('body').off('click.zf.reveal');\n    }\n    this.$element.off('keydown.zf.reveal');\n\n    //if the modal changed size, reset it\n    if (this.changedSize) {\n      this.$element.css({\n        'height': '',\n        'width': ''\n      });\n    }\n\n    $('body').removeClass('is-reveal-open').attr({ 'aria-hidden': false, 'tabindex': '' });\n\n    /**\n    * Resets the modal content\n    * This prevents a running video to keep going in the background\n    */\n    if (this.options.resetOnClose) {\n      this.$element.html(this.$element.html());\n    }\n\n    this.isActive = false;\n    this.$element.attr({ 'aria-hidden': true })\n    /**\n     * Fires when the modal is done closing.\n     * @event Reveal#closed\n     */\n    .trigger('closed.zf.reveal');\n  };\n  /**\n   * Toggles the open/closed state of a modal.\n   * @function\n   */\n  Reveal.prototype.toggle = function () {\n    if (this.isActive) {\n      this.close();\n    } else {\n      this.open();\n    }\n  };\n\n  /**\n   * Destroys an instance of a modal.\n   * @function\n   */\n  Reveal.prototype.destroy = function () {\n    if (this.options.overlay) {\n      this.$overlay.hide().off().remove();\n    }\n    this.$element.hide();\n    this.$anchor.off();\n\n    Foundation.unregisterPlugin(this);\n  };\n\n  Foundation.plugin(Reveal, 'Reveal');\n\n  // Exports for AMD/Browserify\n  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') module.exports = Reveal;\n  if (typeof define === 'function') define(['foundation'], function () {\n    return Reveal;\n  });\n}(Foundation, jQuery);","ast":null,"map":{"version":3,"sources":["/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.reveal.js"],"names":[],"mappings":"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","file":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.reveal.js.map","sourcesContent":["/**\n * Reveal module.\n * @module foundation.reveal\n * @requires foundation.util.keyboard\n * @requires foundation.util.box\n * @requires foundation.util.triggers\n * @requires foundation.util.mediaQuery\n * @requires foundation.util.motion if using animations\n */\n!function(Foundation, $) {\n  'use strict';\n\n  /**\n   * Creates a new instance of Reveal.\n   * @class\n   * @param {jQuery} element - jQuery object to use for the modal.\n   * @param {Object} options - optional parameters.\n   */\n\n  function Reveal(element, options) {\n    this.$element = element;\n    this.options = $.extend({}, Reveal.defaults, this.$element.data(), options);\n    this._init();\n\n    Foundation.registerPlugin(this);\n    Foundation.Keyboard.register('Reveal', {\n      'ENTER': 'open',\n      'SPACE': 'open',\n      'ESCAPE': 'close',\n      'TAB': 'tab_forward',\n      'SHIFT_TAB': 'tab_backward'\n    });\n  }\n\n  Reveal.defaults = {\n    /**\n     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.\n     * @option\n     * @example 'slide-in-left'\n     */\n    animationIn: '',\n    /**\n     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.\n     * @option\n     * @example 'slide-out-right'\n     */\n    animationOut: '',\n    /**\n     * Time, in ms, to delay the opening of a modal after a click if no animation used.\n     * @option\n     * @example 10\n     */\n    showDelay: 0,\n    /**\n     * Time, in ms, to delay the closing of a modal after a click if no animation used.\n     * @option\n     * @example 10\n     */\n    hideDelay: 0,\n    /**\n     * Allows a click on the body/overlay to close the modal.\n     * @option\n     * @example true\n     */\n    closeOnClick: true,\n    /**\n     * Allows the modal to close if the user presses the `ESCAPE` key.\n     * @option\n     * @example true\n     */\n    closeOnEsc: true,\n    /**\n     * If true, allows multiple modals to be displayed at once.\n     * @option\n     * @example false\n     */\n    multipleOpened: false,\n    /**\n     * Distance, in pixels, the modal should push down from the top of the screen.\n     * @option\n     * @example 100\n     */\n    vOffset: 100,\n    /**\n     * Distance, in pixels, the modal should push in from the side of the screen.\n     * @option\n     * @example 0\n     */\n    hOffset: 0,\n    /**\n     * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.\n     * @option\n     * @example false\n     */\n    fullScreen: false,\n    /**\n     * Percentage of screen height the modal should push up from the bottom of the view.\n     * @option\n     * @example 10\n     */\n    btmOffsetPct: 10,\n    /**\n     * Allows the modal to generate an overlay div, which will cover the view when modal opens.\n     * @option\n     * @example true\n     */\n    overlay: true,\n    /**\n     * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api.\n     * @option\n     * @example false\n     */\n    resetOnClose: false\n  };\n\n  /**\n   * Initializes the modal by adding the overlay and close buttons, (if selected).\n   * @private\n   */\n  Reveal.prototype._init = function(){\n    this.id = this.$element.attr('id');\n    this.isActive = false;\n\n    this.$anchor = $('[data-open=\"' + this.id + '\"]').length ? $('[data-open=\"' + this.id + '\"]') : $('[data-toggle=\"' + this.id + '\"]');\n\n    if(this.$anchor.length){\n      var anchorId = this.$anchor[0].id || Foundation.GetYoDigits(6, 'reveal');\n\n      this.$anchor.attr({\n        'aria-controls': this.id,\n        'id': anchorId,\n        'aria-haspopup': true,\n        'tabindex': 0\n      });\n      this.$element.attr({'aria-labelledby': anchorId});\n    }\n\n    // this.options.fullScreen = this.$element.hasClass('full');\n    if(this.options.fullScreen || this.$element.hasClass('full')){\n      this.options.fullScreen = true;\n      this.options.overlay = false;\n    }\n    if(this.options.overlay){\n      this.$overlay = this._makeOverlay(this.id);\n    }\n\n    this.$element.attr({\n        'role': 'dialog',\n        'aria-hidden': true,\n        'data-yeti-box': this.id,\n        'data-resize': this.id\n    });\n\n    this._events();\n  };\n\n  /**\n   * Creates an overlay div to display behind the modal.\n   * @private\n   */\n  Reveal.prototype._makeOverlay = function(id){\n    var $overlay = $('<div></div>')\n                    .addClass('reveal-overlay')\n                    .attr({'tabindex': -1, 'aria-hidden': true})\n                    .appendTo('body');\n    if(this.options.closeOnClick){\n      $overlay.attr({\n        'data-close': id\n      });\n    }\n    return $overlay;\n  };\n\n  /**\n   * Adds event handlers for the modal.\n   * @private\n   */\n  Reveal.prototype._events = function(){\n    var _this = this;\n\n    this.$element.on({\n      'open.zf.trigger': this.open.bind(this),\n      'close.zf.trigger': this.close.bind(this),\n      'toggle.zf.trigger': this.toggle.bind(this),\n      'resizeme.zf.trigger': function(){\n        if(_this.$element.is(':visible')){\n          _this._setPosition(function(){});\n        }\n      }\n    });\n\n    if(this.$anchor.length){\n      this.$anchor.on('keydown.zf.reveal', function(e){\n        if(e.which === 13 || e.which === 32){\n          e.stopPropagation();\n          e.preventDefault();\n          _this.open();\n        }\n      });\n    }\n\n\n    if(this.options.closeOnClick && this.options.overlay){\n      this.$overlay.off('.zf.reveal').on('click.zf.reveal', this.close.bind(this));\n    }\n  };\n  /**\n   * Sets the position of the modal before opening\n   * @param {Function} cb - a callback function to execute when positioning is complete.\n   * @private\n   */\n  Reveal.prototype._setPosition = function(cb){\n    var eleDims = Foundation.Box.GetDimensions(this.$element);\n    var elePos = this.options.fullScreen ? 'reveal full' : (eleDims.height >= (0.5 * eleDims.windowDims.height)) ? 'reveal' : 'center';\n\n    if(elePos === 'reveal full'){\n      console.log('full');\n      //set to full height/width\n      this.$element\n          .offset(Foundation.Box.GetOffsets(this.$element, null, elePos, this.options.vOffset))\n          .css({\n            'height': eleDims.windowDims.height,\n            'width': eleDims.windowDims.width\n          });\n    }else if(!Foundation.MediaQuery.atLeast('medium') || !Foundation.Box.ImNotTouchingYou(this.$element, null, true, false)){\n      //if smaller than medium, resize to 100% width minus any custom L/R margin\n      this.$element\n          .css({\n            'width': eleDims.windowDims.width - (this.options.hOffset * 2)\n          })\n          .offset(Foundation.Box.GetOffsets(this.$element, null, 'center', this.options.vOffset, this.options.hOffset));\n      //flag a boolean so we can reset the size after the element is closed.\n      this.changedSize = true;\n    }else{\n      this.$element\n          .css({\n            'max-height': eleDims.windowDims.height - (this.options.vOffset * (this.options.btmOffsetPct / 100 + 1)),\n            'width': ''\n          })\n          .offset(Foundation.Box.GetOffsets(this.$element, null, elePos, this.options.vOffset));\n          //the max height based on a percentage of vertical offset plus vertical offset\n    }\n\n    cb();\n  };\n\n  /**\n   * Opens the modal controlled by `this.$anchor`, and closes all others by default.\n   * @function\n   * @fires Reveal#closeAll\n   * @fires Reveal#open\n   */\n  Reveal.prototype.open = function(){\n    var _this = this;\n    this.isActive = true;\n    //make element invisible, but remove display: none so we can get size and positioning\n    this.$element\n        .css({'visibility': 'hidden'})\n        .show()\n        .scrollTop(0);\n\n    this._setPosition(function(){\n      _this.$element.hide()\n                   .css({'visibility': ''});\n      if(!_this.options.multipleOpened){\n        /**\n         * Fires immediately before the modal opens.\n         * Closes any other modals that are currently open\n         * @event Reveal#closeAll\n         */\n        _this.$element.trigger('closeme.zf.reveal', _this.id);\n      }\n      if(_this.options.animationIn){\n        if(_this.options.overlay){\n          Foundation.Motion.animateIn(_this.$overlay, 'fade-in', function(){\n            Foundation.Motion.animateIn(_this.$element, _this.options.animationIn, function(){\n            });\n          });\n        }else{\n          Foundation.Motion.animateIn(_this.$element, _this.options.animationIn, function(){\n          });\n        }\n      }else{\n        if(_this.options.overlay){\n          _this.$overlay.show(0, function(){\n            _this.$element.show(_this.options.showDelay, function(){\n            });\n          });\n        }else{\n          _this.$element.show(_this.options.showDelay, function(){\n          });\n        }\n      }\n    });\n\n\n    // handle accessibility\n    this.$element.attr({'aria-hidden': false}).attr('tabindex', -1).focus()\n    /**\n     * Fires when the modal has successfully opened.\n     * @event Reveal#open\n     */\n                 .trigger('open.zf.reveal');\n\n    $('body').addClass('is-reveal-open')\n             .attr({'aria-hidden': (this.options.overlay || this.options.fullScreen) ? true : false});\n    setTimeout(function(){\n      _this._extraHandlers();\n      // Foundation.reflow();\n    }, 0);\n  };\n\n  /**\n   * Adds extra event handlers for the body and window if necessary.\n   * @private\n   */\n  Reveal.prototype._extraHandlers = function(){\n    var _this = this;\n    var visibleFocusableElements = this.$element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function() {\n      if (!$(this).is(':visible') || $(this).attr('tabindex') < 0){ return false; }//only have visible elements and those that have a tabindex greater or equal 0\n      return true;\n    });\n\n    if(!this.options.overlay && this.options.closeOnClick && !this.options.fullScreen){\n      $('body').on('click.zf.reveal', function(e){\n        // if()\n          _this.close();\n      });\n    }\n    if(this.options.closeOnEsc){\n      $(window).on('keydown.zf.reveal', function(e){\n        if (visibleFocusableElements.length === 0) { // no focusable elements inside the modal at all, prevent tabbing in general\n          e.preventDefault();\n        }\n        Foundation.Keyboard.handleKey(e, _this, {\n          close: function() {\n            if (this.options.closeOnEsc) {\n              this.close();\n            }\n          }\n        });\n      });\n    }\n\n    // lock focus within modal while tabbing\n    this.$element.on('keydown.zf.reveal', function(e) {\n      var $target = $(this);\n      // handle keyboard event with keyboard util\n      Foundation.Keyboard.handleKey(e, _this, {\n        tab_forward: function() {\n          if (this.$element.find(':focus').is(visibleFocusableElements.eq(-1))) { // left modal downwards, setting focus to first element\n            visibleFocusableElements.eq(0).focus();\n            e.preventDefault();\n          }\n        },\n        tab_backward: function() {\n          if (this.$element.find(':focus').is(visibleFocusableElements.eq(0)) || this.$element.is(':focus')) { // left modal upwards, setting focus to last element\n            visibleFocusableElements.eq(-1).focus();\n            e.preventDefault();\n          }\n        },\n        open: function() {\n          if ($target.is(visibleFocusableElements)) { // dont't trigger if acual element has focus (i.e. inputs, links, ...)\n            this.open();\n          }\n        },\n        close: function() {\n          if (this.options.closeOnEsc) {\n            this.close();\n          }\n        }\n      });\n      if (visibleFocusableElements.length === 0) { // no focusable elements inside the modal at all, prevent tabbing in general\n        e.preventDefault();\n      }\n    });\n\n  };\n\n  /**\n   * Closes the modal.\n   * @function\n   * @fires Reveal#closed\n   */\n  Reveal.prototype.close = function(){\n    if(!this.isActive || !this.$element.is(':visible')){\n      return false;\n    }\n    var _this = this;\n\n    if(this.options.animationOut){\n      Foundation.Motion.animateOut(this.$element, this.options.animationOut, function(){\n        if(_this.options.overlay){\n          Foundation.Motion.animateOut(_this.$overlay, 'fade-out', function(){\n          });\n        }\n      });\n    }else{\n      this.$element.hide(_this.options.hideDelay, function(){\n        if(_this.options.overlay){\n          _this.$overlay.hide(0, function(){\n          });\n        }\n      });\n    }\n    //conditionals to remove extra event listeners added on open\n    if(this.options.closeOnEsc){\n      $(window).off('keydown.zf.reveal');\n    }\n    if(!this.options.overlay && this.options.closeOnClick){\n      $('body').off('click.zf.reveal');\n    }\n    this.$element.off('keydown.zf.reveal');\n\n    //if the modal changed size, reset it\n    if(this.changedSize){\n      this.$element.css({\n        'height': '',\n        'width': ''\n      });\n    }\n\n    $('body').removeClass('is-reveal-open').attr({'aria-hidden': false, 'tabindex': ''});\n\n    /**\n    * Resets the modal content\n    * This prevents a running video to keep going in the background\n    */\n    if(this.options.resetOnClose) {\n      this.$element.html(this.$element.html());\n    }\n\n    this.isActive = false;\n    this.$element.attr({'aria-hidden': true})\n    /**\n     * Fires when the modal is done closing.\n     * @event Reveal#closed\n     */\n                 .trigger('closed.zf.reveal');\n  };\n  /**\n   * Toggles the open/closed state of a modal.\n   * @function\n   */\n  Reveal.prototype.toggle = function(){\n    if(this.isActive){\n      this.close();\n    }else{\n      this.open();\n    }\n  };\n\n  /**\n   * Destroys an instance of a modal.\n   * @function\n   */\n  Reveal.prototype.destroy = function() {\n    if(this.options.overlay){\n      this.$overlay.hide().off().remove();\n    }\n    this.$element.hide();\n    this.$anchor.off();\n\n    Foundation.unregisterPlugin(this);\n  };\n\n  Foundation.plugin(Reveal, 'Reveal');\n\n  // Exports for AMD/Browserify\n  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined')\n    module.exports = Reveal;\n  if (typeof define === 'function')\n    define(['foundation'], function() {\n      return Reveal;\n    });\n\n}(Foundation, jQuery);\n"]},"hash":"00f2ff9ddf7029f7077d87631f2a75c288e49390"}
