{"metadata":{"usedHelpers":["typeof"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.util.mediaQuery.js","filenameRelative":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.util.mediaQuery.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.util.mediaQuery.js.map","sourceFileName":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.util.mediaQuery.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"foundation.util.mediaQuery"},"ignored":false,"code":"var _typeof;module.import('babel-runtime/helpers/typeof',{\"default\":function(v){_typeof=v}});\n!function ($, Foundation) {\n\n  // Default set of media queries\n  var defaultQueries = {\n    'default': 'only screen',\n    landscape: 'only screen and (orientation: landscape)',\n    portrait: 'only screen and (orientation: portrait)',\n    retina: 'only screen and (-webkit-min-device-pixel-ratio: 2),' + 'only screen and (min--moz-device-pixel-ratio: 2),' + 'only screen and (-o-min-device-pixel-ratio: 2/1),' + 'only screen and (min-device-pixel-ratio: 2),' + 'only screen and (min-resolution: 192dpi),' + 'only screen and (min-resolution: 2dppx)'\n  };\n\n  var MediaQuery = {\n    queries: [],\n    current: '',\n\n    /**\n     * Checks if the screen is at least as wide as a breakpoint.\n     * @function\n     * @param {String} size - Name of the breakpoint to check.\n     * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.\n     */\n    atLeast: function atLeast(size) {\n      var query = this.get(size);\n\n      if (query) {\n        return window.matchMedia(query).matches;\n      }\n\n      return false;\n    },\n\n    /**\n     * Gets the media query of a breakpoint.\n     * @function\n     * @param {String} size - Name of the breakpoint to get.\n     * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.\n     */\n    get: function get(size) {\n      for (var i in this.queries) {\n        var query = this.queries[i];\n        if (size === query.name) return query.value;\n      }\n\n      return null;\n    },\n\n    /**\n     * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.\n     * @function\n     * @private\n     */\n    _init: function _init() {\n      var self = this;\n      var extractedStyles = $('.foundation-mq').css('font-family');\n      var namedQueries;\n\n      namedQueries = parseStyleToObject(extractedStyles);\n\n      for (var key in namedQueries) {\n        self.queries.push({\n          name: key,\n          value: 'only screen and (min-width: ' + namedQueries[key] + ')'\n        });\n      }\n\n      this.current = this._getCurrentSize();\n\n      this._watcher();\n\n      // Extend default queries\n      // namedQueries = $.extend(defaultQueries, namedQueries);\n    },\n\n    /**\n     * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).\n     * @function\n     * @private\n     * @returns {String} Name of the current breakpoint.\n     */\n    _getCurrentSize: function _getCurrentSize() {\n      var matched;\n\n      for (var i in this.queries) {\n        var query = this.queries[i];\n\n        if (window.matchMedia(query.value).matches) {\n          matched = query;\n        }\n      }\n\n      if ((typeof matched === 'undefined' ? 'undefined' : _typeof(matched)) === 'object') {\n        return matched.name;\n      } else {\n        return matched;\n      }\n    },\n\n    /**\n     * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.\n     * @function\n     * @private\n     */\n    _watcher: function _watcher() {\n      var _this = this;\n\n      $(window).on('resize.zf.mediaquery', function () {\n        var newSize = _this._getCurrentSize();\n\n        if (newSize !== _this.current) {\n          // Broadcast the media query change on the window\n          $(window).trigger('changed.zf.mediaquery', [newSize, _this.current]);\n\n          // Change the current media query\n          _this.current = newSize;\n        }\n      });\n    }\n  };\n\n  Foundation.MediaQuery = MediaQuery;\n\n  // matchMedia() polyfill - Test a CSS media type/query in JS.\n  // Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license\n  window.matchMedia || (window.matchMedia = function () {\n    'use strict';\n\n    // For browsers that support matchMedium api such as IE 9 and webkit\n\n    var styleMedia = window.styleMedia || window.media;\n\n    // For those that don't support matchMedium\n    if (!styleMedia) {\n      var style = document.createElement('style'),\n          script = document.getElementsByTagName('script')[0],\n          info = null;\n\n      style.type = 'text/css';\n      style.id = 'matchmediajs-test';\n\n      script.parentNode.insertBefore(style, script);\n\n      // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers\n      info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;\n\n      styleMedia = {\n        matchMedium: function matchMedium(media) {\n          var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';\n\n          // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers\n          if (style.styleSheet) {\n            style.styleSheet.cssText = text;\n          } else {\n            style.textContent = text;\n          }\n\n          // Test if media query is true or false\n          return info.width === '1px';\n        }\n      };\n    }\n\n    return function (media) {\n      return {\n        matches: styleMedia.matchMedium(media || 'all'),\n        media: media || 'all'\n      };\n    };\n  }());\n\n  // Thank you: https://github.com/sindresorhus/query-string\n  function parseStyleToObject(str) {\n    var styleObject = {};\n\n    if (typeof str !== 'string') {\n      return styleObject;\n    }\n\n    str = str.trim().slice(1, -1); // browsers re-quote string style values\n\n    if (!str) {\n      return styleObject;\n    }\n\n    styleObject = str.split('&').reduce(function (ret, param) {\n      var parts = param.replace(/\\+/g, ' ').split('=');\n      var key = parts[0];\n      var val = parts[1];\n      key = decodeURIComponent(key);\n\n      // missing `=` should be `null`:\n      // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n      val = val === undefined ? null : decodeURIComponent(val);\n\n      if (!ret.hasOwnProperty(key)) {\n        ret[key] = val;\n      } else if (Array.isArray(ret[key])) {\n        ret[key].push(val);\n      } else {\n        ret[key] = [ret[key], val];\n      }\n      return ret;\n    }, {});\n\n    return styleObject;\n  }\n}(jQuery, Foundation);","ast":null,"map":{"version":3,"sources":["/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.util.mediaQuery.js"],"names":[],"mappings":";AAAA,CAAC,UAAS,CAAT,EAAY,UAAZ,EAAwB;;;AAGzB,MAAI,iBAAiB;AACnB,eAAY,aADO;AAEnB,eAAY,0CAFO;AAGnB,cAAW,yCAHQ;AAInB,YAAS,yDACP,mDADO,GAEP,mDAFO,GAGP,8CAHO,GAIP,2CAJO,GAKP;AATiB,GAArB;;AAYA,MAAI,aAAa;AACf,aAAS,EADM;AAEf,aAAS,EAFM;;;;;;;;AAUf,aAAS,iBAAS,IAAT,EAAe;AACtB,UAAI,QAAQ,KAAK,GAAL,CAAS,IAAT,CAAZ;;AAEA,UAAI,KAAJ,EAAW;AACT,eAAO,OAAO,UAAP,CAAkB,KAAlB,EAAyB,OAAhC;AACD;;AAED,aAAO,KAAP;AACD,KAlBc;;;;;;;;AA0Bf,SAAK,aAAS,IAAT,EAAe;AAClB,WAAK,IAAI,CAAT,IAAc,KAAK,OAAnB,EAA4B;AAC1B,YAAI,QAAQ,KAAK,OAAL,CAAa,CAAb,CAAZ;AACA,YAAI,SAAS,MAAM,IAAnB,EAAyB,OAAO,MAAM,KAAb;AAC1B;;AAED,aAAO,IAAP;AACD,KAjCc;;;;;;;AAwCf,WAAO,iBAAW;AAChB,UAAI,OAAO,IAAX;AACA,UAAI,kBAAkB,EAAE,gBAAF,EAAoB,GAApB,CAAwB,aAAxB,CAAtB;AACA,UAAI,YAAJ;;AAEA,qBAAe,mBAAmB,eAAnB,CAAf;;AAEA,WAAK,IAAI,GAAT,IAAgB,YAAhB,EAA8B;AAC5B,aAAK,OAAL,CAAa,IAAb,CAAkB;AAChB,gBAAM,GADU;AAEhB,iBAAO,iCAAiC,aAAa,GAAb,CAAjC,GAAqD;AAF5C,SAAlB;AAID;;AAED,WAAK,OAAL,GAAe,KAAK,eAAL,EAAf;;AAEA,WAAK,QAAL;;;;AAID,KA5Dc;;;;;;;;AAoEf,qBAAiB,2BAAW;AAC1B,UAAI,OAAJ;;AAEA,WAAK,IAAI,CAAT,IAAc,KAAK,OAAnB,EAA4B;AAC1B,YAAI,QAAQ,KAAK,OAAL,CAAa,CAAb,CAAZ;;AAEA,YAAI,OAAO,UAAP,CAAkB,MAAM,KAAxB,EAA+B,OAAnC,EAA4C;AAC1C,oBAAU,KAAV;AACD;AACF;;AAED,UAAG,QAAO,OAAP,yCAAO,OAAP,OAAmB,QAAtB,EAAgC;AAC9B,eAAO,QAAQ,IAAf;AACD,OAFD,MAEO;AACL,eAAO,OAAP;AACD;AACF,KApFc;;;;;;;AA2Ff,cAAU,oBAAW;AACnB,UAAI,QAAQ,IAAZ;;AAEA,QAAE,MAAF,EAAU,EAAV,CAAa,sBAAb,EAAqC,YAAW;AAC9C,YAAI,UAAU,MAAM,eAAN,EAAd;;AAEA,YAAI,YAAY,MAAM,OAAtB,EAA+B;;AAE7B,YAAE,MAAF,EAAU,OAAV,CAAkB,uBAAlB,EAA2C,CAAC,OAAD,EAAU,MAAM,OAAhB,CAA3C;;;AAGA,gBAAM,OAAN,GAAgB,OAAhB;AACD;AACF,OAVD;AAWD;AAzGc,GAAjB;;AA4GA,aAAW,UAAX,GAAwB,UAAxB;;;;AAIA,SAAO,UAAP,KAAsB,OAAO,UAAP,GAAoB,YAAW;AACnD;;;;AAGA,QAAI,aAAc,OAAO,UAAP,IAAqB,OAAO,KAA9C;;;AAGA,QAAI,CAAC,UAAL,EAAiB;AACf,UAAI,QAAU,SAAS,aAAT,CAAuB,OAAvB,CAAd;AAAA,UACA,SAAc,SAAS,oBAAT,CAA8B,QAA9B,EAAwC,CAAxC,CADd;AAAA,UAEA,OAAc,IAFd;;AAIA,YAAM,IAAN,GAAc,UAAd;AACA,YAAM,EAAN,GAAc,mBAAd;;AAEA,aAAO,UAAP,CAAkB,YAAlB,CAA+B,KAA/B,EAAsC,MAAtC;;;AAGA,aAAQ,sBAAsB,MAAvB,IAAkC,OAAO,gBAAP,CAAwB,KAAxB,EAA+B,IAA/B,CAAlC,IAA0E,MAAM,YAAvF;;AAEA,mBAAa;AACX,qBAAa,qBAAS,KAAT,EAAgB;AAC3B,cAAI,OAAO,YAAY,KAAZ,GAAoB,wCAA/B;;;AAGA,cAAI,MAAM,UAAV,EAAsB;AACpB,kBAAM,UAAN,CAAiB,OAAjB,GAA2B,IAA3B;AACD,WAFD,MAEO;AACL,kBAAM,WAAN,GAAoB,IAApB;AACD;;;AAGD,iBAAO,KAAK,KAAL,KAAe,KAAtB;AACD;AAbU,OAAb;AAeD;;AAED,WAAO,UAAS,KAAT,EAAgB;AACrB,aAAO;AACL,iBAAS,WAAW,WAAX,CAAuB,SAAS,KAAhC,CADJ;AAEL,eAAO,SAAS;AAFX,OAAP;AAID,KALD;AAMD,GA3CyC,EAA1C;;;AA8CA,WAAS,kBAAT,CAA4B,GAA5B,EAAiC;AAC/B,QAAI,cAAc,EAAlB;;AAEA,QAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;AAC3B,aAAO,WAAP;AACD;;AAED,UAAM,IAAI,IAAJ,GAAW,KAAX,CAAiB,CAAjB,EAAoB,CAAC,CAArB,CAAN,C;;AAEA,QAAI,CAAC,GAAL,EAAU;AACR,aAAO,WAAP;AACD;;AAED,kBAAc,IAAI,KAAJ,CAAU,GAAV,EAAe,MAAf,CAAsB,UAAS,GAAT,EAAc,KAAd,EAAqB;AACvD,UAAI,QAAQ,MAAM,OAAN,CAAc,KAAd,EAAqB,GAArB,EAA0B,KAA1B,CAAgC,GAAhC,CAAZ;AACA,UAAI,MAAM,MAAM,CAAN,CAAV;AACA,UAAI,MAAM,MAAM,CAAN,CAAV;AACA,YAAM,mBAAmB,GAAnB,CAAN;;;;AAIA,YAAM,QAAQ,SAAR,GAAoB,IAApB,GAA2B,mBAAmB,GAAnB,CAAjC;;AAEA,UAAI,CAAC,IAAI,cAAJ,CAAmB,GAAnB,CAAL,EAA8B;AAC5B,YAAI,GAAJ,IAAW,GAAX;AACD,OAFD,MAEO,IAAI,MAAM,OAAN,CAAc,IAAI,GAAJ,CAAd,CAAJ,EAA6B;AAClC,YAAI,GAAJ,EAAS,IAAT,CAAc,GAAd;AACD,OAFM,MAEA;AACL,YAAI,GAAJ,IAAW,CAAC,IAAI,GAAJ,CAAD,EAAW,GAAX,CAAX;AACD;AACD,aAAO,GAAP;AACD,KAlBa,EAkBX,EAlBW,CAAd;;AAoBA,WAAO,WAAP;AACD;AAEA,CAjNA,CAiNC,MAjND,EAiNS,UAjNT,CAAD","file":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.util.mediaQuery.js.map","sourcesContent":["!function($, Foundation) {\n\n// Default set of media queries\nvar defaultQueries = {\n  'default' : 'only screen',\n  landscape : 'only screen and (orientation: landscape)',\n  portrait : 'only screen and (orientation: portrait)',\n  retina : 'only screen and (-webkit-min-device-pixel-ratio: 2),' +\n    'only screen and (min--moz-device-pixel-ratio: 2),' +\n    'only screen and (-o-min-device-pixel-ratio: 2/1),' +\n    'only screen and (min-device-pixel-ratio: 2),' +\n    'only screen and (min-resolution: 192dpi),' +\n    'only screen and (min-resolution: 2dppx)'\n};\n\nvar MediaQuery = {\n  queries: [],\n  current: '',\n\n  /**\n   * Checks if the screen is at least as wide as a breakpoint.\n   * @function\n   * @param {String} size - Name of the breakpoint to check.\n   * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.\n   */\n  atLeast: function(size) {\n    var query = this.get(size);\n\n    if (query) {\n      return window.matchMedia(query).matches;\n    }\n\n    return false;\n  },\n\n  /**\n   * Gets the media query of a breakpoint.\n   * @function\n   * @param {String} size - Name of the breakpoint to get.\n   * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.\n   */\n  get: function(size) {\n    for (var i in this.queries) {\n      var query = this.queries[i];\n      if (size === query.name) return query.value;\n    }\n\n    return null;\n  },\n\n  /**\n   * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.\n   * @function\n   * @private\n   */\n  _init: function() {\n    var self = this;\n    var extractedStyles = $('.foundation-mq').css('font-family');\n    var namedQueries;\n\n    namedQueries = parseStyleToObject(extractedStyles);\n\n    for (var key in namedQueries) {\n      self.queries.push({\n        name: key,\n        value: 'only screen and (min-width: ' + namedQueries[key] + ')'\n      });\n    }\n\n    this.current = this._getCurrentSize();\n\n    this._watcher();\n\n    // Extend default queries\n    // namedQueries = $.extend(defaultQueries, namedQueries);\n  },\n\n  /**\n   * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).\n   * @function\n   * @private\n   * @returns {String} Name of the current breakpoint.\n   */\n  _getCurrentSize: function() {\n    var matched;\n\n    for (var i in this.queries) {\n      var query = this.queries[i];\n\n      if (window.matchMedia(query.value).matches) {\n        matched = query;\n      }\n    }\n\n    if(typeof matched === 'object') {\n      return matched.name;\n    } else {\n      return matched;\n    }\n  },\n\n  /**\n   * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.\n   * @function\n   * @private\n   */\n  _watcher: function() {\n    var _this = this;\n\n    $(window).on('resize.zf.mediaquery', function() {\n      var newSize = _this._getCurrentSize();\n\n      if (newSize !== _this.current) {\n        // Broadcast the media query change on the window\n        $(window).trigger('changed.zf.mediaquery', [newSize, _this.current]);\n\n        // Change the current media query\n        _this.current = newSize;\n      }\n    });\n  }\n};\n\nFoundation.MediaQuery = MediaQuery;\n\n// matchMedia() polyfill - Test a CSS media type/query in JS.\n// Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license\nwindow.matchMedia || (window.matchMedia = function() {\n  'use strict';\n\n  // For browsers that support matchMedium api such as IE 9 and webkit\n  var styleMedia = (window.styleMedia || window.media);\n\n  // For those that don't support matchMedium\n  if (!styleMedia) {\n    var style   = document.createElement('style'),\n    script      = document.getElementsByTagName('script')[0],\n    info        = null;\n\n    style.type  = 'text/css';\n    style.id    = 'matchmediajs-test';\n\n    script.parentNode.insertBefore(style, script);\n\n    // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers\n    info = ('getComputedStyle' in window) && window.getComputedStyle(style, null) || style.currentStyle;\n\n    styleMedia = {\n      matchMedium: function(media) {\n        var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';\n\n        // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers\n        if (style.styleSheet) {\n          style.styleSheet.cssText = text;\n        } else {\n          style.textContent = text;\n        }\n\n        // Test if media query is true or false\n        return info.width === '1px';\n      }\n    };\n  }\n\n  return function(media) {\n    return {\n      matches: styleMedia.matchMedium(media || 'all'),\n      media: media || 'all'\n    };\n  };\n}());\n\n// Thank you: https://github.com/sindresorhus/query-string\nfunction parseStyleToObject(str) {\n  var styleObject = {};\n\n  if (typeof str !== 'string') {\n    return styleObject;\n  }\n\n  str = str.trim().slice(1, -1); // browsers re-quote string style values\n\n  if (!str) {\n    return styleObject;\n  }\n\n  styleObject = str.split('&').reduce(function(ret, param) {\n    var parts = param.replace(/\\+/g, ' ').split('=');\n    var key = parts[0];\n    var val = parts[1];\n    key = decodeURIComponent(key);\n\n    // missing `=` should be `null`:\n    // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n    val = val === undefined ? null : decodeURIComponent(val);\n\n    if (!ret.hasOwnProperty(key)) {\n      ret[key] = val;\n    } else if (Array.isArray(ret[key])) {\n      ret[key].push(val);\n    } else {\n      ret[key] = [ret[key], val];\n    }\n    return ret;\n  }, {});\n\n  return styleObject;\n}\n\n}(jQuery, Foundation)\n"]},"hash":"d5e67ea0c1a4576316a168cf782edd3c4ecf76e1"}
