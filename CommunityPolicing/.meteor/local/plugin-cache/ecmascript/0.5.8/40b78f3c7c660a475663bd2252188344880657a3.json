{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/bootstrap/grunt/bs-glyphicons-data-generator.js","filenameRelative":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/bootstrap/grunt/bs-glyphicons-data-generator.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/bootstrap/grunt/bs-glyphicons-data-generator.js.map","sourceFileName":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/bootstrap/grunt/bs-glyphicons-data-generator.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"bs-glyphicons-data-generator"},"ignored":false,"code":"/*!\n * Bootstrap Grunt task for Glyphicons data generation\n * http://getbootstrap.com\n * Copyright 2014-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n */\n\n'use strict';\n\nvar fs = require('fs');\n\nmodule.exports = function () {\n  function generateGlyphiconsData(grunt) {\n    // Pass encoding, utf8, so `readFileSync` will return a string instead of a\n    // buffer\n    var glyphiconsFile = fs.readFileSync('less/glyphicons.less', 'utf8');\n    var glyphiconsLines = glyphiconsFile.split('\\n');\n\n    // Use any line that starts with \".glyphicon-\" and capture the class name\n    var iconClassName = /^\\.(glyphicon-[a-zA-Z0-9-]+)/;\n    var glyphiconsData = '# This file is generated via Grunt task. **Do not edit directly.**\\n' + '# See the \\'build-glyphicons-data\\' task in Gruntfile.js.\\n\\n';\n    var glyphiconsYml = 'docs/_data/glyphicons.yml';\n    for (var i = 0, len = glyphiconsLines.length; i < len; i++) {\n      var match = glyphiconsLines[i].match(iconClassName);\n\n      if (match !== null) {\n        glyphiconsData += '- ' + match[1] + '\\n';\n      }\n    }\n\n    // Create the `_data` directory if it doesn't already exist\n    if (!fs.existsSync('docs/_data')) {\n      fs.mkdirSync('docs/_data');\n    }\n\n    try {\n      fs.writeFileSync(glyphiconsYml, glyphiconsData);\n    } catch (err) {\n      grunt.fail.warn(err);\n    }\n    grunt.log.writeln('File ' + glyphiconsYml.cyan + ' created.');\n  }\n\n  return generateGlyphiconsData;\n}();","ast":null,"map":{"version":3,"sources":["/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/bootstrap/grunt/bs-glyphicons-data-generator.js"],"names":[],"mappings":";;;;;;;AAOA;;AAEA,IAAI,KAAK,QAAQ,IAAR,CAAT;;AAEA,OAAO,OAAP;AAAiB,WAAS,sBAAT,CAAgC,KAAhC,EAAuC;;;AAGtD,QAAI,iBAAiB,GAAG,YAAH,CAAgB,sBAAhB,EAAwC,MAAxC,CAArB;AACA,QAAI,kBAAkB,eAAe,KAAf,CAAqB,IAArB,CAAtB;;;AAGA,QAAI,gBAAgB,8BAApB;AACA,QAAI,iBAAiB,yEACA,+DADrB;AAEA,QAAI,gBAAgB,2BAApB;AACA,SAAK,IAAI,IAAI,CAAR,EAAW,MAAM,gBAAgB,MAAtC,EAA8C,IAAI,GAAlD,EAAuD,GAAvD,EAA4D;AAC1D,UAAI,QAAQ,gBAAgB,CAAhB,EAAmB,KAAnB,CAAyB,aAAzB,CAAZ;;AAEA,UAAI,UAAU,IAAd,EAAoB;AAClB,0BAAkB,OAAO,MAAM,CAAN,CAAP,GAAkB,IAApC;AACD;AACF;;;AAGD,QAAI,CAAC,GAAG,UAAH,CAAc,YAAd,CAAL,EAAkC;AAChC,SAAG,SAAH,CAAa,YAAb;AACD;;AAED,QAAI;AACF,SAAG,aAAH,CAAiB,aAAjB,EAAgC,cAAhC;AACD,KAFD,CAEE,OAAO,GAAP,EAAY;AACZ,YAAM,IAAN,CAAW,IAAX,CAAgB,GAAhB;AACD;AACD,UAAM,GAAN,CAAU,OAAV,CAAkB,UAAU,cAAc,IAAxB,GAA+B,WAAjD;AACD;;AA9BD,SAA0B,sBAA1B;AAAA","file":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/bootstrap/grunt/bs-glyphicons-data-generator.js.map","sourcesContent":["/*!\n * Bootstrap Grunt task for Glyphicons data generation\n * http://getbootstrap.com\n * Copyright 2014-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n */\n\n'use strict';\n\nvar fs = require('fs');\n\nmodule.exports = function generateGlyphiconsData(grunt) {\n  // Pass encoding, utf8, so `readFileSync` will return a string instead of a\n  // buffer\n  var glyphiconsFile = fs.readFileSync('less/glyphicons.less', 'utf8');\n  var glyphiconsLines = glyphiconsFile.split('\\n');\n\n  // Use any line that starts with \".glyphicon-\" and capture the class name\n  var iconClassName = /^\\.(glyphicon-[a-zA-Z0-9-]+)/;\n  var glyphiconsData = '# This file is generated via Grunt task. **Do not edit directly.**\\n' +\n                       '# See the \\'build-glyphicons-data\\' task in Gruntfile.js.\\n\\n';\n  var glyphiconsYml = 'docs/_data/glyphicons.yml';\n  for (var i = 0, len = glyphiconsLines.length; i < len; i++) {\n    var match = glyphiconsLines[i].match(iconClassName);\n\n    if (match !== null) {\n      glyphiconsData += '- ' + match[1] + '\\n';\n    }\n  }\n\n  // Create the `_data` directory if it doesn't already exist\n  if (!fs.existsSync('docs/_data')) {\n    fs.mkdirSync('docs/_data');\n  }\n\n  try {\n    fs.writeFileSync(glyphiconsYml, glyphiconsData);\n  } catch (err) {\n    grunt.fail.warn(err);\n  }\n  grunt.log.writeln('File ' + glyphiconsYml.cyan + ' created.');\n};\n"]},"hash":"40b78f3c7c660a475663bd2252188344880657a3"}
