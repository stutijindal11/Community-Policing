{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/prism/components/prism-php.js","filenameRelative":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/prism/components/prism-php.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/prism/components/prism-php.js.map","sourceFileName":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/prism/components/prism-php.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"prism-php"},"ignored":false,"code":"/**\n * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n * Modified by Miles Johnson: http://milesj.me\n *\n * Supports the following:\n * \t\t- Extends clike syntax\n * \t\t- Support for PHP 5.3+ (namespaces, traits, generators, etc)\n * \t\t- Smarter constant and function matching\n *\n * Adds the following new token classes:\n * \t\tconstant, delimiter, variable, function, package\n */\n\nPrism.languages.php = Prism.languages.extend('clike', {\n\t'keyword': /\\b(and|or|xor|array|as|break|case|cfunction|class|const|continue|declare|default|die|do|else|elseif|enddeclare|endfor|endforeach|endif|endswitch|endwhile|extends|for|foreach|function|include|include_once|global|if|new|return|static|switch|use|require|require_once|var|while|abstract|interface|public|implements|private|protected|parent|throw|null|echo|print|trait|namespace|final|yield|goto|instanceof|finally|try|catch)\\b/i,\n\t'constant': /\\b[A-Z0-9_]{2,}\\b/,\n\t'comment': {\n\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\w\\W]*?\\*\\/|\\/\\/.*)/,\n\t\tlookbehind: true\n\t}\n});\n\n// Shell-like comments are matched after strings, because they are less\n// common than strings containing hashes...\nPrism.languages.insertBefore('php', 'class-name', {\n\t'shell-comment': {\n\t\tpattern: /(^|[^\\\\])#.*/,\n\t\tlookbehind: true,\n\t\talias: 'comment'\n\t}\n});\n\nPrism.languages.insertBefore('php', 'keyword', {\n\t'delimiter': /\\?>|<\\?(?:php)?/i,\n\t'variable': /\\$\\w+\\b/i,\n\t'package': {\n\t\tpattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\tpunctuation: /\\\\/\n\t\t}\n\t}\n});\n\n// Must be defined after the function pattern\nPrism.languages.insertBefore('php', 'operator', {\n\t'property': {\n\t\tpattern: /(->)[\\w]+/,\n\t\tlookbehind: true\n\t}\n});\n\n// Add HTML support of the markup language exists\nif (Prism.languages.markup) {\n\n\t// Tokenize all inline PHP blocks that are wrapped in <?php ?>\n\t// This allows for easy PHP + markup highlighting\n\tPrism.hooks.add('before-highlight', function (env) {\n\t\tif (env.language !== 'php') {\n\t\t\treturn;\n\t\t}\n\n\t\tenv.tokenStack = [];\n\n\t\tenv.backupCode = env.code;\n\t\tenv.code = env.code.replace(/(?:<\\?php|<\\?)[\\w\\W]*?(?:\\?>)/ig, function (match) {\n\t\t\tenv.tokenStack.push(match);\n\n\t\t\treturn '{{{PHP' + env.tokenStack.length + '}}}';\n\t\t});\n\t});\n\n\t// Restore env.code for other plugins (e.g. line-numbers)\n\tPrism.hooks.add('before-insert', function (env) {\n\t\tif (env.language === 'php') {\n\t\t\tenv.code = env.backupCode;\n\t\t\tdelete env.backupCode;\n\t\t}\n\t});\n\n\t// Re-insert the tokens after highlighting\n\tPrism.hooks.add('after-highlight', function (env) {\n\t\tif (env.language !== 'php') {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (var i = 0, t; t = env.tokenStack[i]; i++) {\n\t\t\t// The replace prevents $$, $&, $`, $', $n, $nn from being interpreted as special patterns\n\t\t\tenv.highlightedCode = env.highlightedCode.replace('{{{PHP' + (i + 1) + '}}}', Prism.highlight(t, env.grammar, 'php').replace(/\\$/g, '$$$$'));\n\t\t}\n\n\t\tenv.element.innerHTML = env.highlightedCode;\n\t});\n\n\t// Wrap tokens in classes that are missing them\n\tPrism.hooks.add('wrap', function (env) {\n\t\tif (env.language === 'php' && env.type === 'markup') {\n\t\t\tenv.content = env.content.replace(/(\\{\\{\\{PHP[0-9]+\\}\\}\\})/g, \"<span class=\\\"token php\\\">$1</span>\");\n\t\t}\n\t});\n\n\t// Add the rules before all others\n\tPrism.languages.insertBefore('php', 'comment', {\n\t\t'markup': {\n\t\t\tpattern: /<[^?]\\/?(.*?)>/,\n\t\t\tinside: Prism.languages.markup\n\t\t},\n\t\t'php': /\\{\\{\\{PHP[0-9]+\\}\\}\\}/\n\t});\n}","ast":null,"map":{"version":3,"sources":["/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/prism/components/prism-php.js"],"names":[],"mappings":";;;;;;;;;;;;;AAaA,MAAM,SAAN,CAAgB,GAAhB,GAAsB,MAAM,SAAN,CAAgB,MAAhB,CAAuB,OAAvB,EAAgC;AACrD,YAAW,yaAD0C;AAErD,aAAY,mBAFyC;AAGrD,YAAW;AACV,WAAS,sCADC;AAEV,cAAY;AAFF;AAH0C,CAAhC,CAAtB;;;;AAWA,MAAM,SAAN,CAAgB,YAAhB,CAA6B,KAA7B,EAAoC,YAApC,EAAkD;AACjD,kBAAiB;AAChB,WAAS,cADO;AAEhB,cAAY,IAFI;AAGhB,SAAO;AAHS;AADgC,CAAlD;;AAQA,MAAM,SAAN,CAAgB,YAAhB,CAA6B,KAA7B,EAAoC,SAApC,EAA+C;AAC9C,cAAa,kBADiC;AAE9C,aAAY,UAFkC;AAG9C,YAAW;AACV,WAAS,iCADC;AAEV,cAAY,IAFF;AAGV,UAAQ;AACP,gBAAa;AADN;AAHE;AAHmC,CAA/C;;;AAaA,MAAM,SAAN,CAAgB,YAAhB,CAA6B,KAA7B,EAAoC,UAApC,EAAgD;AAC/C,aAAY;AACX,WAAS,WADE;AAEX,cAAY;AAFD;AADmC,CAAhD;;;AAQA,IAAI,MAAM,SAAN,CAAgB,MAApB,EAA4B;;;;AAI3B,OAAM,KAAN,CAAY,GAAZ,CAAgB,kBAAhB,EAAoC,UAAS,GAAT,EAAc;AACjD,MAAI,IAAI,QAAJ,KAAiB,KAArB,EAA4B;AAC3B;AACA;;AAED,MAAI,UAAJ,GAAiB,EAAjB;;AAEA,MAAI,UAAJ,GAAiB,IAAI,IAArB;AACA,MAAI,IAAJ,GAAW,IAAI,IAAJ,CAAS,OAAT,CAAiB,iCAAjB,EAAoD,UAAS,KAAT,EAAgB;AAC9E,OAAI,UAAJ,CAAe,IAAf,CAAoB,KAApB;;AAEA,UAAO,WAAW,IAAI,UAAJ,CAAe,MAA1B,GAAmC,KAA1C;AACA,GAJU,CAAX;AAKA,EAbD;;;AAgBA,OAAM,KAAN,CAAY,GAAZ,CAAgB,eAAhB,EAAiC,UAAS,GAAT,EAAc;AAC9C,MAAI,IAAI,QAAJ,KAAiB,KAArB,EAA4B;AAC3B,OAAI,IAAJ,GAAW,IAAI,UAAf;AACA,UAAO,IAAI,UAAX;AACA;AACD,EALD;;;AAQA,OAAM,KAAN,CAAY,GAAZ,CAAgB,iBAAhB,EAAmC,UAAS,GAAT,EAAc;AAChD,MAAI,IAAI,QAAJ,KAAiB,KAArB,EAA4B;AAC3B;AACA;;AAED,OAAK,IAAI,IAAI,CAAR,EAAW,CAAhB,EAAmB,IAAI,IAAI,UAAJ,CAAe,CAAf,CAAvB,EAA0C,GAA1C,EAA+C;;AAE9C,OAAI,eAAJ,GAAsB,IAAI,eAAJ,CAAoB,OAApB,CAA4B,YAAY,IAAI,CAAhB,IAAqB,KAAjD,EAAwD,MAAM,SAAN,CAAgB,CAAhB,EAAmB,IAAI,OAAvB,EAAgC,KAAhC,EAAuC,OAAvC,CAA+C,KAA/C,EAAsD,MAAtD,CAAxD,CAAtB;AACA;;AAED,MAAI,OAAJ,CAAY,SAAZ,GAAwB,IAAI,eAA5B;AACA,EAXD;;;AAcA,OAAM,KAAN,CAAY,GAAZ,CAAgB,MAAhB,EAAwB,UAAS,GAAT,EAAc;AACrC,MAAI,IAAI,QAAJ,KAAiB,KAAjB,IAA0B,IAAI,IAAJ,KAAa,QAA3C,EAAqD;AACpD,OAAI,OAAJ,GAAc,IAAI,OAAJ,CAAY,OAAZ,CAAoB,0BAApB,EAAgD,qCAAhD,CAAd;AACA;AACD,EAJD;;;AAOA,OAAM,SAAN,CAAgB,YAAhB,CAA6B,KAA7B,EAAoC,SAApC,EAA+C;AAC9C,YAAU;AACT,YAAS,gBADA;AAET,WAAQ,MAAM,SAAN,CAAgB;AAFf,GADoC;AAK9C,SAAO;AALuC,EAA/C;AAOA","file":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/prism/components/prism-php.js.map","sourcesContent":["/**\n * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n * Modified by Miles Johnson: http://milesj.me\n *\n * Supports the following:\n * \t\t- Extends clike syntax\n * \t\t- Support for PHP 5.3+ (namespaces, traits, generators, etc)\n * \t\t- Smarter constant and function matching\n *\n * Adds the following new token classes:\n * \t\tconstant, delimiter, variable, function, package\n */\n\nPrism.languages.php = Prism.languages.extend('clike', {\n\t'keyword': /\\b(and|or|xor|array|as|break|case|cfunction|class|const|continue|declare|default|die|do|else|elseif|enddeclare|endfor|endforeach|endif|endswitch|endwhile|extends|for|foreach|function|include|include_once|global|if|new|return|static|switch|use|require|require_once|var|while|abstract|interface|public|implements|private|protected|parent|throw|null|echo|print|trait|namespace|final|yield|goto|instanceof|finally|try|catch)\\b/i,\n\t'constant': /\\b[A-Z0-9_]{2,}\\b/,\n\t'comment': {\n\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\w\\W]*?\\*\\/|\\/\\/.*)/,\n\t\tlookbehind: true\n\t}\n});\n\n// Shell-like comments are matched after strings, because they are less\n// common than strings containing hashes...\nPrism.languages.insertBefore('php', 'class-name', {\n\t'shell-comment': {\n\t\tpattern: /(^|[^\\\\])#.*/,\n\t\tlookbehind: true,\n\t\talias: 'comment'\n\t}\n});\n\nPrism.languages.insertBefore('php', 'keyword', {\n\t'delimiter': /\\?>|<\\?(?:php)?/i,\n\t'variable': /\\$\\w+\\b/i,\n\t'package': {\n\t\tpattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\tpunctuation: /\\\\/\n\t\t}\n\t}\n});\n\n// Must be defined after the function pattern\nPrism.languages.insertBefore('php', 'operator', {\n\t'property': {\n\t\tpattern: /(->)[\\w]+/,\n\t\tlookbehind: true\n\t}\n});\n\n// Add HTML support of the markup language exists\nif (Prism.languages.markup) {\n\n\t// Tokenize all inline PHP blocks that are wrapped in <?php ?>\n\t// This allows for easy PHP + markup highlighting\n\tPrism.hooks.add('before-highlight', function(env) {\n\t\tif (env.language !== 'php') {\n\t\t\treturn;\n\t\t}\n\n\t\tenv.tokenStack = [];\n\n\t\tenv.backupCode = env.code;\n\t\tenv.code = env.code.replace(/(?:<\\?php|<\\?)[\\w\\W]*?(?:\\?>)/ig, function(match) {\n\t\t\tenv.tokenStack.push(match);\n\n\t\t\treturn '{{{PHP' + env.tokenStack.length + '}}}';\n\t\t});\n\t});\n\n\t// Restore env.code for other plugins (e.g. line-numbers)\n\tPrism.hooks.add('before-insert', function(env) {\n\t\tif (env.language === 'php') {\n\t\t\tenv.code = env.backupCode;\n\t\t\tdelete env.backupCode;\n\t\t}\n\t});\n\n\t// Re-insert the tokens after highlighting\n\tPrism.hooks.add('after-highlight', function(env) {\n\t\tif (env.language !== 'php') {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (var i = 0, t; t = env.tokenStack[i]; i++) {\n\t\t\t// The replace prevents $$, $&, $`, $', $n, $nn from being interpreted as special patterns\n\t\t\tenv.highlightedCode = env.highlightedCode.replace('{{{PHP' + (i + 1) + '}}}', Prism.highlight(t, env.grammar, 'php').replace(/\\$/g, '$$$$'));\n\t\t}\n\n\t\tenv.element.innerHTML = env.highlightedCode;\n\t});\n\n\t// Wrap tokens in classes that are missing them\n\tPrism.hooks.add('wrap', function(env) {\n\t\tif (env.language === 'php' && env.type === 'markup') {\n\t\t\tenv.content = env.content.replace(/(\\{\\{\\{PHP[0-9]+\\}\\}\\})/g, \"<span class=\\\"token php\\\">$1</span>\");\n\t\t}\n\t});\n\n\t// Add the rules before all others\n\tPrism.languages.insertBefore('php', 'comment', {\n\t\t'markup': {\n\t\t\tpattern: /<[^?]\\/?(.*?)>/,\n\t\t\tinside: Prism.languages.markup\n\t\t},\n\t\t'php': /\\{\\{\\{PHP[0-9]+\\}\\}\\}/\n\t});\n}\n"]},"hash":"394484e8351e61bc1e66b7317d5d663cd66ac6b6"}
