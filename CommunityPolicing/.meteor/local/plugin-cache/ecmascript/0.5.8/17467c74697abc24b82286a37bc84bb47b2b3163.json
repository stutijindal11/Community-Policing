{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/prism/components/prism-sass.js","filenameRelative":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/prism/components/prism-sass.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/prism/components/prism-sass.js.map","sourceFileName":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/prism/components/prism-sass.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"prism-sass"},"ignored":false,"code":"(function (Prism) {\n\tPrism.languages.sass = Prism.languages.extend('css', {\n\t\t// Sass comments don't need to be closed, only indented\n\t\t'comment': {\n\t\t\tpattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('sass', 'atrule', {\n\t\t// We want to consume the whole line\n\t\t'atrule-line': {\n\t\t\t// Includes support for = and + shortcuts\n\t\t\tpattern: /^(?:[ \\t]*)[@+=].+/m,\n\t\t\tinside: {\n\t\t\t\t'atrule': /(?:@[\\w-]+|[+=])/m\n\t\t\t}\n\t\t}\n\t});\n\tdelete Prism.languages.sass.atrule;\n\n\tvar variable = /((\\$[-_\\w]+)|(#\\{\\$[-_\\w]+\\}))/i;\n\tvar operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/, {\n\t\tpattern: /(\\s+)-(?=\\s)/,\n\t\tlookbehind: true\n\t}];\n\n\tPrism.languages.insertBefore('sass', 'property', {\n\t\t// We want to consume the whole line\n\t\t'variable-line': {\n\t\t\tpattern: /^[ \\t]*\\$.+/m,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /:/,\n\t\t\t\t'variable': variable,\n\t\t\t\t'operator': operator\n\t\t\t}\n\t\t},\n\t\t// We want to consume the whole line\n\t\t'property-line': {\n\t\t\tpattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,\n\t\t\tinside: {\n\t\t\t\t'property': [/[^:\\s]+(?=\\s*:)/, {\n\t\t\t\t\tpattern: /(:)[^:\\s]+/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t}],\n\t\t\t\t'punctuation': /:/,\n\t\t\t\t'variable': variable,\n\t\t\t\t'operator': operator,\n\t\t\t\t'important': Prism.languages.sass.important\n\t\t\t}\n\t\t}\n\t});\n\tdelete Prism.languages.sass.property;\n\tdelete Prism.languages.sass.important;\n\n\t// Now that whole lines for other patterns are consumed,\n\t// what's left should be selectors\n\tdelete Prism.languages.sass.selector;\n\tPrism.languages.insertBefore('sass', 'punctuation', {\n\t\t'selector': {\n\t\t\tpattern: /([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n})(Prism);","ast":null,"map":{"version":3,"sources":["/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/prism/components/prism-sass.js"],"names":[],"mappings":"AAAC,WAAS,KAAT,EAAgB;AAChB,OAAM,SAAN,CAAgB,IAAhB,GAAuB,MAAM,SAAN,CAAgB,MAAhB,CAAuB,KAAvB,EAA8B;;AAEpD,aAAW;AACV,YAAS,gDADC;AAEV,eAAY;AAFF;AAFyC,EAA9B,CAAvB;;AAQA,OAAM,SAAN,CAAgB,YAAhB,CAA6B,MAA7B,EAAqC,QAArC,EAA+C;;AAE9C,iBAAe;;AAEd,YAAS,qBAFK;AAGd,WAAQ;AACP,cAAU;AADH;AAHM;AAF+B,EAA/C;AAUA,QAAO,MAAM,SAAN,CAAgB,IAAhB,CAAqB,MAA5B;;AAGA,KAAI,WAAW,iCAAf;AACA,KAAI,WAAW,CACd,0CADc,EAEd;AACC,WAAS,cADV;AAEC,cAAY;AAFb,EAFc,CAAf;;AAQA,OAAM,SAAN,CAAgB,YAAhB,CAA6B,MAA7B,EAAqC,UAArC,EAAiD;;AAEhD,mBAAiB;AAChB,YAAS,cADO;AAEhB,WAAQ;AACP,mBAAe,GADR;AAEP,gBAAY,QAFL;AAGP,gBAAY;AAHL;AAFQ,GAF+B;;AAWhD,mBAAiB;AAChB,YAAS,qCADO;AAEhB,WAAQ;AACP,gBAAY,CACX,iBADW,EAEX;AACC,cAAS,YADV;AAEC,iBAAY;AAFb,KAFW,CADL;AAQP,mBAAe,GARR;AASP,gBAAY,QATL;AAUP,gBAAY,QAVL;AAWP,iBAAa,MAAM,SAAN,CAAgB,IAAhB,CAAqB;AAX3B;AAFQ;AAX+B,EAAjD;AA4BA,QAAO,MAAM,SAAN,CAAgB,IAAhB,CAAqB,QAA5B;AACA,QAAO,MAAM,SAAN,CAAgB,IAAhB,CAAqB,SAA5B;;;;AAIA,QAAO,MAAM,SAAN,CAAgB,IAAhB,CAAqB,QAA5B;AACA,OAAM,SAAN,CAAgB,YAAhB,CAA6B,MAA7B,EAAqC,aAArC,EAAoD;AACnD,cAAY;AACX,YAAS,wEADE;AAEX,eAAY;AAFD;AADuC,EAApD;AAOA,CAxEA,EAwEC,KAxED,CAAD","file":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/prism/components/prism-sass.js.map","sourcesContent":["(function(Prism) {\n\tPrism.languages.sass = Prism.languages.extend('css', {\n\t\t// Sass comments don't need to be closed, only indented\n\t\t'comment': {\n\t\t\tpattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('sass', 'atrule', {\n\t\t// We want to consume the whole line\n\t\t'atrule-line': {\n\t\t\t// Includes support for = and + shortcuts\n\t\t\tpattern: /^(?:[ \\t]*)[@+=].+/m,\n\t\t\tinside: {\n\t\t\t\t'atrule': /(?:@[\\w-]+|[+=])/m\n\t\t\t}\n\t\t}\n\t});\n\tdelete Prism.languages.sass.atrule;\n\n\n\tvar variable = /((\\$[-_\\w]+)|(#\\{\\$[-_\\w]+\\}))/i;\n\tvar operator = [\n\t\t/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/,\n\t\t{\n\t\t\tpattern: /(\\s+)-(?=\\s)/,\n\t\t\tlookbehind: true\n\t\t}\n\t];\n\n\tPrism.languages.insertBefore('sass', 'property', {\n\t\t// We want to consume the whole line\n\t\t'variable-line': {\n\t\t\tpattern: /^[ \\t]*\\$.+/m,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /:/,\n\t\t\t\t'variable': variable,\n\t\t\t\t'operator': operator\n\t\t\t}\n\t\t},\n\t\t// We want to consume the whole line\n\t\t'property-line': {\n\t\t\tpattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,\n\t\t\tinside: {\n\t\t\t\t'property': [\n\t\t\t\t\t/[^:\\s]+(?=\\s*:)/,\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: /(:)[^:\\s]+/,\n\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t'punctuation': /:/,\n\t\t\t\t'variable': variable,\n\t\t\t\t'operator': operator,\n\t\t\t\t'important': Prism.languages.sass.important\n\t\t\t}\n\t\t}\n\t});\n\tdelete Prism.languages.sass.property;\n\tdelete Prism.languages.sass.important;\n\n\t// Now that whole lines for other patterns are consumed,\n\t// what's left should be selectors\n\tdelete Prism.languages.sass.selector;\n\tPrism.languages.insertBefore('sass', 'punctuation', {\n\t\t'selector': {\n\t\t\tpattern: /([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n}(Prism));"]},"hash":"17467c74697abc24b82286a37bc84bb47b2b3163"}
