{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.interchange.js","filenameRelative":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.interchange.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.interchange.js.map","sourceFileName":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.interchange.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"foundation.interchange"},"ignored":false,"code":"/**\n * Interchange module.\n * @module foundation.interchange\n * @requires foundation.util.mediaQuery\n * @requires foundation.util.timerAndImageLoader\n */\n!function (Foundation, $) {\n  'use strict';\n\n  /**\n   * Creates a new instance of Interchange.\n   * @class\n   * @fires Interchange#init\n   * @param {Object} element - jQuery object to add the trigger to.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n\n  function Interchange(element, options) {\n    this.$element = element;\n    this.options = $.extend({}, Interchange.defaults, options);\n    this.rules = [];\n    this.currentPath = '';\n\n    this._init();\n    this._events();\n\n    Foundation.registerPlugin(this);\n  }\n\n  /**\n   * Default settings for plugin\n   */\n  Interchange.defaults = {\n    /**\n     * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.\n     * @option\n     */\n    rules: null\n  };\n\n  Interchange.SPECIAL_QUERIES = {\n    'landscape': 'screen and (orientation: landscape)',\n    'portrait': 'screen and (orientation: portrait)',\n    'retina': 'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'\n  };\n\n  /**\n   * Initializes the Interchange plugin and calls functions to get interchange functioning on load.\n   * @function\n   * @private\n   */\n  Interchange.prototype._init = function () {\n    this._addBreakpoints();\n    this._generateRules();\n    this._reflow();\n  };\n\n  /**\n   * Initializes events for Interchange.\n   * @function\n   * @private\n   */\n  Interchange.prototype._events = function () {\n    $(window).on('resize.fndtn.interchange', Foundation.util.throttle(this._reflow.bind(this), 50));\n  };\n\n  /**\n   * Calls necessary functions to update Interchange upon DOM change\n   * @function\n   * @private\n   */\n  Interchange.prototype._reflow = function () {\n    var match;\n\n    // Iterate through each rule, but only save the last match\n    for (var i in this.rules) {\n      var rule = this.rules[i];\n\n      if (window.matchMedia(rule.query).matches) {\n        match = rule;\n      }\n    }\n\n    if (match) {\n      this.replace(match.path);\n    }\n  };\n\n  /**\n   * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.\n   * @function\n   * @private\n   */\n  Interchange.prototype._addBreakpoints = function () {\n    for (var i in Foundation.MediaQuery.queries) {\n      var query = Foundation.MediaQuery.queries[i];\n      Interchange.SPECIAL_QUERIES[query.name] = query.value;\n    }\n  };\n\n  /**\n   * Checks the Interchange element for the provided media query + content pairings\n   * @function\n   * @private\n   * @param {Object} element - jQuery object that is an Interchange instance\n   * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys\n   */\n  Interchange.prototype._generateRules = function () {\n    var rulesList = [];\n    var rules;\n\n    if (this.options.rules) {\n      rules = this.options.rules;\n    } else {\n      rules = this.$element.data('interchange').match(/\\[.*?\\]/g);\n    }\n\n    for (var i in rules) {\n      var rule = rules[i].slice(1, -1).split(', ');\n      var path = rule.slice(0, -1).join('');\n      var query = rule[rule.length - 1];\n\n      if (Interchange.SPECIAL_QUERIES[query]) {\n        query = Interchange.SPECIAL_QUERIES[query];\n      }\n\n      rulesList.push({\n        path: path,\n        query: query\n      });\n    }\n\n    this.rules = rulesList;\n  };\n\n  /**\n   * Update the `src` property of an image, or change the HTML of a container, to the specified path.\n   * @function\n   * @param {String} path - Path to the image or HTML partial.\n   * @fires Interchange#replaced\n   */\n  Interchange.prototype.replace = function (path) {\n    if (this.currentPath === path) return;\n\n    var _this = this;\n\n    // Replacing images\n    if (this.$element[0].nodeName === 'IMG') {\n      this.$element.attr('src', path).load(function () {\n        _this.$element.trigger('replaced.zf.interchange');\n        _this.currentPath = path;\n      });\n    }\n    // Replacing background images\n    else if (path.match(/\\.(gif|jpg|jpeg|tiff|png)([?#].*)?/i)) {\n        this.$element.css({ 'background-image': 'url(' + path + ')' });\n      }\n      // Replacing HTML\n      else {\n          $.get(path, function (response) {\n            _this.$element.html(response);\n            _this.$element.trigger('replaced.zf.interchange');\n            _this.currentPath = path;\n          });\n        }\n  };\n  /**\n   * Destroys an instance of interchange.\n   * @function\n   */\n  Interchange.prototype.destroy = function () {\n    //TODO this.\n  };\n  Foundation.plugin(Interchange, 'Interchange');\n\n  // Exports for AMD/Browserify\n  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') module.exports = Interchange;\n  if (typeof define === 'function') define(['foundation'], function () {\n    return Interchange;\n  });\n}(Foundation, jQuery);","ast":null,"map":{"version":3,"sources":["/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.interchange.js"],"names":[],"mappings":"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","file":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.interchange.js.map","sourcesContent":["/**\n * Interchange module.\n * @module foundation.interchange\n * @requires foundation.util.mediaQuery\n * @requires foundation.util.timerAndImageLoader\n */\n!function(Foundation, $) {\n  'use strict';\n\n  /**\n   * Creates a new instance of Interchange.\n   * @class\n   * @fires Interchange#init\n   * @param {Object} element - jQuery object to add the trigger to.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  function Interchange(element, options) {\n    this.$element = element;\n    this.options = $.extend({}, Interchange.defaults, options);\n    this.rules = [];\n    this.currentPath = '';\n\n    this._init();\n    this._events();\n\n    Foundation.registerPlugin(this);\n  }\n\n  /**\n   * Default settings for plugin\n   */\n  Interchange.defaults = {\n    /**\n     * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.\n     * @option\n     */\n    rules: null\n  };\n\n  Interchange.SPECIAL_QUERIES = {\n    'landscape': 'screen and (orientation: landscape)',\n    'portrait': 'screen and (orientation: portrait)',\n    'retina': 'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'\n  };\n\n  /**\n   * Initializes the Interchange plugin and calls functions to get interchange functioning on load.\n   * @function\n   * @private\n   */\n  Interchange.prototype._init = function() {\n    this._addBreakpoints();\n    this._generateRules();\n    this._reflow();\n  };\n\n  /**\n   * Initializes events for Interchange.\n   * @function\n   * @private\n   */\n  Interchange.prototype._events = function() {\n    $(window).on('resize.fndtn.interchange', Foundation.util.throttle(this._reflow.bind(this), 50));\n  };\n\n  /**\n   * Calls necessary functions to update Interchange upon DOM change\n   * @function\n   * @private\n   */\n  Interchange.prototype._reflow = function() {\n    var match;\n\n    // Iterate through each rule, but only save the last match\n    for (var i in this.rules) {\n      var rule = this.rules[i];\n\n      if (window.matchMedia(rule.query).matches) {\n        match = rule;\n      }\n    }\n\n    if (match) {\n      this.replace(match.path);\n    }\n  };\n\n  /**\n   * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.\n   * @function\n   * @private\n   */\n  Interchange.prototype._addBreakpoints = function() {\n    for (var i in Foundation.MediaQuery.queries) {\n      var query = Foundation.MediaQuery.queries[i];\n      Interchange.SPECIAL_QUERIES[query.name] = query.value;\n    }\n  };\n\n  /**\n   * Checks the Interchange element for the provided media query + content pairings\n   * @function\n   * @private\n   * @param {Object} element - jQuery object that is an Interchange instance\n   * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys\n   */\n  Interchange.prototype._generateRules = function() {\n    var rulesList = [];\n    var rules;\n\n    if (this.options.rules) {\n      rules = this.options.rules;\n    }\n    else {\n      rules = this.$element.data('interchange').match(/\\[.*?\\]/g);\n    }\n\n    for (var i in rules) {\n      var rule = rules[i].slice(1, -1).split(', ');\n      var path = rule.slice(0, -1).join('');\n      var query = rule[rule.length - 1];\n\n      if (Interchange.SPECIAL_QUERIES[query]) {\n        query = Interchange.SPECIAL_QUERIES[query];\n      }\n\n      rulesList.push({\n        path: path,\n        query: query\n      });\n    }\n\n    this.rules = rulesList;\n  };\n\n  /**\n   * Update the `src` property of an image, or change the HTML of a container, to the specified path.\n   * @function\n   * @param {String} path - Path to the image or HTML partial.\n   * @fires Interchange#replaced\n   */\n  Interchange.prototype.replace = function(path) {\n    if (this.currentPath === path) return;\n\n    var _this = this;\n\n    // Replacing images\n    if (this.$element[0].nodeName === 'IMG') {\n      this.$element.attr('src', path).load(function() {\n        _this.$element.trigger('replaced.zf.interchange');\n        _this.currentPath = path;\n      });\n    }\n    // Replacing background images\n    else if (path.match(/\\.(gif|jpg|jpeg|tiff|png)([?#].*)?/i)) {\n      this.$element.css({ 'background-image': 'url('+path+')' });\n    }\n    // Replacing HTML\n    else {\n      $.get(path, function(response) {\n        _this.$element.html(response);\n        _this.$element.trigger('replaced.zf.interchange');\n        _this.currentPath = path;\n      });\n    }\n  };\n  /**\n   * Destroys an instance of interchange.\n   * @function\n   */\n  Interchange.prototype.destroy = function(){\n    //TODO this.\n  };\n  Foundation.plugin(Interchange, 'Interchange');\n\n  // Exports for AMD/Browserify\n  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined')\n    module.exports = Interchange;\n  if (typeof define === 'function')\n    define(['foundation'], function() {\n      return Interchange;\n    });\n\n}(Foundation, jQuery);\n"]},"hash":"7879e65e46f382903da098ba67434906667943e8"}
