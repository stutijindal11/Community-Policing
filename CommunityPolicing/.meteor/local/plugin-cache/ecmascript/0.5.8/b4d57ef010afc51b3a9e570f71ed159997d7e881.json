{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.slider.js","filenameRelative":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.slider.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.slider.js.map","sourceFileName":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.slider.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"foundation.slider"},"ignored":false,"code":"/**\n * Slider module.\n * @module foundation.slider\n * @requires foundation.util.motion\n * @requires foundation.util.triggers\n * @requires foundation.util.keyboard\n * @requires foundation.util.touch\n */\n!function ($, Foundation) {\n  'use strict';\n\n  /**\n   * Creates a new instance of a drilldown menu.\n   * @class\n   * @param {jQuery} element - jQuery object to make into an accordion menu.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n\n  function Slider(element, options) {\n    this.$element = element;\n    this.options = $.extend({}, Slider.defaults, this.$element.data(), options);\n\n    this._init();\n\n    Foundation.registerPlugin(this);\n    Foundation.Keyboard.register('Slider', {\n      'ltr': {\n        'ARROW_RIGHT': 'increase',\n        'ARROW_UP': 'increase',\n        'ARROW_DOWN': 'decrease',\n        'ARROW_LEFT': 'decrease',\n        'SHIFT_ARROW_RIGHT': 'increase_fast',\n        'SHIFT_ARROW_UP': 'increase_fast',\n        'SHIFT_ARROW_DOWN': 'decrease_fast',\n        'SHIFT_ARROW_LEFT': 'decrease_fast'\n      },\n      'rtl': {\n        'ARROW_LEFT': 'increase',\n        'ARROW_RIGHT': 'decrease',\n        'SHIFT_ARROW_LEFT': 'increase_fast',\n        'SHIFT_ARROW_RIGHT': 'decrease_fast'\n      }\n    });\n  }\n\n  Slider.defaults = {\n    /**\n     * Minimum value for the slider scale.\n     * @option\n     * @example 0\n     */\n    start: 0,\n    /**\n     * Maximum value for the slider scale.\n     * @option\n     * @example 100\n     */\n    end: 100,\n    /**\n     * Minimum value change per change event. Not Currently Implemented!\n      */\n    step: 1,\n    /**\n     * Value at which the handle/input *(left handle/first input)* should be set to on initialization.\n     * @option\n     * @example 0\n     */\n    initialStart: 0,\n    /**\n     * Value at which the right handle/second input should be set to on initialization.\n     * @option\n     * @example 100\n     */\n    initialEnd: 100,\n    /**\n     * Allows the input to be located outside the container and visible. Set to by the JS\n     * @option\n     * @example false\n     */\n    binding: false,\n    /**\n     * Allows the user to click/tap on the slider bar to select a value.\n     * @option\n     * @example true\n     */\n    clickSelect: true,\n    /**\n     * Set to true and use the `vertical` class to change alignment to vertical.\n     * @option\n     * @example false\n     */\n    vertical: false,\n    /**\n     * Allows the user to drag the slider handle(s) to select a value.\n     * @option\n     * @example true\n     */\n    draggable: true,\n    /**\n     * Disables the slider and prevents event listeners from being applied. Double checked by JS with `disabledClass`.\n     * @option\n     * @example false\n     */\n    disabled: false,\n    /**\n     * Allows the use of two handles. Double checked by the JS. Changes some logic handling.\n     * @option\n     * @example false\n     */\n    doubleSided: false,\n    /**\n     * Potential future feature.\n     */\n    // steps: 100,\n    /**\n     * Number of decimal places the plugin should go to for floating point precision.\n     * @option\n     * @example 2\n     */\n    decimal: 2,\n    /**\n     * Time delay for dragged elements.\n     */\n    // dragDelay: 0,\n    /**\n     * Time, in ms, to animate the movement of a slider handle if user clicks/taps on the bar. Needs to be manually set if updating the transition time in the Sass settings.\n     * @option\n     * @example 200\n     */\n    moveTime: 200, //update this if changing the transition time in the sass\n    /**\n     * Class applied to disabled sliders.\n     * @option\n     * @example 'disabled'\n     */\n    disabledClass: 'disabled'\n  };\n  /**\n   * Initilizes the plugin by reading/setting attributes, creating collections and setting the initial position of the handle(s).\n   * @function\n   * @private\n   */\n  Slider.prototype._init = function () {\n    this.inputs = this.$element.find('input');\n    this.handles = this.$element.find('[data-slider-handle]');\n\n    this.$handle = this.handles.eq(0);\n    this.$input = this.inputs.length ? this.inputs.eq(0) : $('#' + this.$handle.attr('aria-controls'));\n    this.$fill = this.$element.find('[data-slider-fill]').css(this.options.vertical ? 'height' : 'width', 0);\n\n    var isDbl = false,\n        _this = this;\n    if (this.options.disabled || this.$element.hasClass(this.options.disabledClass)) {\n      this.options.disabled = true;\n      this.$element.addClass(this.options.disabledClass);\n    }\n    if (!this.inputs.length) {\n      this.inputs = $().add(this.$input);\n      this.options.binding = true;\n    }\n    this._setInitAttr(0);\n    this._events(this.$handle);\n\n    if (this.handles[1]) {\n      this.options.doubleSided = true;\n      this.$handle2 = this.handles.eq(1);\n      this.$input2 = this.inputs.length ? this.inputs.eq(1) : $('#' + this.$handle2.attr('aria-controls'));\n\n      if (!this.inputs[1]) {\n        this.inputs = this.inputs.add(this.$input2);\n      }\n      isDbl = true;\n\n      this._setHandlePos(this.$handle, this.options.initialStart, true, function () {\n\n        _this._setHandlePos(_this.$handle2, _this.options.initialEnd);\n      });\n      // this.$handle.triggerHandler('click.zf.slider');\n      this._setInitAttr(1);\n      this._events(this.$handle2);\n    }\n\n    if (!isDbl) {\n      this._setHandlePos(this.$handle, this.options.initialStart, true);\n    }\n  };\n  /**\n   * Sets the position of the selected handle and fill bar.\n   * @function\n   * @private\n   * @param {jQuery} $hndl - the selected handle to move.\n   * @param {Number} location - floating point between the start and end values of the slider bar.\n   * @param {Function} cb - callback function to fire on completion.\n   * @fires Slider#moved\n   */\n  Slider.prototype._setHandlePos = function ($hndl, location, noInvert, cb) {\n    //might need to alter that slightly for bars that will have odd number selections.\n    location = parseFloat(location); //on input change events, convert string to number...grumble.\n    // prevent slider from running out of bounds\n    if (location < this.options.start) {\n      location = this.options.start;\n    } else if (location > this.options.end) {\n      location = this.options.end;\n    }\n\n    var isDbl = this.options.doubleSided,\n        callback = cb || null;\n\n    if (isDbl) {\n      if (this.handles.index($hndl) === 0) {\n        var h2Val = parseFloat(this.$handle2.attr('aria-valuenow'));\n        location = location >= h2Val ? h2Val - this.options.step : location;\n      } else {\n        var h1Val = parseFloat(this.$handle.attr('aria-valuenow'));\n        location = location <= h1Val ? h1Val + this.options.step : location;\n      }\n    }\n\n    if (this.options.vertical && !noInvert) {\n      location = this.options.end - location;\n    }\n    var _this = this,\n        vert = this.options.vertical,\n        hOrW = vert ? 'height' : 'width',\n        lOrT = vert ? 'top' : 'left',\n        halfOfHandle = $hndl[0].getBoundingClientRect()[hOrW] / 2,\n        elemDim = this.$element[0].getBoundingClientRect()[hOrW],\n        pctOfBar = percent(location, this.options.end).toFixed(this.options.decimal),\n        pxToMove = (elemDim - halfOfHandle) * pctOfBar,\n        movement = (percent(pxToMove, elemDim) * 100).toFixed(this.options.decimal),\n        location = location > 0 ? parseFloat(location.toFixed(this.options.decimal)) : 0,\n        anim,\n        prog,\n        start = null,\n        css = {};\n\n    this._setValues($hndl, location);\n\n    if (this.options.doubleSided) {\n      //update to calculate based on values set to respective inputs??\n      var isLeftHndl = this.handles.index($hndl) === 0,\n          dim,\n          idx = this.handles.index($hndl);\n\n      if (isLeftHndl) {\n        css[lOrT] = (pctOfBar > 0 ? pctOfBar * 100 : 0) + '%'; //\n        dim = /*Math.abs*/((percent(this.$handle2.position()[lOrT] + halfOfHandle, elemDim) - parseFloat(pctOfBar)) * 100).toFixed(this.options.decimal) + '%';\n        css['min-' + hOrW] = dim;\n        if (cb && typeof cb === 'function') {\n          cb();\n        }\n      } else {\n        location = (location < 100 ? location : 100) - (parseFloat(this.$handle[0].style.left) || this.options.end - location);\n        css['min-' + hOrW] = location + '%';\n      }\n    }\n\n    this.$element.one('finished.zf.animate', function () {\n      _this.animComplete = true;\n      /**\n       * Fires when the handle is done moving.\n       * @event Slider#moved\n       */\n      _this.$element.trigger('moved.zf.slider', [$hndl]);\n    });\n    var moveTime = _this.$element.data('dragging') ? 1000 / 60 : _this.options.moveTime;\n    /*var move = new */Foundation.Move(moveTime, $hndl, function () {\n      $hndl.css(lOrT, movement + '%');\n      if (!_this.options.doubleSided) {\n        _this.$fill.css(hOrW, pctOfBar * 100 + '%');\n      } else {\n        _this.$fill.css(css);\n      }\n    });\n    // move.do();\n  };\n  /**\n   * Sets the initial attribute for the slider element.\n   * @function\n   * @private\n   * @param {Number} idx - index of the current handle/input to use.\n   */\n  Slider.prototype._setInitAttr = function (idx) {\n    var id = this.inputs.eq(idx).attr('id') || Foundation.GetYoDigits(6, 'slider');\n    this.inputs.eq(idx).attr({\n      'id': id,\n      'max': this.options.end,\n      'min': this.options.start\n\n    });\n    this.handles.eq(idx).attr({\n      'role': 'slider',\n      'aria-controls': id,\n      'aria-valuemax': this.options.end,\n      'aria-valuemin': this.options.start,\n      'aria-valuenow': idx === 0 ? this.options.initialStart : this.options.initialEnd,\n      'aria-orientation': this.options.vertical ? 'vertical' : 'horizontal',\n      'tabindex': 0\n    });\n  };\n  /**\n   * Sets the input and `aria-valuenow` values for the slider element.\n   * @function\n   * @private\n   * @param {jQuery} $handle - the currently selected handle.\n   * @param {Number} val - floating point of the new value.\n   */\n  Slider.prototype._setValues = function ($handle, val) {\n    var idx = this.options.doubleSided ? this.handles.index($handle) : 0;\n    this.inputs.eq(idx).val(val);\n    $handle.attr('aria-valuenow', val);\n  };\n  /**\n   * Handles events on the slider element.\n   * Calculates the new location of the current handle.\n   * If there are two handles and the bar was clicked, it determines which handle to move.\n   * @function\n   * @private\n   * @param {Object} e - the `event` object passed from the listener.\n   * @param {jQuery} $handle - the current handle to calculate for, if selected.\n   * @param {Number} val - floating point number for the new value of the slider.\n   */\n  Slider.prototype._handleEvent = function (e, $handle, val) {\n    var value, hasVal;\n    if (!val) {\n      //click or drag events\n      e.preventDefault();\n      var _this = this,\n          vertical = this.options.vertical,\n          param = vertical ? 'height' : 'width',\n          direction = vertical ? 'top' : 'left',\n          pageXY = vertical ? e.pageY : e.pageX,\n          halfOfHandle = this.$handle[0].getBoundingClientRect()[param] / 2,\n          barDim = this.$element[0].getBoundingClientRect()[param],\n          barOffset = this.$element.offset()[direction] - pageXY,\n          barXY = barOffset > 0 ? -halfOfHandle : barOffset - halfOfHandle < -barDim ? barDim : Math.abs(barOffset),\n          //if the cursor position is less than or greater than the elements bounding coordinates, set coordinates within those bounds\n      // eleDim = this.$element[0].getBoundingClientRect()[param],\n      offsetPct = percent(barXY, barDim);\n      value = (this.options.end - this.options.start) * offsetPct;\n      hasVal = false;\n\n      if (!$handle) {\n        //figure out which handle it is, pass it to the next function.\n        var firstHndlPos = absPosition(this.$handle, direction, barXY, param),\n            secndHndlPos = absPosition(this.$handle2, direction, barXY, param);\n        $handle = firstHndlPos <= secndHndlPos ? this.$handle : this.$handle2;\n      }\n    } else {\n      //change event on input\n      value = val;\n      hasVal = true;\n    }\n\n    this._setHandlePos($handle, value, hasVal);\n  };\n  /**\n   * Adds event listeners to the slider elements.\n   * @function\n   * @private\n   * @param {jQuery} $handle - the current handle to apply listeners to.\n   */\n  Slider.prototype._events = function ($handle) {\n    if (this.options.disabled) {\n      return false;\n    }\n\n    var _this = this,\n        curHandle,\n        timer;\n\n    this.inputs.off('change.zf.slider').on('change.zf.slider', function (e) {\n      var idx = _this.inputs.index($(this));\n      _this._handleEvent(e, _this.handles.eq(idx), $(this).val());\n    });\n\n    if (this.options.clickSelect) {\n      this.$element.off('click.zf.slider').on('click.zf.slider', function (e) {\n        if (_this.$element.data('dragging')) {\n          return false;\n        }\n        _this.animComplete = false;\n        if (_this.options.doubleSided) {\n          _this._handleEvent(e);\n        } else {\n          _this._handleEvent(e, _this.$handle);\n        }\n      });\n    }\n\n    if (this.options.draggable) {\n      this.handles.addTouch();\n      // var curHandle,\n      //     timer,\n      var $body = $('body');\n      $handle.off('mousedown.zf.slider').on('mousedown.zf.slider', function (e) {\n        $handle.addClass('is-dragging');\n        _this.$fill.addClass('is-dragging'); //\n        _this.$element.data('dragging', true);\n        _this.animComplete = false;\n        curHandle = $(e.currentTarget);\n\n        $body.on('mousemove.zf.slider', function (e) {\n          e.preventDefault();\n\n          // timer = setTimeout(function(){\n          _this._handleEvent(e, curHandle);\n          // }, _this.options.dragDelay);\n        }).on('mouseup.zf.slider', function (e) {\n          // clearTimeout(timer);\n          _this.animComplete = true;\n          _this._handleEvent(e, curHandle);\n          $handle.removeClass('is-dragging');\n          _this.$fill.removeClass('is-dragging');\n          _this.$element.data('dragging', false);\n          // Foundation.reflow(_this.$element, 'slider');\n          $body.off('mousemove.zf.slider mouseup.zf.slider');\n        });\n      });\n    }\n    $handle.off('keydown.zf.slider').on('keydown.zf.slider', function (e) {\n      var idx = _this.options.doubleSided ? _this.handles.index($(this)) : 0,\n          oldValue = parseFloat(_this.inputs.eq(idx).val()),\n          newValue;\n\n      var _$handle = $(this);\n\n      // handle keyboard event with keyboard util\n      Foundation.Keyboard.handleKey(e, _this, {\n        decrease: function decrease() {\n          newValue = oldValue - _this.options.step;\n        },\n        increase: function increase() {\n          newValue = oldValue + _this.options.step;\n        },\n        decrease_fast: function decrease_fast() {\n          newValue = oldValue - _this.options.step * 10;\n        },\n        increase_fast: function increase_fast() {\n          newValue = oldValue + _this.options.step * 10;\n        },\n        handled: function handled() {\n          // only set handle pos when event was handled specially\n          e.preventDefault();\n          _this._setHandlePos(_$handle, newValue, true);\n        }\n      });\n      /*if (newValue) { // if pressed key has special function, update value\n        e.preventDefault();\n        _this._setHandlePos(_$handle, newValue);\n      }*/\n    });\n  };\n  /**\n   * Destroys the slider plugin.\n   */\n  Slider.prototype.destroy = function () {\n    this.handles.off('.zf.slider');\n    this.inputs.off('.zf.slider');\n    this.$element.off('.zf.slider');\n\n    Foundation.unregisterPlugin(this);\n  };\n\n  Foundation.plugin(Slider, 'Slider');\n\n  function percent(frac, num) {\n    return frac / num;\n  }\n  function absPosition($handle, dir, clickPos, param) {\n    return Math.abs($handle.position()[dir] + $handle[param]() / 2 - clickPos);\n  }\n}(jQuery, window.Foundation);\n\n//*********this is in case we go to static, absolute positions instead of dynamic positioning********\n// this.setSteps(function(){\n//   _this._events();\n//   var initStart = _this.options.positions[_this.options.initialStart - 1] || null;\n//   var initEnd = _this.options.initialEnd ? _this.options.position[_this.options.initialEnd - 1] : null;\n//   if(initStart || initEnd){\n//     _this._handleEvent(initStart, initEnd);\n//   }\n// });\n\n//***********the other part of absolute positions*************\n// Slider.prototype.setSteps = function(cb){\n//   var posChange = this.$element.outerWidth() / this.options.steps;\n//   var counter = 0\n//   while(counter < this.options.steps){\n//     if(counter){\n//       this.options.positions.push(this.options.positions[counter - 1] + posChange);\n//     }else{\n//       this.options.positions.push(posChange);\n//     }\n//     counter++;\n//   }\n//   cb();\n// };","ast":null,"map":{"version":3,"sources":["/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.slider.js"],"names":[],"mappings":"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","file":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.slider.js.map","sourcesContent":["/**\n * Slider module.\n * @module foundation.slider\n * @requires foundation.util.motion\n * @requires foundation.util.triggers\n * @requires foundation.util.keyboard\n * @requires foundation.util.touch\n */\n!function($, Foundation){\n  'use strict';\n\n  /**\n   * Creates a new instance of a drilldown menu.\n   * @class\n   * @param {jQuery} element - jQuery object to make into an accordion menu.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  function Slider(element, options){\n    this.$element = element;\n    this.options = $.extend({}, Slider.defaults, this.$element.data(), options);\n\n    this._init();\n\n    Foundation.registerPlugin(this);\n    Foundation.Keyboard.register('Slider', {\n      'ltr': {\n        'ARROW_RIGHT': 'increase',\n        'ARROW_UP': 'increase',\n        'ARROW_DOWN': 'decrease',\n        'ARROW_LEFT': 'decrease',\n        'SHIFT_ARROW_RIGHT': 'increase_fast',\n        'SHIFT_ARROW_UP': 'increase_fast',\n        'SHIFT_ARROW_DOWN': 'decrease_fast',\n        'SHIFT_ARROW_LEFT': 'decrease_fast'\n      },\n      'rtl': {\n        'ARROW_LEFT': 'increase',\n        'ARROW_RIGHT': 'decrease',\n        'SHIFT_ARROW_LEFT': 'increase_fast',\n        'SHIFT_ARROW_RIGHT': 'decrease_fast'\n      }\n    });\n  }\n\n  Slider.defaults = {\n    /**\n     * Minimum value for the slider scale.\n     * @option\n     * @example 0\n     */\n    start: 0,\n    /**\n     * Maximum value for the slider scale.\n     * @option\n     * @example 100\n     */\n    end: 100,\n    /**\n     * Minimum value change per change event. Not Currently Implemented!\n\n     */\n    step: 1,\n    /**\n     * Value at which the handle/input *(left handle/first input)* should be set to on initialization.\n     * @option\n     * @example 0\n     */\n    initialStart: 0,\n    /**\n     * Value at which the right handle/second input should be set to on initialization.\n     * @option\n     * @example 100\n     */\n    initialEnd: 100,\n    /**\n     * Allows the input to be located outside the container and visible. Set to by the JS\n     * @option\n     * @example false\n     */\n    binding: false,\n    /**\n     * Allows the user to click/tap on the slider bar to select a value.\n     * @option\n     * @example true\n     */\n    clickSelect: true,\n    /**\n     * Set to true and use the `vertical` class to change alignment to vertical.\n     * @option\n     * @example false\n     */\n    vertical: false,\n    /**\n     * Allows the user to drag the slider handle(s) to select a value.\n     * @option\n     * @example true\n     */\n    draggable: true,\n    /**\n     * Disables the slider and prevents event listeners from being applied. Double checked by JS with `disabledClass`.\n     * @option\n     * @example false\n     */\n    disabled: false,\n    /**\n     * Allows the use of two handles. Double checked by the JS. Changes some logic handling.\n     * @option\n     * @example false\n     */\n    doubleSided: false,\n    /**\n     * Potential future feature.\n     */\n    // steps: 100,\n    /**\n     * Number of decimal places the plugin should go to for floating point precision.\n     * @option\n     * @example 2\n     */\n    decimal: 2,\n    /**\n     * Time delay for dragged elements.\n     */\n    // dragDelay: 0,\n    /**\n     * Time, in ms, to animate the movement of a slider handle if user clicks/taps on the bar. Needs to be manually set if updating the transition time in the Sass settings.\n     * @option\n     * @example 200\n     */\n    moveTime: 200,//update this if changing the transition time in the sass\n    /**\n     * Class applied to disabled sliders.\n     * @option\n     * @example 'disabled'\n     */\n    disabledClass: 'disabled'\n  };\n  /**\n   * Initilizes the plugin by reading/setting attributes, creating collections and setting the initial position of the handle(s).\n   * @function\n   * @private\n   */\n  Slider.prototype._init = function(){\n    this.inputs = this.$element.find('input');\n    this.handles = this.$element.find('[data-slider-handle]');\n\n    this.$handle = this.handles.eq(0);\n    this.$input = this.inputs.length ? this.inputs.eq(0) : $('#' + this.$handle.attr('aria-controls'));\n    this.$fill = this.$element.find('[data-slider-fill]').css(this.options.vertical ? 'height' : 'width', 0);\n\n    var isDbl = false,\n        _this = this;\n    if(this.options.disabled || this.$element.hasClass(this.options.disabledClass)){\n      this.options.disabled = true;\n      this.$element.addClass(this.options.disabledClass);\n    }\n    if(!this.inputs.length){\n      this.inputs = $().add(this.$input);\n      this.options.binding = true;\n    }\n    this._setInitAttr(0);\n    this._events(this.$handle);\n\n    if(this.handles[1]){\n      this.options.doubleSided = true;\n      this.$handle2 = this.handles.eq(1);\n      this.$input2 = this.inputs.length ? this.inputs.eq(1) : $('#' + this.$handle2.attr('aria-controls'));\n\n      if(!this.inputs[1]){\n        this.inputs = this.inputs.add(this.$input2);\n      }\n      isDbl = true;\n\n      this._setHandlePos(this.$handle, this.options.initialStart, true, function(){\n\n        _this._setHandlePos(_this.$handle2, _this.options.initialEnd);\n      });\n      // this.$handle.triggerHandler('click.zf.slider');\n      this._setInitAttr(1);\n      this._events(this.$handle2);\n    }\n\n    if(!isDbl){\n      this._setHandlePos(this.$handle, this.options.initialStart, true);\n    }\n  };\n  /**\n   * Sets the position of the selected handle and fill bar.\n   * @function\n   * @private\n   * @param {jQuery} $hndl - the selected handle to move.\n   * @param {Number} location - floating point between the start and end values of the slider bar.\n   * @param {Function} cb - callback function to fire on completion.\n   * @fires Slider#moved\n   */\n  Slider.prototype._setHandlePos = function($hndl, location, noInvert, cb){\n  //might need to alter that slightly for bars that will have odd number selections.\n    location = parseFloat(location);//on input change events, convert string to number...grumble.\n    // prevent slider from running out of bounds\n    if(location < this.options.start){ location = this.options.start; }\n    else if(location > this.options.end){ location = this.options.end; }\n\n    var isDbl = this.options.doubleSided,\n        callback = cb || null;\n\n    if(isDbl){\n      if(this.handles.index($hndl) === 0){\n        var h2Val = parseFloat(this.$handle2.attr('aria-valuenow'));\n        location = location >= h2Val ? h2Val - this.options.step : location;\n      }else{\n        var h1Val = parseFloat(this.$handle.attr('aria-valuenow'));\n        location = location <= h1Val ? h1Val + this.options.step : location;\n      }\n    }\n\n    if(this.options.vertical && !noInvert){\n      location = this.options.end - location;\n    }\n    var _this = this,\n        vert = this.options.vertical,\n        hOrW = vert ? 'height' : 'width',\n        lOrT = vert ? 'top' : 'left',\n        halfOfHandle = $hndl[0].getBoundingClientRect()[hOrW] / 2,\n        elemDim = this.$element[0].getBoundingClientRect()[hOrW],\n        pctOfBar = percent(location, this.options.end).toFixed(this.options.decimal),\n        pxToMove = (elemDim - halfOfHandle) * pctOfBar,\n        movement = (percent(pxToMove, elemDim) * 100).toFixed(this.options.decimal),\n        location = location > 0 ? parseFloat(location.toFixed(this.options.decimal)) : 0,\n        anim, prog, start = null, css = {};\n\n    this._setValues($hndl, location);\n\n    if(this.options.doubleSided){//update to calculate based on values set to respective inputs??\n      var isLeftHndl = this.handles.index($hndl) === 0,\n          dim,\n          idx = this.handles.index($hndl);\n\n      if(isLeftHndl){\n        css[lOrT] = (pctOfBar > 0 ? pctOfBar * 100 : 0) + '%';//\n        dim = /*Math.abs*/((percent(this.$handle2.position()[lOrT] + halfOfHandle, elemDim) - parseFloat(pctOfBar)) * 100).toFixed(this.options.decimal) + '%';\n        css['min-' + hOrW] = dim;\n        if(cb && typeof cb === 'function'){ cb(); }\n      }else{\n        location = (location < 100 ? location : 100) - (parseFloat(this.$handle[0].style.left) || this.options.end - location);\n        css['min-' + hOrW] = location + '%';\n      }\n    }\n\n    this.$element.one('finished.zf.animate', function(){\n                    _this.animComplete = true;\n                    /**\n                     * Fires when the handle is done moving.\n                     * @event Slider#moved\n                     */\n                    _this.$element.trigger('moved.zf.slider', [$hndl]);\n                });\n    var moveTime = _this.$element.data('dragging') ? 1000/60 : _this.options.moveTime;\n    /*var move = new */Foundation.Move(moveTime, $hndl, function(){\n      $hndl.css(lOrT, movement + '%');\n      if(!_this.options.doubleSided){\n        _this.$fill.css(hOrW, pctOfBar * 100 + '%');\n      }else{\n        _this.$fill.css(css);\n      }\n    });\n    // move.do();\n  };\n  /**\n   * Sets the initial attribute for the slider element.\n   * @function\n   * @private\n   * @param {Number} idx - index of the current handle/input to use.\n   */\n  Slider.prototype._setInitAttr = function(idx){\n    var id = this.inputs.eq(idx).attr('id') || Foundation.GetYoDigits(6, 'slider');\n    this.inputs.eq(idx).attr({\n      'id': id,\n      'max': this.options.end,\n      'min': this.options.start\n\n    });\n    this.handles.eq(idx).attr({\n      'role': 'slider',\n      'aria-controls': id,\n      'aria-valuemax': this.options.end,\n      'aria-valuemin': this.options.start,\n      'aria-valuenow': idx === 0 ? this.options.initialStart : this.options.initialEnd,\n      'aria-orientation': this.options.vertical ? 'vertical' : 'horizontal',\n      'tabindex': 0\n    });\n  };\n  /**\n   * Sets the input and `aria-valuenow` values for the slider element.\n   * @function\n   * @private\n   * @param {jQuery} $handle - the currently selected handle.\n   * @param {Number} val - floating point of the new value.\n   */\n  Slider.prototype._setValues = function($handle, val){\n    var idx = this.options.doubleSided ? this.handles.index($handle) : 0;\n    this.inputs.eq(idx).val(val);\n    $handle.attr('aria-valuenow', val);\n  };\n  /**\n   * Handles events on the slider element.\n   * Calculates the new location of the current handle.\n   * If there are two handles and the bar was clicked, it determines which handle to move.\n   * @function\n   * @private\n   * @param {Object} e - the `event` object passed from the listener.\n   * @param {jQuery} $handle - the current handle to calculate for, if selected.\n   * @param {Number} val - floating point number for the new value of the slider.\n   */\n  Slider.prototype._handleEvent = function(e, $handle, val){\n    var value, hasVal;\n    if(!val){//click or drag events\n      e.preventDefault();\n      var _this = this,\n          vertical = this.options.vertical,\n          param = vertical ? 'height' : 'width',\n          direction = vertical ? 'top' : 'left',\n          pageXY = vertical ? e.pageY : e.pageX,\n          halfOfHandle = this.$handle[0].getBoundingClientRect()[param] / 2,\n          barDim = this.$element[0].getBoundingClientRect()[param],\n          barOffset = (this.$element.offset()[direction] -  pageXY),\n          barXY = barOffset > 0 ? -halfOfHandle : (barOffset - halfOfHandle) < -barDim ? barDim : Math.abs(barOffset),//if the cursor position is less than or greater than the elements bounding coordinates, set coordinates within those bounds\n          // eleDim = this.$element[0].getBoundingClientRect()[param],\n          offsetPct = percent(barXY, barDim);\n      value = (this.options.end - this.options.start) * offsetPct;\n      hasVal = false;\n\n      if(!$handle){//figure out which handle it is, pass it to the next function.\n        var firstHndlPos = absPosition(this.$handle, direction, barXY, param),\n            secndHndlPos = absPosition(this.$handle2, direction, barXY, param);\n            $handle = firstHndlPos <= secndHndlPos ? this.$handle : this.$handle2;\n      }\n\n    }else{//change event on input\n      value = val;\n      hasVal = true;\n    }\n\n    this._setHandlePos($handle, value, hasVal);\n  };\n  /**\n   * Adds event listeners to the slider elements.\n   * @function\n   * @private\n   * @param {jQuery} $handle - the current handle to apply listeners to.\n   */\n  Slider.prototype._events = function($handle){\n    if(this.options.disabled){ return false; }\n\n    var _this = this,\n        curHandle,\n        timer;\n\n      this.inputs.off('change.zf.slider').on('change.zf.slider', function(e){\n        var idx = _this.inputs.index($(this));\n        _this._handleEvent(e, _this.handles.eq(idx), $(this).val());\n      });\n\n    if(this.options.clickSelect){\n      this.$element.off('click.zf.slider').on('click.zf.slider', function(e){\n        if(_this.$element.data('dragging')){ return false; }\n        _this.animComplete = false;\n        if(_this.options.doubleSided){\n          _this._handleEvent(e);\n        }else{\n          _this._handleEvent(e, _this.$handle);\n        }\n      });\n    }\n\n    if(this.options.draggable){\n      this.handles.addTouch();\n      // var curHandle,\n      //     timer,\n      var $body = $('body');\n      $handle\n        .off('mousedown.zf.slider')\n        .on('mousedown.zf.slider', function(e){\n          $handle.addClass('is-dragging');\n          _this.$fill.addClass('is-dragging');//\n          _this.$element.data('dragging', true);\n          _this.animComplete = false;\n          curHandle = $(e.currentTarget);\n\n          $body.on('mousemove.zf.slider', function(e){\n            e.preventDefault();\n\n            // timer = setTimeout(function(){\n            _this._handleEvent(e, curHandle);\n            // }, _this.options.dragDelay);\n          }).on('mouseup.zf.slider', function(e){\n            // clearTimeout(timer);\n            _this.animComplete = true;\n            _this._handleEvent(e, curHandle);\n            $handle.removeClass('is-dragging');\n            _this.$fill.removeClass('is-dragging');\n            _this.$element.data('dragging', false);\n            // Foundation.reflow(_this.$element, 'slider');\n            $body.off('mousemove.zf.slider mouseup.zf.slider');\n          });\n      });\n    }\n    $handle.off('keydown.zf.slider').on('keydown.zf.slider', function(e){\n      var idx = _this.options.doubleSided ? _this.handles.index($(this)) : 0,\n        oldValue = parseFloat(_this.inputs.eq(idx).val()),\n        newValue;\n\n      var _$handle = $(this);\n\n      // handle keyboard event with keyboard util\n      Foundation.Keyboard.handleKey(e, _this, {\n        decrease: function() {\n          newValue = oldValue - _this.options.step;\n        },\n        increase: function() {\n          newValue = oldValue + _this.options.step;\n        },\n        decrease_fast: function() {\n          newValue = oldValue - _this.options.step * 10;\n        },\n        increase_fast: function() {\n          newValue = oldValue + _this.options.step * 10;\n        },\n        handled: function() { // only set handle pos when event was handled specially\n          e.preventDefault();\n          _this._setHandlePos(_$handle, newValue, true);\n        }\n      });\n      /*if (newValue) { // if pressed key has special function, update value\n        e.preventDefault();\n        _this._setHandlePos(_$handle, newValue);\n      }*/\n    });\n  };\n  /**\n   * Destroys the slider plugin.\n   */\n   Slider.prototype.destroy = function(){\n     this.handles.off('.zf.slider');\n     this.inputs.off('.zf.slider');\n     this.$element.off('.zf.slider');\n\n     Foundation.unregisterPlugin(this);\n   };\n\n  Foundation.plugin(Slider, 'Slider');\n\n  function percent(frac, num){\n    return (frac / num);\n  }\n  function absPosition($handle, dir, clickPos, param){\n    return Math.abs(($handle.position()[dir] + ($handle[param]() / 2)) - clickPos);\n  }\n}(jQuery, window.Foundation);\n\n//*********this is in case we go to static, absolute positions instead of dynamic positioning********\n// this.setSteps(function(){\n//   _this._events();\n//   var initStart = _this.options.positions[_this.options.initialStart - 1] || null;\n//   var initEnd = _this.options.initialEnd ? _this.options.position[_this.options.initialEnd - 1] : null;\n//   if(initStart || initEnd){\n//     _this._handleEvent(initStart, initEnd);\n//   }\n// });\n\n//***********the other part of absolute positions*************\n// Slider.prototype.setSteps = function(cb){\n//   var posChange = this.$element.outerWidth() / this.options.steps;\n//   var counter = 0\n//   while(counter < this.options.steps){\n//     if(counter){\n//       this.options.positions.push(this.options.positions[counter - 1] + posChange);\n//     }else{\n//       this.options.positions.push(posChange);\n//     }\n//     counter++;\n//   }\n//   cb();\n// };\n"]},"hash":"b4d57ef010afc51b3a9e570f71ed159997d7e881"}
