{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.util.box.js","filenameRelative":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.util.box.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.util.box.js.map","sourceFileName":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.util.box.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"foundation.util.box"},"ignored":false,"code":"!function (Foundation, window) {\n  /**\n   * Compares the dimensions of an element to a container and determines collision events with container.\n   * @function\n   * @param {jQuery} element - jQuery object to test for collisions.\n   * @param {jQuery} parent - jQuery object to use as bounding container.\n   * @param {Boolean} lrOnly - set to true to check left and right values only.\n   * @param {Boolean} tbOnly - set to true to check top and bottom values only.\n   * @default if no parent object passed, detects collisions with `window`.\n   * @returns {Boolean} - true if collision free, false if a collision in any direction.\n   */\n  var ImNotTouchingYou = function ImNotTouchingYou(element, parent, lrOnly, tbOnly) {\n    var eleDims = GetDimensions(element),\n        top,\n        bottom,\n        left,\n        right;\n\n    if (parent) {\n      var parDims = GetDimensions(parent);\n\n      bottom = eleDims.offset.top + eleDims.height <= parDims.height + parDims.offset.top;\n      top = eleDims.offset.top >= parDims.offset.top;\n      left = eleDims.offset.left >= parDims.offset.left;\n      right = eleDims.offset.left + eleDims.width <= parDims.width;\n    } else {\n      bottom = eleDims.offset.top + eleDims.height <= eleDims.windowDims.height + eleDims.windowDims.offset.top;\n      top = eleDims.offset.top >= eleDims.windowDims.offset.top;\n      left = eleDims.offset.left >= eleDims.windowDims.offset.left;\n      right = eleDims.offset.left + eleDims.width <= eleDims.windowDims.width;\n    }\n    var allDirs = [bottom, top, left, right];\n\n    if (lrOnly) {\n      return left === right === true;\n    }\n    if (tbOnly) {\n      return top === bottom === true;\n    }\n\n    return allDirs.indexOf(false) === -1;\n  };\n\n  /**\n   * Uses native methods to return an object of dimension values.\n   * @function\n   * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.\n   * @returns {Object} - nested object of integer pixel values\n   * TODO - if element is window, return only those values.\n   */\n  var GetDimensions = function GetDimensions(elem, test) {\n    elem = elem.length ? elem[0] : elem;\n\n    if (elem === window || elem === document) {\n      throw new Error(\"I'm sorry, Dave. I'm afraid I can't do that.\");\n    }\n\n    var rect = elem.getBoundingClientRect(),\n        parRect = elem.parentNode.getBoundingClientRect(),\n        winRect = document.body.getBoundingClientRect(),\n        winY = window.pageYOffset,\n        winX = window.pageXOffset;\n\n    return {\n      width: rect.width,\n      height: rect.height,\n      offset: {\n        top: rect.top + winY,\n        left: rect.left + winX\n      },\n      parentDims: {\n        width: parRect.width,\n        height: parRect.height,\n        offset: {\n          top: parRect.top + winY,\n          left: parRect.left + winX\n        }\n      },\n      windowDims: {\n        width: winRect.width,\n        height: winRect.height,\n        offset: {\n          top: winY,\n          left: winX\n        }\n      }\n    };\n  };\n  /**\n   * Returns an object of top and left integer pixel values for dynamically rendered elements,\n   * such as: Tooltip, Reveal, and Dropdown\n   * @function\n   * @param {jQuery} element - jQuery object for the element being positioned.\n   * @param {jQuery} anchor - jQuery object for the element's anchor point.\n   * @param {String} position - a string relating to the desired position of the element, relative to it's anchor\n   * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.\n   * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.\n   * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.\n   * TODO alter/rewrite to work with `em` values as well/instead of pixels\n   */\n  var GetOffsets = function GetOffsets(element, anchor, position, vOffset, hOffset, isOverflow) {\n    var $eleDims = GetDimensions(element),\n\n    // var $eleDims = GetDimensions(element),\n    $anchorDims = anchor ? GetDimensions(anchor) : null;\n    // $anchorDims = anchor ? GetDimensions(anchor) : null;\n    switch (position) {\n      case 'top':\n        return {\n          left: $anchorDims.offset.left,\n          top: $anchorDims.offset.top - ($eleDims.height + vOffset)\n        };\n        break;\n      case 'left':\n        return {\n          left: $anchorDims.offset.left - ($eleDims.width + hOffset),\n          top: $anchorDims.offset.top\n        };\n        break;\n      case 'right':\n        return {\n          left: $anchorDims.offset.left + $anchorDims.width + hOffset,\n          top: $anchorDims.offset.top\n        };\n        break;\n      case 'center top':\n        return {\n          left: $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,\n          top: $anchorDims.offset.top - ($eleDims.height + vOffset)\n        };\n        break;\n      case 'center bottom':\n        return {\n          left: isOverflow ? hOffset : $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,\n          top: $anchorDims.offset.top + $anchorDims.height + vOffset\n        };\n        break;\n      case 'center left':\n        return {\n          left: $anchorDims.offset.left - ($eleDims.width + hOffset),\n          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2\n        };\n        break;\n      case 'center right':\n        return {\n          left: $anchorDims.offset.left + $anchorDims.width + hOffset + 1,\n          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2\n        };\n        break;\n      case 'center':\n        return {\n          left: $eleDims.windowDims.offset.left + $eleDims.windowDims.width / 2 - $eleDims.width / 2,\n          top: $eleDims.windowDims.offset.top + $eleDims.windowDims.height / 2 - $eleDims.height / 2\n        };\n        break;\n      case 'reveal':\n        return {\n          left: ($eleDims.windowDims.width - $eleDims.width) / 2,\n          top: $eleDims.windowDims.offset.top + vOffset\n        };\n      case 'reveal full':\n        return {\n          left: $eleDims.windowDims.offset.left,\n          top: $eleDims.windowDims.offset.top\n        };\n        break;\n      default:\n        return {\n          left: $anchorDims.offset.left,\n          top: $anchorDims.offset.top + $anchorDims.height + vOffset\n        };\n    }\n  };\n  Foundation.Box = {\n    ImNotTouchingYou: ImNotTouchingYou,\n    GetDimensions: GetDimensions,\n    GetOffsets: GetOffsets\n  };\n}(window.Foundation, window);","ast":null,"map":{"version":3,"sources":["/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.util.box.js"],"names":[],"mappings":"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","file":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.util.box.js.map","sourcesContent":["!function(Foundation, window){\n  /**\n   * Compares the dimensions of an element to a container and determines collision events with container.\n   * @function\n   * @param {jQuery} element - jQuery object to test for collisions.\n   * @param {jQuery} parent - jQuery object to use as bounding container.\n   * @param {Boolean} lrOnly - set to true to check left and right values only.\n   * @param {Boolean} tbOnly - set to true to check top and bottom values only.\n   * @default if no parent object passed, detects collisions with `window`.\n   * @returns {Boolean} - true if collision free, false if a collision in any direction.\n   */\n  var ImNotTouchingYou = function(element, parent, lrOnly, tbOnly){\n    var eleDims = GetDimensions(element),\n        top, bottom, left, right;\n\n    if(parent){\n      var parDims = GetDimensions(parent);\n\n      bottom = (eleDims.offset.top + eleDims.height <= parDims.height + parDims.offset.top);\n      top    = (eleDims.offset.top >= parDims.offset.top);\n      left   = (eleDims.offset.left >= parDims.offset.left);\n      right  = (eleDims.offset.left + eleDims.width <= parDims.width);\n    }else{\n      bottom = (eleDims.offset.top + eleDims.height <= eleDims.windowDims.height + eleDims.windowDims.offset.top);\n      top    = (eleDims.offset.top >= eleDims.windowDims.offset.top);\n      left   = (eleDims.offset.left >= eleDims.windowDims.offset.left);\n      right  = (eleDims.offset.left + eleDims.width <= eleDims.windowDims.width);\n    }\n    var allDirs = [bottom, top, left, right];\n\n    if(lrOnly){ return left === right === true; }\n    if(tbOnly){ return top === bottom === true; }\n\n    return allDirs.indexOf(false) === -1;\n  };\n\n  /**\n   * Uses native methods to return an object of dimension values.\n   * @function\n   * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.\n   * @returns {Object} - nested object of integer pixel values\n   * TODO - if element is window, return only those values.\n   */\n  var GetDimensions = function(elem, test){\n    elem = elem.length ? elem[0] : elem;\n\n    if(elem === window || elem === document){ throw new Error(\"I'm sorry, Dave. I'm afraid I can't do that.\"); }\n\n    var rect = elem.getBoundingClientRect(),\n        parRect = elem.parentNode.getBoundingClientRect(),\n        winRect = document.body.getBoundingClientRect(),\n        winY = window.pageYOffset,\n        winX = window.pageXOffset;\n\n    return {\n      width: rect.width,\n      height: rect.height,\n      offset: {\n        top: rect.top + winY,\n        left: rect.left + winX\n      },\n      parentDims: {\n        width: parRect.width,\n        height: parRect.height,\n        offset: {\n          top: parRect.top + winY,\n          left: parRect.left + winX\n        }\n      },\n      windowDims: {\n        width: winRect.width,\n        height: winRect.height,\n        offset: {\n          top: winY,\n          left: winX\n        }\n      }\n    };\n  };\n  /**\n   * Returns an object of top and left integer pixel values for dynamically rendered elements,\n   * such as: Tooltip, Reveal, and Dropdown\n   * @function\n   * @param {jQuery} element - jQuery object for the element being positioned.\n   * @param {jQuery} anchor - jQuery object for the element's anchor point.\n   * @param {String} position - a string relating to the desired position of the element, relative to it's anchor\n   * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.\n   * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.\n   * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.\n   * TODO alter/rewrite to work with `em` values as well/instead of pixels\n   */\n  var GetOffsets = function(element, anchor, position, vOffset, hOffset, isOverflow){\n    var $eleDims = GetDimensions(element),\n    // var $eleDims = GetDimensions(element),\n        $anchorDims = anchor ? GetDimensions(anchor) : null;\n        // $anchorDims = anchor ? GetDimensions(anchor) : null;\n    switch(position){\n      case 'top':\n        return {\n          left: $anchorDims.offset.left,\n          top: $anchorDims.offset.top - ($eleDims.height + vOffset)\n        };\n        break;\n      case 'left':\n        return {\n          left: $anchorDims.offset.left - ($eleDims.width + hOffset),\n          top: $anchorDims.offset.top\n        };\n        break;\n      case 'right':\n        return {\n          left: $anchorDims.offset.left + $anchorDims.width + hOffset,\n          top: $anchorDims.offset.top\n        };\n        break;\n      case 'center top':\n        return {\n          left: ($anchorDims.offset.left + ($anchorDims.width / 2)) - ($eleDims.width / 2),\n          top: $anchorDims.offset.top - ($eleDims.height + vOffset)\n        };\n        break;\n      case 'center bottom':\n        return {\n          left: isOverflow ? hOffset : (($anchorDims.offset.left + ($anchorDims.width / 2)) - ($eleDims.width / 2)),\n          top: $anchorDims.offset.top + $anchorDims.height + vOffset\n        };\n        break;\n      case 'center left':\n        return {\n          left: $anchorDims.offset.left - ($eleDims.width + hOffset),\n          top: ($anchorDims.offset.top + ($anchorDims.height / 2)) - ($eleDims.height / 2)\n        };\n        break;\n      case 'center right':\n        return {\n          left: $anchorDims.offset.left + $anchorDims.width + hOffset + 1,\n          top: ($anchorDims.offset.top + ($anchorDims.height / 2)) - ($eleDims.height / 2)\n        };\n        break;\n      case 'center':\n        return {\n          left: ($eleDims.windowDims.offset.left + ($eleDims.windowDims.width / 2)) - ($eleDims.width / 2),\n          top: ($eleDims.windowDims.offset.top + ($eleDims.windowDims.height / 2)) - ($eleDims.height / 2)\n        };\n        break;\n      case 'reveal':\n        return {\n          left: ($eleDims.windowDims.width - $eleDims.width) / 2,\n          top: $eleDims.windowDims.offset.top + vOffset\n        };\n      case 'reveal full':\n        return {\n          left: $eleDims.windowDims.offset.left,\n          top: $eleDims.windowDims.offset.top,\n        };\n        break;\n      default:\n        return {\n          left: $anchorDims.offset.left,\n          top: $anchorDims.offset.top + $anchorDims.height + vOffset\n        };\n    }\n  };\n  Foundation.Box = {\n    ImNotTouchingYou: ImNotTouchingYou,\n    GetDimensions: GetDimensions,\n    GetOffsets: GetOffsets\n  };\n}(window.Foundation, window);\n"]},"hash":"28db83ac31c8d5a332b0eff77ef6f6ea45d6a197"}
