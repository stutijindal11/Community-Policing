{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/prism/components/prism-handlebars.js","filenameRelative":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/prism/components/prism-handlebars.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/prism/components/prism-handlebars.js.map","sourceFileName":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/prism/components/prism-handlebars.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"prism-handlebars"},"ignored":false,"code":"(function (Prism) {\n\n\tvar handlebars_pattern = /\\{\\{\\{[\\w\\W]+?\\}\\}\\}|\\{\\{[\\w\\W]+?\\}\\}/g;\n\n\tPrism.languages.handlebars = Prism.languages.extend('markup', {\n\t\t'handlebars': {\n\t\t\tpattern: handlebars_pattern,\n\t\t\tinside: {\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^\\{\\{\\{?|\\}\\}\\}?$/i,\n\t\t\t\t\talias: 'punctuation'\n\t\t\t\t},\n\t\t\t\t'string': /([\"'])(\\\\?.)*?\\1/,\n\t\t\t\t'number': /\\b-?(0x[\\dA-Fa-f]+|\\d*\\.?\\d+([Ee][+-]?\\d+)?)\\b/,\n\t\t\t\t'boolean': /\\b(true|false)\\b/,\n\t\t\t\t'block': {\n\t\t\t\t\tpattern: /^(\\s*~?\\s*)[#\\/]\\S+?(?=\\s*~?\\s*$|\\s)/i,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'keyword'\n\t\t\t\t},\n\t\t\t\t'brackets': {\n\t\t\t\t\tpattern: /\\[[^\\]]+\\]/,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\tpunctuation: /\\[|\\]/,\n\t\t\t\t\t\tvariable: /[\\w\\W]+/\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'punctuation': /[!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n\t\t\t\t'variable': /[^!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n\t\t\t}\n\t\t}\n\t});\n\n\t// Comments are inserted at top so that they can\n\t// surround markup\n\tPrism.languages.insertBefore('handlebars', 'tag', {\n\t\t'handlebars-comment': {\n\t\t\tpattern: /\\{\\{![\\w\\W]*?\\}\\}/,\n\t\t\talias: ['handlebars', 'comment']\n\t\t}\n\t});\n\n\t// Tokenize all inline Handlebars expressions that are wrapped in {{ }} or {{{ }}}\n\t// This allows for easy Handlebars + markup highlighting\n\tPrism.hooks.add('before-highlight', function (env) {\n\t\tif (env.language !== 'handlebars') {\n\t\t\treturn;\n\t\t}\n\n\t\tenv.tokenStack = [];\n\n\t\tenv.backupCode = env.code;\n\t\tenv.code = env.code.replace(handlebars_pattern, function (match) {\n\t\t\tenv.tokenStack.push(match);\n\n\t\t\treturn '___HANDLEBARS' + env.tokenStack.length + '___';\n\t\t});\n\t});\n\n\t// Restore env.code for other plugins (e.g. line-numbers)\n\tPrism.hooks.add('before-insert', function (env) {\n\t\tif (env.language === 'handlebars') {\n\t\t\tenv.code = env.backupCode;\n\t\t\tdelete env.backupCode;\n\t\t}\n\t});\n\n\t// Re-insert the tokens after highlighting\n\t// and highlight them with defined grammar\n\tPrism.hooks.add('after-highlight', function (env) {\n\t\tif (env.language !== 'handlebars') {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (var i = 0, t; t = env.tokenStack[i]; i++) {\n\t\t\t// The replace prevents $$, $&, $`, $', $n, $nn from being interpreted as special patterns\n\t\t\tenv.highlightedCode = env.highlightedCode.replace('___HANDLEBARS' + (i + 1) + '___', Prism.highlight(t, env.grammar, 'handlebars').replace(/\\$/g, '$$$$'));\n\t\t}\n\n\t\tenv.element.innerHTML = env.highlightedCode;\n\t});\n})(Prism);","ast":null,"map":{"version":3,"sources":["/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/prism/components/prism-handlebars.js"],"names":[],"mappings":"AAAC,WAAS,KAAT,EAAgB;;AAEhB,KAAI,qBAAqB,wCAAzB;;AAEA,OAAM,SAAN,CAAgB,UAAhB,GAA6B,MAAM,SAAN,CAAgB,MAAhB,CAAuB,QAAvB,EAAiC;AAC7D,gBAAc;AACb,YAAS,kBADI;AAEb,WAAQ;AACP,iBAAa;AACZ,cAAS,oBADG;AAEZ,YAAO;AAFK,KADN;AAKP,cAAU,kBALH;AAMP,cAAU,gDANH;AAOP,eAAW,kBAPJ;AAQP,aAAS;AACR,cAAS,uCADD;AAER,iBAAY,IAFJ;AAGR,YAAO;AAHC,KARF;AAaP,gBAAY;AACX,cAAS,YADE;AAEX,aAAQ;AACP,mBAAa,OADN;AAEP,gBAAU;AAFH;AAFG,KAbL;AAoBP,mBAAe,mCApBR;AAqBP,gBAAY;AArBL;AAFK;AAD+C,EAAjC,CAA7B;;;;AA+BA,OAAM,SAAN,CAAgB,YAAhB,CAA6B,YAA7B,EAA2C,KAA3C,EAAkD;AACjD,wBAAsB;AACrB,YAAS,mBADY;AAErB,UAAO,CAAC,YAAD,EAAc,SAAd;AAFc;AAD2B,EAAlD;;;;AASA,OAAM,KAAN,CAAY,GAAZ,CAAgB,kBAAhB,EAAoC,UAAS,GAAT,EAAc;AACjD,MAAI,IAAI,QAAJ,KAAiB,YAArB,EAAmC;AAClC;AACA;;AAED,MAAI,UAAJ,GAAiB,EAAjB;;AAEA,MAAI,UAAJ,GAAiB,IAAI,IAArB;AACA,MAAI,IAAJ,GAAW,IAAI,IAAJ,CAAS,OAAT,CAAiB,kBAAjB,EAAqC,UAAS,KAAT,EAAgB;AAC/D,OAAI,UAAJ,CAAe,IAAf,CAAoB,KAApB;;AAEA,UAAO,kBAAkB,IAAI,UAAJ,CAAe,MAAjC,GAA0C,KAAjD;AACA,GAJU,CAAX;AAKA,EAbD;;;AAgBA,OAAM,KAAN,CAAY,GAAZ,CAAgB,eAAhB,EAAiC,UAAS,GAAT,EAAc;AAC9C,MAAI,IAAI,QAAJ,KAAiB,YAArB,EAAmC;AAClC,OAAI,IAAJ,GAAW,IAAI,UAAf;AACA,UAAO,IAAI,UAAX;AACA;AACD,EALD;;;;AASA,OAAM,KAAN,CAAY,GAAZ,CAAgB,iBAAhB,EAAmC,UAAS,GAAT,EAAc;AAChD,MAAI,IAAI,QAAJ,KAAiB,YAArB,EAAmC;AAClC;AACA;;AAED,OAAK,IAAI,IAAI,CAAR,EAAW,CAAhB,EAAmB,IAAI,IAAI,UAAJ,CAAe,CAAf,CAAvB,EAA0C,GAA1C,EAA+C;;AAE9C,OAAI,eAAJ,GAAsB,IAAI,eAAJ,CAAoB,OAApB,CAA4B,mBAAmB,IAAI,CAAvB,IAA4B,KAAxD,EAA+D,MAAM,SAAN,CAAgB,CAAhB,EAAmB,IAAI,OAAvB,EAAgC,YAAhC,EAA8C,OAA9C,CAAsD,KAAtD,EAA6D,MAA7D,CAA/D,CAAtB;AACA;;AAED,MAAI,OAAJ,CAAY,SAAZ,GAAwB,IAAI,eAA5B;AACA,EAXD;AAaA,CAlFA,EAkFC,KAlFD,CAAD","file":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/prism/components/prism-handlebars.js.map","sourcesContent":["(function(Prism) {\n\n\tvar handlebars_pattern = /\\{\\{\\{[\\w\\W]+?\\}\\}\\}|\\{\\{[\\w\\W]+?\\}\\}/g;\n\n\tPrism.languages.handlebars = Prism.languages.extend('markup', {\n\t\t'handlebars': {\n\t\t\tpattern: handlebars_pattern,\n\t\t\tinside: {\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^\\{\\{\\{?|\\}\\}\\}?$/i,\n\t\t\t\t\talias: 'punctuation'\n\t\t\t\t},\n\t\t\t\t'string': /([\"'])(\\\\?.)*?\\1/,\n\t\t\t\t'number': /\\b-?(0x[\\dA-Fa-f]+|\\d*\\.?\\d+([Ee][+-]?\\d+)?)\\b/,\n\t\t\t\t'boolean': /\\b(true|false)\\b/,\n\t\t\t\t'block': {\n\t\t\t\t\tpattern: /^(\\s*~?\\s*)[#\\/]\\S+?(?=\\s*~?\\s*$|\\s)/i,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'keyword'\n\t\t\t\t},\n\t\t\t\t'brackets': {\n\t\t\t\t\tpattern: /\\[[^\\]]+\\]/,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\tpunctuation: /\\[|\\]/,\n\t\t\t\t\t\tvariable: /[\\w\\W]+/\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'punctuation': /[!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n\t\t\t\t'variable': /[^!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n\t\t\t}\n\t\t}\n\t});\n\n\t// Comments are inserted at top so that they can\n\t// surround markup\n\tPrism.languages.insertBefore('handlebars', 'tag', {\n\t\t'handlebars-comment': {\n\t\t\tpattern: /\\{\\{![\\w\\W]*?\\}\\}/,\n\t\t\talias: ['handlebars','comment']\n\t\t}\n\t});\n\n\t// Tokenize all inline Handlebars expressions that are wrapped in {{ }} or {{{ }}}\n\t// This allows for easy Handlebars + markup highlighting\n\tPrism.hooks.add('before-highlight', function(env) {\n\t\tif (env.language !== 'handlebars') {\n\t\t\treturn;\n\t\t}\n\n\t\tenv.tokenStack = [];\n\n\t\tenv.backupCode = env.code;\n\t\tenv.code = env.code.replace(handlebars_pattern, function(match) {\n\t\t\tenv.tokenStack.push(match);\n\n\t\t\treturn '___HANDLEBARS' + env.tokenStack.length + '___';\n\t\t});\n\t});\n\n\t// Restore env.code for other plugins (e.g. line-numbers)\n\tPrism.hooks.add('before-insert', function(env) {\n\t\tif (env.language === 'handlebars') {\n\t\t\tenv.code = env.backupCode;\n\t\t\tdelete env.backupCode;\n\t\t}\n\t});\n\n\t// Re-insert the tokens after highlighting\n\t// and highlight them with defined grammar\n\tPrism.hooks.add('after-highlight', function(env) {\n\t\tif (env.language !== 'handlebars') {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (var i = 0, t; t = env.tokenStack[i]; i++) {\n\t\t\t// The replace prevents $$, $&, $`, $', $n, $nn from being interpreted as special patterns\n\t\t\tenv.highlightedCode = env.highlightedCode.replace('___HANDLEBARS' + (i + 1) + '___', Prism.highlight(t, env.grammar, 'handlebars').replace(/\\$/g, '$$$$'));\n\t\t}\n\n\t\tenv.element.innerHTML = env.highlightedCode;\n\t});\n\n}(Prism));\n"]},"hash":"348292e56d2cf69cd55a58684921e8e744fbe255"}
