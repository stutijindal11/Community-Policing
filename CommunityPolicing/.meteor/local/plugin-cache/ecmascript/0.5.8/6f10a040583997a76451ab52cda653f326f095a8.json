{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/qunit/src/core/logging.js","filenameRelative":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/qunit/src/core/logging.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/qunit/src/core/logging.js.map","sourceFileName":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/qunit/src/core/logging.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"logging"},"ignored":false,"code":"var loggingCallbacks = {};\n\n// Register logging callbacks\nfunction registerLoggingCallbacks(obj) {\n\tvar i,\n\t    l,\n\t    key,\n\t    callbackNames = [\"begin\", \"done\", \"log\", \"testStart\", \"testDone\", \"moduleStart\", \"moduleDone\"];\n\n\tfunction registerLoggingCallback(key) {\n\t\tvar loggingCallback = function loggingCallback(callback) {\n\t\t\tif (objectType(callback) !== \"function\") {\n\t\t\t\tthrow new Error(\"QUnit logging methods require a callback function as their first parameters.\");\n\t\t\t}\n\n\t\t\tconfig.callbacks[key].push(callback);\n\t\t};\n\n\t\t// DEPRECATED: This will be removed on QUnit 2.0.0+\n\t\t// Stores the registered functions allowing restoring\n\t\t// at verifyLoggingCallbacks() if modified\n\t\tloggingCallbacks[key] = loggingCallback;\n\n\t\treturn loggingCallback;\n\t}\n\n\tfor (i = 0, l = callbackNames.length; i < l; i++) {\n\t\tkey = callbackNames[i];\n\n\t\t// Initialize key collection of logging callback\n\t\tif (objectType(config.callbacks[key]) === \"undefined\") {\n\t\t\tconfig.callbacks[key] = [];\n\t\t}\n\n\t\tobj[key] = registerLoggingCallback(key);\n\t}\n}\n\nfunction runLoggingCallbacks(key, args) {\n\tvar i, l, callbacks;\n\n\tcallbacks = config.callbacks[key];\n\tfor (i = 0, l = callbacks.length; i < l; i++) {\n\t\tcallbacks[i](args);\n\t}\n}\n\n// DEPRECATED: This will be removed on 2.0.0+\n// This function verifies if the loggingCallbacks were modified by the user\n// If so, it will restore it, assign the given callback and print a console warning\nfunction verifyLoggingCallbacks() {\n\tvar loggingCallback, userCallback;\n\n\tfor (loggingCallback in loggingCallbacks) {\n\t\tif (QUnit[loggingCallback] !== loggingCallbacks[loggingCallback]) {\n\n\t\t\tuserCallback = QUnit[loggingCallback];\n\n\t\t\t// Restore the callback function\n\t\t\tQUnit[loggingCallback] = loggingCallbacks[loggingCallback];\n\n\t\t\t// Assign the deprecated given callback\n\t\t\tQUnit[loggingCallback](userCallback);\n\n\t\t\tif (global.console && global.console.warn) {\n\t\t\t\tglobal.console.warn(\"QUnit.\" + loggingCallback + \" was replaced with a new value.\\n\" + \"Please, check out the documentation on how to apply logging callbacks.\\n\" + \"Reference: http://api.qunitjs.com/category/callbacks/\");\n\t\t\t}\n\t\t}\n\t}\n}","ast":null,"map":{"version":3,"sources":["/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/qunit/src/core/logging.js"],"names":[],"mappings":"AAAA,IAAI,mBAAmB,EAAvB;;;AAGA,SAAS,wBAAT,CAAmC,GAAnC,EAAyC;AACxC,KAAI,CAAJ;AAAA,KAAO,CAAP;AAAA,KAAU,GAAV;AAAA,KACC,gBAAgB,CAAE,OAAF,EAAW,MAAX,EAAmB,KAAnB,EAA0B,WAA1B,EAAuC,UAAvC,EACf,aADe,EACA,YADA,CADjB;;AAIA,UAAS,uBAAT,CAAkC,GAAlC,EAAwC;AACvC,MAAI,kBAAkB,SAAlB,eAAkB,CAAU,QAAV,EAAqB;AAC1C,OAAK,WAAY,QAAZ,MAA2B,UAAhC,EAA6C;AAC5C,UAAM,IAAI,KAAJ,CACL,8EADK,CAAN;AAGA;;AAED,UAAO,SAAP,CAAkB,GAAlB,EAAwB,IAAxB,CAA8B,QAA9B;AACA,GARD;;;;;AAaA,mBAAkB,GAAlB,IAA0B,eAA1B;;AAEA,SAAO,eAAP;AACA;;AAED,MAAM,IAAI,CAAJ,EAAO,IAAI,cAAc,MAA/B,EAAuC,IAAI,CAA3C,EAA8C,GAA9C,EAAoD;AACnD,QAAM,cAAe,CAAf,CAAN;;;AAGA,MAAK,WAAY,OAAO,SAAP,CAAkB,GAAlB,CAAZ,MAA0C,WAA/C,EAA6D;AAC5D,UAAO,SAAP,CAAkB,GAAlB,IAA0B,EAA1B;AACA;;AAED,MAAK,GAAL,IAAa,wBAAyB,GAAzB,CAAb;AACA;AACD;;AAED,SAAS,mBAAT,CAA8B,GAA9B,EAAmC,IAAnC,EAA0C;AACzC,KAAI,CAAJ,EAAO,CAAP,EAAU,SAAV;;AAEA,aAAY,OAAO,SAAP,CAAkB,GAAlB,CAAZ;AACA,MAAM,IAAI,CAAJ,EAAO,IAAI,UAAU,MAA3B,EAAmC,IAAI,CAAvC,EAA0C,GAA1C,EAAgD;AAC/C,YAAW,CAAX,EAAgB,IAAhB;AACA;AACD;;;;;AAKD,SAAS,sBAAT,GAAkC;AACjC,KAAI,eAAJ,EAAqB,YAArB;;AAEA,MAAM,eAAN,IAAyB,gBAAzB,EAA4C;AAC3C,MAAK,MAAO,eAAP,MAA6B,iBAAkB,eAAlB,CAAlC,EAAwE;;AAEvE,kBAAe,MAAO,eAAP,CAAf;;;AAGA,SAAO,eAAP,IAA2B,iBAAkB,eAAlB,CAA3B;;;AAGA,SAAO,eAAP,EAA0B,YAA1B;;AAEA,OAAK,OAAO,OAAP,IAAkB,OAAO,OAAP,CAAe,IAAtC,EAA6C;AAC5C,WAAO,OAAP,CAAe,IAAf,CACC,WAAW,eAAX,GAA6B,mCAA7B,GACA,0EADA,GAEA,uDAHD;AAKA;AACD;AACD;AACD","file":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/qunit/src/core/logging.js.map","sourcesContent":["var loggingCallbacks = {};\n\n// Register logging callbacks\nfunction registerLoggingCallbacks( obj ) {\n\tvar i, l, key,\n\t\tcallbackNames = [ \"begin\", \"done\", \"log\", \"testStart\", \"testDone\",\n\t\t\t\"moduleStart\", \"moduleDone\" ];\n\n\tfunction registerLoggingCallback( key ) {\n\t\tvar loggingCallback = function( callback ) {\n\t\t\tif ( objectType( callback ) !== \"function\" ) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"QUnit logging methods require a callback function as their first parameters.\"\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconfig.callbacks[ key ].push( callback );\n\t\t};\n\n\t\t// DEPRECATED: This will be removed on QUnit 2.0.0+\n\t\t// Stores the registered functions allowing restoring\n\t\t// at verifyLoggingCallbacks() if modified\n\t\tloggingCallbacks[ key ] = loggingCallback;\n\n\t\treturn loggingCallback;\n\t}\n\n\tfor ( i = 0, l = callbackNames.length; i < l; i++ ) {\n\t\tkey = callbackNames[ i ];\n\n\t\t// Initialize key collection of logging callback\n\t\tif ( objectType( config.callbacks[ key ] ) === \"undefined\" ) {\n\t\t\tconfig.callbacks[ key ] = [];\n\t\t}\n\n\t\tobj[ key ] = registerLoggingCallback( key );\n\t}\n}\n\nfunction runLoggingCallbacks( key, args ) {\n\tvar i, l, callbacks;\n\n\tcallbacks = config.callbacks[ key ];\n\tfor ( i = 0, l = callbacks.length; i < l; i++ ) {\n\t\tcallbacks[ i ]( args );\n\t}\n}\n\n// DEPRECATED: This will be removed on 2.0.0+\n// This function verifies if the loggingCallbacks were modified by the user\n// If so, it will restore it, assign the given callback and print a console warning\nfunction verifyLoggingCallbacks() {\n\tvar loggingCallback, userCallback;\n\n\tfor ( loggingCallback in loggingCallbacks ) {\n\t\tif ( QUnit[ loggingCallback ] !== loggingCallbacks[ loggingCallback ] ) {\n\n\t\t\tuserCallback = QUnit[ loggingCallback ];\n\n\t\t\t// Restore the callback function\n\t\t\tQUnit[ loggingCallback ] = loggingCallbacks[ loggingCallback ];\n\n\t\t\t// Assign the deprecated given callback\n\t\t\tQUnit[ loggingCallback ]( userCallback );\n\n\t\t\tif ( global.console && global.console.warn ) {\n\t\t\t\tglobal.console.warn(\n\t\t\t\t\t\"QUnit.\" + loggingCallback + \" was replaced with a new value.\\n\" +\n\t\t\t\t\t\"Please, check out the documentation on how to apply logging callbacks.\\n\" +\n\t\t\t\t\t\"Reference: http://api.qunitjs.com/category/callbacks/\"\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n"]},"hash":"6f10a040583997a76451ab52cda653f326f095a8"}
