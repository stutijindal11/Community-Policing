{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.util.keyboard.js","filenameRelative":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.util.keyboard.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.util.keyboard.js.map","sourceFileName":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.util.keyboard.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"foundation.util.keyboard"},"ignored":false,"code":"/*******************************************\n *                                         *\n * This util was created by Marius Olbertz *\n * Please thank Marius on GitHub /owlbertz *\n * or the web http://www.mariusolbertz.de/ *\n *                                         *\n ******************************************/\n!function ($, Foundation) {\n  'use strict';\n\n  Foundation.Keyboard = {};\n\n  var keyCodes = {\n    9: 'TAB',\n    13: 'ENTER',\n    27: 'ESCAPE',\n    32: 'SPACE',\n    37: 'ARROW_LEFT',\n    38: 'ARROW_UP',\n    39: 'ARROW_RIGHT',\n    40: 'ARROW_DOWN'\n  };\n\n  // constants for easier comparing Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\n  var keys = function (kcs) {\n    var k = {};\n    for (var kc in meteorBabelHelpers.sanitizeForInObject(kcs)) {\n      k[kcs[kc]] = kcs[kc];\n    }return k;\n  }(keyCodes);\n\n  Foundation.Keyboard.keys = keys;\n\n  /**\n   * Parses the (keyboard) event and returns a String that represents its key\n   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\n   * @param {Event} event - the event generated by the event handler\n   * @return String key - String that represents the key pressed\n   */\n  var parseKey = function parseKey(event) {\n    var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase();\n    if (event.shiftKey) key = 'SHIFT_' + key;\n    if (event.ctrlKey) key = 'CTRL_' + key;\n    if (event.altKey) key = 'ALT_' + key;\n    return key;\n  };\n  Foundation.Keyboard.parseKey = parseKey;\n\n  // plain commands per component go here, ltr and rtl are merged based on orientation\n  var commands = {};\n\n  /**\n   * Handles the given (keyboard) event\n   * @param {Event} event - the event generated by the event handler\n   * @param {Object} component - Foundation component, e.g. Slider or Reveal\n   * @param {Objects} functions - collection of functions that are to be executed\n   */\n  var handleKey = function handleKey(event, component, functions) {\n    var commandList = commands[Foundation.getFnName(component)],\n        keyCode = parseKey(event),\n        cmds,\n        command,\n        fn;\n    if (!commandList) return console.warn('Component not defined!');\n\n    if (typeof commandList.ltr === 'undefined') {\n      // this component does not differentiate between ltr and rtl\n      cmds = commandList; // use plain list\n    } else {\n        // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa\n        if (Foundation.rtl()) cmds = $.extend({}, commandList.ltr, commandList.rtl);else cmds = $.extend({}, commandList.rtl, commandList.ltr);\n      }\n    command = cmds[keyCode];\n\n    fn = functions[command];\n    if (fn && typeof fn === 'function') {\n      // execute function with context of the component if exists\n      fn.apply(component);\n      if (functions.handled || typeof functions.handled === 'function') {\n        // execute function when event was handled\n        functions.handled.apply(component);\n      }\n    } else {\n      if (functions.unhandled || typeof functions.unhandled === 'function') {\n        // execute function when event was not handled\n        functions.unhandled.apply(component);\n      }\n    }\n  };\n  Foundation.Keyboard.handleKey = handleKey;\n\n  /**\n   * Finds all focusable elements within the given `$element`\n   * @param {jQuery} $element - jQuery object to search within\n   * @return {jQuery} $focusable - all focusable elements within `$element`\n   */\n  var findFocusable = function findFocusable($element) {\n    return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function () {\n      if (!$(this).is(':visible') || $(this).attr('tabindex') < 0) {\n        return false;\n      } //only have visible elements and those that have a tabindex greater or equal 0\n      return true;\n    });\n  };\n  Foundation.Keyboard.findFocusable = findFocusable;\n\n  /**\n   * Returns the component name name\n   * @param {Object} component - Foundation component, e.g. Slider or Reveal\n   * @return String componentName\n   */\n\n  var register = function register(componentName, cmds) {\n    commands[componentName] = cmds;\n  };\n  Foundation.Keyboard.register = register;\n}(jQuery, window.Foundation);","ast":null,"map":{"version":3,"sources":["/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.util.keyboard.js"],"names":[],"mappings":"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","file":"/packages/anbuselvan:meteor-toggle-switch/vendor/css-toggle-switch/bower_components/foundation-sites/js/foundation.util.keyboard.js.map","sourcesContent":["/*******************************************\n *                                         *\n * This util was created by Marius Olbertz *\n * Please thank Marius on GitHub /owlbertz *\n * or the web http://www.mariusolbertz.de/ *\n *                                         *\n ******************************************/\n!function($, Foundation){\n  'use strict';\n  Foundation.Keyboard = {};\n\n  var keyCodes = {\n    9: 'TAB',\n    13: 'ENTER',\n    27: 'ESCAPE',\n    32: 'SPACE',\n    37: 'ARROW_LEFT',\n    38: 'ARROW_UP',\n    39: 'ARROW_RIGHT',\n    40: 'ARROW_DOWN'\n  };\n\n  // constants for easier comparing Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\n  var keys = (function(kcs) {\n    var k = {};\n    for (var kc in kcs) k[kcs[kc]] = kcs[kc];\n    return k;\n  })(keyCodes);\n\n  Foundation.Keyboard.keys = keys;\n\n  /**\n   * Parses the (keyboard) event and returns a String that represents its key\n   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\n   * @param {Event} event - the event generated by the event handler\n   * @return String key - String that represents the key pressed\n   */\n  var parseKey = function(event) {\n    var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase();\n    if (event.shiftKey) key = 'SHIFT_' + key;\n    if (event.ctrlKey) key = 'CTRL_' + key;\n    if (event.altKey) key = 'ALT_' + key;\n    return key;\n  };\n  Foundation.Keyboard.parseKey = parseKey;\n\n\n  // plain commands per component go here, ltr and rtl are merged based on orientation\n  var commands = {};\n\n  /**\n   * Handles the given (keyboard) event\n   * @param {Event} event - the event generated by the event handler\n   * @param {Object} component - Foundation component, e.g. Slider or Reveal\n   * @param {Objects} functions - collection of functions that are to be executed\n   */\n  var handleKey = function(event, component, functions) {\n    var commandList = commands[Foundation.getFnName(component)],\n      keyCode = parseKey(event),\n      cmds,\n      command,\n      fn;\n    if (!commandList) return console.warn('Component not defined!');\n\n    if (typeof commandList.ltr === 'undefined') { // this component does not differentiate between ltr and rtl\n        cmds = commandList; // use plain list\n    } else { // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa\n        if (Foundation.rtl()) cmds = $.extend({}, commandList.ltr, commandList.rtl);\n\n        else cmds = $.extend({}, commandList.rtl, commandList.ltr);\n    }\n    command = cmds[keyCode];\n\n\n    fn = functions[command];\n    if (fn && typeof fn === 'function') { // execute function with context of the component if exists\n        fn.apply(component);\n        if (functions.handled || typeof functions.handled === 'function') { // execute function when event was handled\n            functions.handled.apply(component);\n        }\n    } else {\n        if (functions.unhandled || typeof functions.unhandled === 'function') { // execute function when event was not handled\n            functions.unhandled.apply(component);\n        }\n    }\n  };\n  Foundation.Keyboard.handleKey = handleKey;\n\n  /**\n   * Finds all focusable elements within the given `$element`\n   * @param {jQuery} $element - jQuery object to search within\n   * @return {jQuery} $focusable - all focusable elements within `$element`\n   */\n  var findFocusable = function($element) {\n    return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function() {\n      if (!$(this).is(':visible') || $(this).attr('tabindex') < 0) { return false; } //only have visible elements and those that have a tabindex greater or equal 0\n      return true;\n    });\n  };\n  Foundation.Keyboard.findFocusable = findFocusable;\n\n  /**\n   * Returns the component name name\n   * @param {Object} component - Foundation component, e.g. Slider or Reveal\n   * @return String componentName\n   */\n\n  var register = function(componentName, cmds) {\n    commands[componentName] = cmds;\n  };\n  Foundation.Keyboard.register = register;\n}(jQuery, window.Foundation);\n"]},"hash":"626f2eec5cd6d2990a3b6b3bb12f47c2e3d0ce79"}
